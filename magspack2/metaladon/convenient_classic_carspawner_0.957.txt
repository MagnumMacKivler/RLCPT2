@name Convenient Classic Carspawner 0.957

#Set your preferred display model here. This will change the default model, too.

#@model models/magtrains/trucks/barber_s2_phx.mdl
@model models/magtrains/trucks/barber_s2_rsg.mdl
#@model models/joe/bogies/2ft_2.mdl

#Constants (cannot be changed after first())
@persist QUOTA HIDECHAT SAFEMODE NOPRNT LOADVAL MAX WEIGHTMUL LOADCHANCE INFOPERMODEL DELT FUNC INFOPERWEATHER TXCLRSPD DISPLAYTAGS STACKSIZE FIVEFOOT ENDC TOOLONG SCINT SPWNBHVIOR FUNMODE VISIBLESCAN FINDTRACK
@persist [MODELS TAGDATA DEFAULTAGS BOGIES]:table [WEATHERING COLORS TRNTYPS TAGOVERRIDES]:array [TXCLR]:vector2 [VERSION]:string 

#Normal Vars
@persist SetAng OldOffset OldHead Gauge Railhead SCSpeed Hue SCTrav Chew Tag1 Tag2 Time Taglist ID TotalTrainLength TotalTrainWeight Same RopeID SCProc ForeOffset Delay SpawnPhase
@persist LyrC LyrX LyrY LyrZ Phase NoDef MdlTag TagCount TagsBefore Flag Spacer RandT Loaded StartID Valids OpsMode
@persist [PoolTrack TagStr Forced Mode DonezoString]:string
@persist [Tags Spawned Insert Instr BogieData AddModels SCGraph SearchArchive]:table
@persist [Print CarTs Buffer TrainType TgKys CommandStack]:array  
@persist [Head LastBogie SCP Frame Bogie1 Bogie2]:entity 
@persist [SetPos SCEndPos SCLast]:vector
@persist [SCEndAng]:angle


@persist TicksLeft HID #testing stuff, ignore this
#Outputs (for debugging)
@outputs Phase LyrC LyrX LyrY LyrZ Chew TotalTrainLength ForeOffset SCProc SCTrav RandT Top:string SCP:entity Head:entity SearchArchive:table

#[
If you're seeing this from the Github page, here's some instructions on how to install the E2:

1: Select the RAW option on the right. This will take you to a blank page with the script on it.

2: Right-click the screen and select "Save As". Save the file to your downloads as the default name.

3: Move that text file to steamapps/common/garrysmod/garrysmod/data/expression2.

4: Click "Refresh" on the E2 tool sidebar interface in Garry's Mod.

5: Find the file by searching "carspawner" or some other keyword in the e2 search bar.

6: Double click on the file to open it, then click the X at the top-right to close the window.

7: Left-click between the rails you want to spawn on, and the chip will align itself to the track.

8: Done! Follow the ingame tutorial after you've placed the chip for usage and how-to's.
  ___________           
 |  _______  |  
 |_| _____ |_|                        _            _       
    /  __ \                          (_)          | |      
    | /  \/ ___  _ ____   _____ _ __  _  ___ _ __ | |_     
    | |    / _ \| '_ \ \ / / _ \ '_ \| |/ _ \ '_ \| __|    
    | \__/\ (_) | | | \ V /  __/ | | | |  __/ | | | |_                                                     
     \____/____/|_| |_|\_/ \___|_| |_|_|\___|_| |_|\__|      
    /  __ \ |             (_)                    
    | /  \/ | __ _ ___ ___ _  ___                
    | |   | |/ _` / __/ __| |/ __|               
    | \__/\ | (_| \__ \__ \ | (__                
     \____/_|\__,_|___/___/_|\___|                                                                                                                                        
    /  __ \                                                  
    | /  \/ __ _ _ __ ___ _ __   __ ___      ___ __   ___ _ __ 
    | |    / _` | '__/ __| '_ \ / _` \ \ /\ / / '_ \ / _ \ '__|
    | \__/\ (_| | |  \__ \ |_) | (_| |\ V  V /| | | |  __/ |   
  _  \____/\__,_|_|  |___/ .__/ \__,_| \_/\_/ |_| |_|\___|_|   
 | |_______| |           | |                                   
 |___________|           |_|                                   
           
Welcome to the Convenient, Classic Carspawner! This E2 is the next generation in car spawning technologies, allowing the user to spawn many styles of train, pre-detailed, and in an intuitive manner.

Type ".help" in chat for a guide on how to use the E2. It will show you through all you need to know on running this E2.


Not much of a description here. If you want more, bug me on Discord or Steam.

Made by Sir Metaladon:  https://steamcommunity.com/profiles/76561198077247660/

]#

if(dupefinished()){reset()}

if(first()){
    
    #Here's some settings for those who are so inclined:
    
    WEIGHTMUL = 0.5 #The modifier on the weight of cars spawned by the chip. 1 is the default, spawning cars that average ~100 tons (average loaded weight IRL). 0.75 would reduce that average to 75 tons. 
    
    LOADCHANCE = 0.6 #Chance the car will be loaded (heavier). Default is 0.6, or 60% chance, since railroads often re-load cars on the return trip. Loaded cars are usually 3 or 4 times heavier than empty cars.
    
    LOADVAL = 0.5 #What quantity of total weight of the car is determined by the load. Lower values mean less overal variance between loaded and unloaded cars. Default is 1.
    
    NOPRNT = 0 #If 1, the E2 will not output any messages. 1 to disable messages, 0 to enable. Default is 0.

    DISPLAYTAGS = 0 #If 1, the system will display tags after it finishes searching.
    
    VISIBLESCAN = 0 #If 1, the scanner bogie is visible when scanning.
    
    SAFEMODE = 0 #If 1, all processes will be limited by perf(), which is more stable on servers with a low tick quota but will also make the E2 significantly slower. Reccomended 0.
    
    SPWNBHVIOR = 1 #If 0, the system will spawn cars in a straight line with no collision checks. If 1, the system will follow the rails check for valid placement. Reccomended 1.
    
    STACKSIZE = 15 #This var controls how much cars of the same type clump together. Higher values means more, longer strings of the same car type. Default 15.
    
    #[Here's where you add your own custom cars, if you feel like it.
    
    Key:
    
    1: Model Name (the full path)
    2: Weighted chance to spawn (5 is uncommon, 100 will spawn in droves)
    3: Tags (typically having a country, type, load status, kind, manifest/unitfreight, detail level, modeler, era(s), and bogie type)
    4: Car placement data
     4a: Length from bogie mount to bogie mount (in inches)
     4b: Vertical offset (from the 0 point of the chosen bogie)
     4c: Rotation offset (for cars like Grove's that spawn 90 degrees rotated)
     4d: Extra coupler space (in inches)
    5: Submaterials (numbers are paired, the first number in the pair determines what mat to apply, and the second determines what ID to apply to)
     1st Submat number is laid out like this:
     1: Main
     2: Secondary
     3: Frame
     4: Wood (for flatcars)
     5: Black (for roofing)
     6: Shiny (for roofing)
     7: Coal (for coal cars)
     8: Reflector (for tankers)
    6: Coloration (each slot determines the # chance for that color to be used on the car)
     Colors are laid out like this:
     1: Red
     2: Orange
     3: White
     4: Yellow
     5: Green
     6: Blue
     7: Black
     8: Gray
     9: Aluminum (for unpainted aluminum hoppers)
     10: Wood (for early wooden cars)
     11: Tuscan (unique from red with less saturation)
     12: PC Green (unique to PC cars)
     13: NSW Brown (for NSW cars)
    7: Skin (2 numbers for maximum and minimum skin value)
    8: Bodygroups (array containing vectors, each vector randomises 1 bodygroup)
     8a: What bodygroup ID to change
     8b: Minimum value
     8c: Maximum value
    9: Weight (in tons)
    
    ]#
    
    AddModels = table(
    
        "models/magtrains/boxcar_50.mdl",5,"usamerican general_boxcar_nonhigh invisiload freight manifest new hdetail mow magnum 1970s 1980s 1990s 2000s 2010s 2020s",
        vec4(224*2,0,0,0),array(1,5,2,7,3,1),array(3,2,1,10,2,4,1,2,0,0,25),vec2(0,0),array(vec(1,0,3),vec(2,0,2),vec(3,0,2),vec(4,0,2)),100
        
    )
    
    #NO TOUCHING BEYOND THIS POINT

    #Weathering presets, in order from least to most weathered
    
    WEATHERING = array(
        
        "models/proppertextures/acrylic","sprops/trans/lights/light_plastic","models/proppertextures/enamel_black","phoenix_storms/wood_dome","models/proppertextures/acrylic_black","models/proppertextures/aluminum","models/magtrains/coal","models/proppertextures/acrylic_gold",
        "wtp/paint_2","sprops/trans/lights/light_plastic","models/proppertextures/enamel_black","phoenix_storms/wood_dome","models/proppertextures/acrylic_black","models/proppertextures/aluminum","models/magtrains/coal","models/proppertextures/acrylic_gold",
        "models/proppertextures/acrylic","sprops/textures/sprops_metal5","models/proppertextures/enamel_black","phoenix_storms/wood_dome","models/proppertextures/acrylic_black","models/proppertextures/aluminum","models/magtrains/coal","models/proppertextures/acrylic_gold",
        "wtp/paint_2","sprops/textures/sprops_metal5","models/proppertextures/enamel_black","phoenix_storms/wood_dome","models/proppertextures/acrylic_black","models/proppertextures/aluminum","models/magtrains/coal","models/proppertextures/acrylic_gold",
        
        "sprops/trans/lights/light_plastic","phoenix_storms/concrete1","icegt/loco/ice_trainmetal_black","models/props_gulch/woodshelf008a","models/props_gulch/tinycars/tc_darkgray","icegt/loco/ice_trainmetal_grey","models/magtrains/coal","models/proppertextures/acrylic_gold",
        "sprops/textures/sprops_metal5","sprops/textures/sprops_metal1","icegt/loco/ice_trainmetal_black","models/props_gulch/woodshelf008a","models/props_gulch/tinycars/tc_darkgray","icegt/loco/ice_trainmetal_grey","models/magtrains/coal","models/proppertextures/acrylic_gold",
        "sprops/trans/lights/light_plastic","sprops/textures/sprops_metal1","icegt/loco/ice_trainmetal_black","models/props_gulch/woodshelf008a","models/props_gulch/tinycars/tc_darkgray","icegt/loco/ice_trainmetal_grey","models/magtrains/coal","models/proppertextures/acrylic_gold",
        "sprops/textures/sprops_metal5","phoenix_storms/concrete1","icegt/loco/ice_trainmetal_black","models/props_gulch/woodshelf008a","models/props_gulch/tinycars/tc_darkgray","icegt/loco/ice_trainmetal_grey","models/magtrains/coal","models/proppertextures/acrylic_gold",
        
        "wtp/metal_2","wtp/metal_5","icegt/loco/ice_trainmetal_black","models/props_forest/sawmill_wood","models/props_gulch/tinycars/tc_darkgray","icegt/loco/ice_trainmetal_darkgrey","models/magtrains/coal","models/props_gulch/tinycars/tc_gold",
        "wtp/metal_2","wtp/metal_5","icegt/loco/ice_trainmetal_black","models/props_forest/sawmill_wood","models/props_gulch/tinycars/tc_darkgray","icegt/loco/ice_trainmetal_darkgrey","models/magtrains/coal","models/props_gulch/tinycars/tc_gold",
        
        "models/props_gulch/tinycars/tc_colorable","sprops/textures/sprops_metal3","models/props_gulch/tinycars/tc_darkgray","models/props_forest/sawmill_wood","sprops/trans/misc/ls_m1","icegt/loco/ice_trainmetal_grey","models/magtrains/coal","models/props_gulch/tinycars/tc_gold",
        "models/props_gulch/tinycars/tc_colorable","models/props_c17/metalladder001","models/props_gulch/tinycars/tc_darkgray","models/props_forest/sawmill_wood","sprops/trans/misc/ls_m1","icegt/loco/ice_trainmetal_grey","models/magtrains/coal","models/props_gulch/tinycars/tc_gold",
        "sprops/textures/sprops_metal2","sprops/textures/sprops_metal3","models/props_gulch/tinycars/tc_darkgray","models/props_forest/sawmill_wood","sprops/trans/misc/ls_m1","icegt/loco/ice_trainmetal_grey","models/magtrains/coal","models/props_gulch/tinycars/tc_gold",
        "sprops/textures/sprops_metal2","models/props_c17/metalladder001","models/props_gulch/tinycars/tc_darkgray","models/props_forest/sawmill_wood","sprops/trans/misc/ls_m1","icegt/loco/ice_trainmetal_grey","models/magtrains/coal","models/props_gulch/tinycars/tc_gold",
        "wtp/metal_5","sprops/textures/sprops_metal3","models/props_gulch/tinycars/tc_darkgray","models/props_forest/sawmill_wood","sprops/trans/misc/ls_m1","icegt/loco/ice_trainmetal_grey","models/magtrains/coal","models/props_gulch/tinycars/tc_gold",
        "wtp/metal_5","models/props_c17/metalladder001","models/props_gulch/tinycars/tc_darkgray","models/props_forest/sawmill_wood","sprops/trans/misc/ls_m1","icegt/loco/ice_trainmetal_grey","models/magtrains/coal","models/props_gulch/tinycars/tc_gold"
        
    )
    
    INFOPERWEATHER = 8 #How many strings per preset
    
    #Color presets
    
    COLORS = array(    
        
        vec(-2.5,0.6,0.25),vec(8,0.1,0.02), #RED 1 
        vec(18,0.6,0.35),vec(28,0.1,0.05), #ORANGE 2 
        vec(-2.5,0.1,0.8),vec(240,0.1,0.15), #WHITE 3 
        vec(42.5,0.62,0.47),vec(47.5,0.06,0.03), #YELLOW 4
        vec(75,0.35,0.3),vec(125,0.1,0.05), #GREEN 5  
        vec(190,0.35,0.3),vec(230,0.15,0.1),  #BLUE 6 
        vec(-2.5,0.02,0.17),vec(47.5,0.02,0.03), #BLACK 7 
        vec(-2.5,0.02,0.4),vec(47.5,0.02,0.1), #GREY - 8
        vec(40,0.1,0.4),vec(55,0.025,0.125), #ALUMINUM - 9
        vec(-2.5,0.25,0.35),vec(30,0.15,0.05), #WOOD - 10
        vec(-2.5,0.3,0.3),vec(10,0.1,0.02), #TUSCAN - 11
        vec(155,0.33,0.36),vec(160,0.03,0), #PC GREEN - 12
        vec(15,0.25,0.27),vec(20,0.1,0.02), #NSW BROWN - 13
        vec(-2,0.25,0.45),vec(2,0.08,0.03) #ORE PINK - 14
        
    )
    
    
    
    #Tag Attributes
    
    TAGDATA = table(
        
        #Type of Car
        array("general_boxcar_highcube","appliance_boxcar_highcube","autoparts_boxcar_highcube","general_boxcar_nonhigh", 
            "scrap_gondola","woodchips_gondola","hematite_ore_gondola","magnetite_ore_gondola","generic_ore_gondola","general_gondola","steel_gondola","water_tanker","coal_gondola","sand_gondola","gravel_gondola","trash_gondola","cement_gondola","wood_gondola","pulp_gondola",
            "general_tanker","ethanol_tanker","lpg_tanker","chemical_tanker","oil_tanker",
            "coal_hopper","grain_hopper","cement_hopper","aggregate_hopper","generic_ore_hopper","taconite_ore_hopper","gravel_hopper","sand_hopper","dolomite_hopper","potash_hopper",
            "airslide_hopper_sugar","airslide_hopper_flour","pressuredifferentialpd_hopper_flour","pressuredifferentialpd_hopper_clay",
            "log_flatcar","wood_flatcar","general_flatcar","heavy_flatcar","general_flatcar_bulkhead","trash_flatcar","tofc_flatcar","steel_flatcar","container_flatcar","coilcar","bulkhead_flatcar_wood","steel_flatcar_bulkhead",
            "centerbeam_flatcar_wood","centerbeam_flatcar_steel","centerbeam_flatcar_frames","centerbeam_flatcar_ties",
            "single_wellcar_40ft","single_wellcar_48ft","single_wellcar_53ft","icereeferrefridgerator",
            "trilevel_open_autorack","bilevel_open_autorack","bilevel_closed_autorack","paper_boxcar_highcube",
            "anytype","caboose","stock","sulfur_gondola","mechanicalreeferrefridgerator","insulated_boxcar_nonhigh","coilcar"), 
            
        #Era of Car
        array("2020s","2010s","2000s","1990s","1980s","1970s","1960s","1950s","1940s","1930s","1920s","1910s","1900s","preera","anytime"),
        
        #Who made it?
        array("metaladon","gsgrove","magnum","union","joeconqueror","monkatraz","goomz","zexciv","daylight","jazzie","anyone991","anyone","laz","priority","akandr","hanksabutt","reverendv92","linnie","westausman98","titus","armystuntman","bobster","toastur","seaboard"),
        
        #Type of Suspension
        array("new","old","anysuspension"),
        
        #Catergory of Car
        array("manifest","unitfreight","mow","buffer","freight","dummy","anykind","caboose","testing"),
        
        #Stability of Car
        array("janky","functional"),
        
        #Detail Level
        array("hdetail","mdetail","ldetail","anydetail","sdetail","mstsports","tf2"),
        
        #Locale of Car
        array("usamerican","ussrussian","european","anywhere","nswaustralianz","britishuk"),
        
        #Utility Tags
        array("nodef","debug","mdltag"),
        
        #Load Tags
        array("empty","loaded","invisiload"),
        
        #Model Tags (automatically filled by the E2)
        array()
        
    )
    
    TAGOVERRIDES = array(
    
        "anytype",
        "anytime",
        "anyone",
        "",
        "anykind",
        "",
        "anydetail",
        "anywhere"
        
    )
    
    TRNTYPS = array(
    
        "scrap_gondola general_gondola steel general_flatcar_bulkhead coilcar",
        "wellcar tofc container",
        "autorack",
        "log_flatcar woodchip",
        "aggregate gravel sand",
        "flour sugar",
        "cement clay",
        "lpg chemical",
        "trash",
        "general_boxcar",
        "reefer insulated",
        "wood"
        
    )
    
    DEFAULTAGS = table(
    
        array(), #Type of car
        array("1980s"), #Era of car
        array(), #Who made it
        array(), #Suspension type
        array("freight"), #Catergory of car
        array(), #Stability of car
        array("mdetail","hdetail","sdetail"), #Detail level
        array("usamerican"), #Country
        array()
        
    )
        
    VERSION = "0.957"
    
    MODELS = table(
        "models/akandr/russian/poluvagon.mdl",8,"russian coal_gondola empty freight manifest old hdetail akandr priority 1980s 1990s 2000s 2010s 2020s functional rus5ft rusphx rusrsg",vec4(360,-1,90,-1),array(3,2,1,3,3,4,2,5),array(1,2,3,4,4,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12),vec2(0,0),array(),70
        ,"models/akandr/russian/poluvagon.mdl",8,"russian coal_gondola loaded freight manifest old hdetail akandr priority 1980s 1990s 2000s 2010s 2020s functional rus5ft rusphx rusrsg",vec4(360,-1,90,-1),array(3,2,1,3,3,4,2,5),array(1,2,3,4,4,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12),vec2(0,0),array(vec(3,1,3)),70
        ,"models/akandr/russian/rus_grain_hopper.mdl",3,"russian grain_hopper cement_hopper invisiload freight manifest mow old hdetail akandr priority 1970s 1980s 1990s 2000s 2010s 2020s functional rus5ft rusphx rusrsg",vec4(414,50,90,-1),array(1,1,3,3),array(3,5,5,5,5,5,6,6,6,6,6,8,11),vec2(0,0),array(),70
        ,"models/anytrains/rollingstock/freight/fict/tlr_hopper.mdl",15,"usamerican coal_hopper empty freight manifest new mdetail anyone991 preera 1900s 1910s functional archrsg magphx magphx magrsg",vec4(298,-18,0,0),array(3,2,3,6,2,7,7,8),array(8),vec2(0,0),array(),40
        ,"models/anytrains/rollingstock/freight/fict/tlr_hopper.mdl",15,"usamerican coal_hopper loaded freight manifest new mdetail anyone991 preera 1900s 1910s functional archrsg magphx magphx magrsg",vec4(298,-18,0,0),array(3,2,3,6,2,7,7,8),array(8),vec2(0,0),array(vec(4,1,1)),40
        ,"models/anytrains/rollingstock/freight/rus/rus_wagon_19-1241.mdl",2,"russian gravel_hopper empty freight manifest old hdetail anyone991 1970s 1980s 1990s 2000s 2010s 2020s functional rus5ft rusphx rusrsg",vec4(270,-4-9.7,0,0),array(1,3,3,2,6,4),array(1,2,3,4,4,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12),vec2(0,0),array(),50
        ,"models/anytrains/rollingstock/freight/tf2/tf2_boxcar.mdl",5,"usamerican general_boxcar_nonhigh manifest freight invisiload mdetail tf2 anyone991 1930s 1940s 1950s 1960s 1970s 1980s functional tf2phx tf2rsg",vec4(308,-21,90,-3),array(2,3,3,5,2,7,1,8),array(1,1,1,1,1,1,2,2,2,3,4,4,4,4,5,5,5,5,6,6,6,7,8,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12),vec2(0,0),array(vec(1,1,1)),70
        ,"models/anytrains/rollingstock/freight/tf2/tf2_boxcar_noladder.mdl",20,"usamerican general_boxcar_nonhigh manifest freight invisiload mdetail tf2 anyone991 1930s 1940s 1950s 1960s 1970s 1980s functional tf2phx tf2rsg",vec4(308,-21,90,-3),array(),array(),vec2(0,1),array(),70
        ,"models/anytrains/rollingstock/freight/tf2/tf2_orecar.mdl",2.5,"usamerican gravel_gondola manifest freight loaded mdetail tf2 anyone991 1950s 1960s 1970s 1980s 1990s functional tf2phx tf2rsg",vec4(376,-21,90,-3),array(),array(),vec2(0,1),array(vec(3,1,1)),70
        ,"models/anytrains/rollingstock/freight/tf2/tf2_orecar.mdl",5,"usamerican coal_gondola manifest freight loaded mdetail tf2 anyone991 1950s 1960s 1970s 1980s 1990s functional tf2phx tf2rsg",vec4(376,-21,90,-3),array(),array(),vec2(0,1),array(vec(3,2,2)),70
        ,"models/anytrains/rollingstock/freight/tf2/tf2_orecar.mdl",7.5,"usamerican coal_gondola gravel_gondola manifest freight empty mdetail tf2 anyone991 1950s 1960s 1970s 1980s 1990s functional tf2phx tf2rsg",vec4(376,-21,90,-3),array(),array(),vec2(0,1),array(),70
        ,"models/bobsters_trains/uk/stock/freight/bxx/steel_carrier_b.mdl",1,"britishuk steel_flatcar empty freight manifest hdetail bobster 1970s 1980s 1990s 2000s 2010s 2020s uky25cphx functional",vec4(400,-11,90,6),array(3,1,1,2,5,4,6,5,2,6,3,9),array(7,7,7,7,7,8,8,13,13,13),vec2(0,0),array(vec(1,0,1)),100
        ,"models/bobsters_trains/uk/stock/freight/bxx/steel_carrier_b.mdl",1,"britishuk steel_flatcar loaded freight manifest hdetail bobster 1970s 1980s 1990s 2000s 2010s 2020s uky25cphx functional",vec4(400,-11,90,6),array(3,1,1,2,5,4,6,5,2,6,3,9),array(7,7,7,7,7,8,8,13,13,13),vec2(0,0),array(vec(1,0,1),vec(2,1,4)),100
        ,"models/bobsters_trains/uk/stock/freight/tanks/bogie_tank.mdl",1,"britishuk general_tanker empty freight manifest mdetail titus 1970s 1980s 1990s 2000s 2010s 2020s uky25cphx functional",vec4(520,-11,90,6),array(3,1,1,2,2,3,5,5,6,6),array(7,7,7,7,7,8,8,13,13,13),vec2(0,0),array(),100
        ,"models/botzmpak/rollingstock/nyct_flatcar.mdl",1,"usamerican general_gondola gravel_gondola empty mow new hdetail botz 1950s 1960s 1970s 1980s 1990s 2000s 2010s 2020s functional magphx magrsg",vec4(472,-29,90,0),array(3,1,1,2,2,6),array(4),vec2(0,0),array(),50
        ,"models/daylight/ca_1_caboose.mdl",5,"usamerican caboose hdetail daylight 1910s 1920s 1930s 1940s 1950s 1960s functional archrsg magphx magphx magrsg",vec4(226,-18,0,0),array(3,1,3,4,2,5,5,6),array(10,11,11,11,11,11,11),vec2(0,0),array(),10
        ,"models/daylight/ll_tankcar.mdl",6,"usamerican chemical_tanker general_tanker invisiload freight mow manifest old hdetail daylight 1920s 1930s 1940s functional archrsg magphx magphx magrsg",vec4(296,-6,90,0),array(1,1,3,3,2,4),array(3,4,4,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8),vec2(0,0),array(),50
        ,"models/daylight/woodreefer.mdl",20,"usamerican icereeferrefridgerator invisiload freight manifest old mdetail daylight 1910s 1920s 1930s 1940s 1950s functional archrsg magphx magphx magrsg",vec4(326,0,0,0),array(3,5,2,3,2,4),array(2,2,2,2,2,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,10,10,10,10,10,10,10,10,10,11),vec2(0,0),array(),50
        ,"models/goomzmodels/rollingstock/bethlehem3bay4000.mdl",10,"usamerican coal_hopper empty freight unitfreight new sdetail goomz 1960s 1970s 1980s 1990s 2000s functional magphx magrsg",vec4(430,-18,0,0),array(1,1,3,2),array(7),vec2(0,0),array(vec(16,0,5)),100
        ,"models/goomzmodels/rollingstock/bethlehem3bay4000.mdl",10,"usamerican coal_hopper loaded freight unitfreight new sdetail goomz 1960s 1970s 1980s 1990s 2000s functional magphx magrsg",vec4(430,-18,0,0),array(1,1,3,2),array(7),vec2(0,0),array(vec(16,0,5),vec(15,1,1)),100
        ,"models/goomzmodels/rollingstock/goomz_gondola1.mdl",0.5,"usamerican sand_gondola loaded freight manifest new hdetail goomz 1980s 1990s 2000s 2010s 2020s functional magphx magrsg",vec4(706,29,0,0),array(1,1,3,2,2,3,2,6,3,7),array(1,1,1,1,1,1,1,2,3,4,5,5,5,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11),vec2(0,0),array(vec(4,0,1),vec(5,5,5)),100
        ,"models/goomzmodels/rollingstock/goomz_gondola1.mdl",0.5,"usamerican woodchips_gondola loaded freight manifest new hdetail goomz 1980s 1990s 2000s 2010s 2020s functional magphx magrsg",vec4(706,29,0,0),array(1,1,3,2,2,3,2,6,3,7),array(1,1,1,1,1,1,1,2,3,4,5,5,5,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11),vec2(0,0),array(vec(4,0,1),vec(5,3,3)),100
        ,"models/goomzmodels/rollingstock/goomz_gondola1.mdl",1.5,"usamerican gravel_gondola loaded freight manifest mow new hdetail goomz 1980s 1990s 2000s 2010s 2020s functional magphx magrsg",vec4(706,29,0,0),array(1,1,3,2,2,3,2,6,3,7),array(1,1,1,1,1,1,1,2,3,4,5,5,5,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11),vec2(0,0),array(vec(4,0,1),vec(5,4,4)),100
        ,"models/goomzmodels/rollingstock/goomz_gondola1.mdl",12,"usamerican general_gondola scrap_gondola woodchips_gondola gravel_gondola sand_gondola steel_gondola empty freight manifest mow new hdetail goomz 1980s 1990s 2000s 2010s 2020s functional magphx magrsg",vec4(706,29,0,0),array(1,1,3,2,2,3,2,6,3,7),array(1,1,1,1,1,1,1,2,3,4,5,5,5,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11),vec2(0,0),array(vec(4,0,1),vec(3,0,10)),100
        ,"models/goomzmodels/rollingstock/goomz_gondola1.mdl",3.5,"usamerican scrap_gondola loaded freight manifest new hdetail goomz 1980s 1990s 2000s 2010s 2020s functional magphx magrsg",vec4(706,29,0,0),array(1,1,3,2,2,3,2,6,3,7),array(1,1,1,1,1,1,1,2,3,4,5,5,5,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11),vec2(0,0),array(vec(4,0,1),vec(5,1,2)),100
        ,"models/goomzmodels/rollingstock/goomz_gondola1.mdl",6,"usamerican steel_gondola loaded freight manifest new hdetail goomz 1980s 1990s 2000s 2010s 2020s functional magphx magrsg",vec4(706,29,0,0),array(1,1,3,2,2,3,2,6,3,7),array(1,1,1,1,1,1,1,2,3,4,5,5,5,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11),vec2(0,0),array(vec(4,0,1),vec(5,6,9)),100
        ,"models/goomzmodels/rollingstock/rus 12 132 gondola.mdl",4,"russian general_gondola empty freight mow manifest old hdetail goomz 1970s 1980s 1990s 2000s 2010s 2020s functional rus5ft rusphx rusrsg",vec4(376,35-11,90,10),array(1,2,2,1,3,3,2,4,2,5),array(1,2,3,4,4,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12),vec2(0,0),array(),60
        ,"models/goomzmodels/rollingstock/rus 1612-10 box wagon.mdl",10,"russian general_boxcar_nonhigh invisiload freight manifest old hdetail goomz 1970s 1980s 1990s 2000s 2010s 2020s functional rus5ft rusphx rusrsg",vec4(376,-8-10.5,90,10),array(1,1,2,2,3,3,2,4,2,6),array(3,5,5,5,5,5,6,6,6,6,6,8,11),vec2(0,0),array(),60
        ,"models/goomzmodels/rollingstock/rus 1612-12 box wagon.mdl",1,"russian general_boxcar_nonhigh invisiload freight manifest old hdetail goomz 1970s 1980s 1990s 2000s 2010s 2020s functional rus5ft rusphx rusrsg",vec4(376,-8-10.5,90,10),array(1,1,2,2,3,3,2,4,2,6),array(3,5,5,5,5,5,6,6,6,6,6,8,11),vec2(0,0),array(),60
        ,"models/gsgtrainprops/trains/rolling_stock/autorack_bilevel_enclosed.mdl",3,"usamerican bilevel_closed_autorack invisiload freight unitfreight new sdetail mstsports gsgrove 1980s 1990s 2000s functional gsgphx33 gsgrsg33",vec4(804,-14,90,0),array(),array(),vec2(0,12),array(),100
        ,"models/gsgtrainprops/trains/rolling_stock/autorack_bilevel_semiopen.mdl",1,"usamerican bilevel_open_autorack empty freight unitfreight old sdetail mstsports gsgrove 1970s 1980s 1990s functional gsgphx33 gsgrsg33",vec4(804,-14,90,0),array(),array(),vec2(0,2),array(),100
        ,"models/gsgtrainprops/trains/rolling_stock/autorack_bilevel_semiopen.mdl",1,"usamerican bilevel_open_autorack loaded freight unitfreight old sdetail mstsports gsgrove 1970s 1980s 1990s functional gsgphx33 gsgrsg33",vec4(804,-14,90,0),array(),array(),vec2(0,2),array(vec(1,1,1)),100
        ,"models/gsgtrainprops/trains/rolling_stock/autorack_trilevel_semiopen.mdl",1,"usamerican trilevel_open_autorack empty freight unitfreight old sdetail mstsports gsgrove 1970s 1980s 1990s functional gsgphx28 gsgrsg28",vec4(786,-14,90,0),array(),array(),vec2(0,3),array(),100
        ,"models/gsgtrainprops/trains/rolling_stock/autorack_trilevel_semiopen.mdl",1,"usamerican trilevel_open_autorack loaded freight unitfreight old sdetail mstsports gsgrove 1970s 1980s 1990s functional gsgphx28 gsgrsg28",vec4(786,-14,90,0),array(),array(),vec2(0,3),array(vec(1,1,1)),100
        ,"models/gsgtrainprops/trains/rolling_stock/bathtub_hs_coal.mdl",4,"usamerican coal_gondola empty freight unitfreight old sdetail mstsports gsgrove 1970s 1980s 1990s functional gsgphx36 gsgrsg36",vec4(551,-16,90,0),array(),array(),vec2(0,9),array(),100
        ,"models/gsgtrainprops/trains/rolling_stock/bathtub_hs_coal.mdl",4,"usamerican coal_gondola loaded freight unitfreight old sdetail mstsports gsgrove 1970s 1980s 1990s functional gsgphx36 gsgrsg36",vec4(551,-16,90,0),array(),array(),vec2(0,9),array(vec(1,1,1)),100
        ,"models/gsgtrainprops/trains/rolling_stock/bathtub_hs_sulfur.mdl",1,"usamerican sulfur_gondola empty freight unitfreight old sdetail mstsports gsgrove 1970s 1980s 1990s functional gsgphx36 gsgrsg36",vec4(551,-16,90,0),array(),array(),vec2(0,3),array(),100
        ,"models/gsgtrainprops/trains/rolling_stock/bathtub_hs_sulfur.mdl",1,"usamerican sulfur_gondola loaded freight unitfreight old sdetail mstsports gsgrove 1970s 1980s 1990s functional gsgphx36 gsgrsg36",vec4(551,-16,90,0),array(),array(),vec2(0,3),array(vec(1,1,1)),100
        ,"models/gsgtrainprops/trains/rolling_stock/bathtub_thrall_coal.mdl",6,"usamerican coal_gondola empty freight unitfreight old sdetail mstsports gsgrove 1970s 1980s 1990s functional gsgphx36 gsgrsg36",vec4(459,-16,90,0),array(),array(),vec2(0,23),array(vec(1,0,0)),100
        ,"models/gsgtrainprops/trains/rolling_stock/bathtub_thrall_coal.mdl",6,"usamerican coal_gondola loaded freight unitfreight old sdetail mstsports gsgrove 1970s 1980s 1990s functional gsgphx36 gsgrsg36",vec4(459,-16,90,0),array(),array(),vec2(0,23),array(vec(1,1,1)),100
        ,"models/gsgtrainprops/trains/rolling_stock/boxcar_50ft_ps.mdl",60,"usamerican general_boxcar_nonhigh invisiload freight manifest old sdetail mstsports gsgrove 1970s 1980s 1990s 2000s 2010s 2020s functional gsgphx36 gsgrsg33",vec4(491,-16,90,0),array(),array(),vec2(0,12),array(),100
        ,"models/gsgtrainprops/trains/rolling_stock/caboose_baywindow_acf.mdl",1,"usamerican caboose old sdetail mstsports gsgrove 1970s 1980s 1990s 2000s 2010s functional gsgphxleaf gsgrsgleaf",vec4(286,-14,90,0),array(),array(),vec2(0,7),array(),30
        ,"models/gsgtrainprops/trains/rolling_stock/caboose_extvis_acf.mdl",1,"usamerican caboose old sdetail mstsports gsgrove 1970s 1980s 1990s 2000s 2010s functional gsgphxleaf gsgrsgleaf",vec4(286,-14,90,0),array(),array(),vec2(0,0),array(),30
        ,"models/gsgtrainprops/trains/rolling_stock/flatcar_89ft_garbage.mdl",2,"usamerican trash_flatcar loaded freight manifest old sdetail mstsports gsgrove 1980s 1990s 2000s 2010s 2020s functional gsgphx36 gsgrsg33",vec4(804,-14,90,0),array(),array(),vec2(0,2),array(vec(1,0,2)),90
        ,"models/gsgtrainprops/trains/rolling_stock/gon_52ft_nsc.mdl",2,"usamerican steel_gondola loaded freight manifest mow old sdetail mstsports gsgrove 1970s 1980s 1990s 2000s 2010s  functional gsgphx36 gsgrsg33",vec4(505,-14,90,0),array(),array(),vec2(0,2),array(vec(1,2,2)),100
        ,"models/gsgtrainprops/trains/rolling_stock/gon_52ft_nsc.mdl",4,"usamerican scrap_gondola loaded freight manifest mow old sdetail mstsports gsgrove 1970s 1980s 1990s 2000s 2010s  functional gsgphx36 gsgrsg33",vec4(505,-14,90,0),array(),array(),vec2(0,2),array(vec(1,1,1)),100
        ,"models/gsgtrainprops/trains/rolling_stock/gon_52ft_nsc.mdl",6,"usamerican general_gondola scrap_gondola steel_gondola empty freight manifest mow old sdetail mstsports gsgrove 1970s 1980s 1990s 2000s 2010s functional gsgphx36 gsgrsg33",vec4(505,-14,90,0),array(),array(),vec2(0,2),array(),100
        ,"models/gsgtrainprops/trains/rolling_stock/gon_52ft_thrall.mdl",2,"usamerican steel_gondola loaded freight manifest mow old sdetail mstsports gsgrove 1970s 1980s 1990s 2000s 2010s functional gsgphx36 gsgrsg33",vec4(505,-14,90,0),array(),array(),vec2(0,6),array(vec(1,2,2)),100
        ,"models/gsgtrainprops/trains/rolling_stock/gon_52ft_thrall.mdl",4,"usamerican scrap_gondola loaded freight manifest mow old sdetail mstsports gsgrove 1970s 1980s 1990s 2000s 2010s functional gsgphx36 gsgrsg33",vec4(505,-14,90,0),array(),array(),vec2(0,6),array(vec(1,1,1)),100
        ,"models/gsgtrainprops/trains/rolling_stock/gon_52ft_thrall.mdl",6,"usamerican general_gondola scrap_gondola steel_gondola empty freight manifest mow old sdetail mstsports gsgrove 1970s 1980s 1990s 2000s 2010s functional gsgphx36 gsgrsg33",vec4(505,-14,90,0),array(),array(),vec2(0,6),array(),100
        ,"models/gsgtrainprops/trains/rolling_stock/hopper_covered_3800.mdl",4,"usamerican cement_hopper invisiload freight manifest old sdetail mstsports gsgrove 1960s 1970s 1980s 1990s functional gsgphx33 gsgrsg33",vec4(509,-14,90,0),array(),array(),vec2(0,3),array(),70
        ,"models/gsgtrainprops/trains/rolling_stock/hopper_covered_acf_4600.mdl",15,"usamerican grain_hopper invisiload freight manifest old buffer sdetail mstsports gsgrove 1970s 1980s 1990s 2000s 2010s 2020s functional gsgphx36 gsgrsg33",vec4(544,-14,90,0),array(),array(),vec2(0,25),array(),100
        ,"models/gsgtrainprops/trains/rolling_stock/hopper_covered_grain_4100.mdl",5,"usamerican grain_hopper invisiload freight manifest old sdetail mstsports gsgrove 1970s 1980s 1990s functional gsgphx36 gsgrsg33",vec4(570,-14,90,0),array(),array(),vec2(0,1),array(),100
        ,"models/gsgtrainprops/trains/rolling_stock/hopper_covered_grain_4550.mdl",5,"usamerican grain_hopper invisiload freight manifest old buffer sdetail mstsports gsgrove 1970s 1980s 1990s functional gsgphx36 gsgrsg33",vec4(560,-14,90,0),array(),array(),vec2(0,13),array(),100
        ,"models/gsgtrainprops/trains/rolling_stock/hopper_covered_potash_4550.mdl",5,"usamerican potash_hopper invisiload freight manifest old sdetail mstsports gsgrove 1970s 1980s 1990s functional gsgphx36 gsgrsg33",vec4(560,-14,90,0),array(),array(),vec2(0,3),array(),100
        ,"models/hanksabutt/rollingstock/bethgon_coalporter/bethgon_coalporter.mdl",4,"usamerican coal_gondola empty freight unitfreight old sdetail mstsports hanksabutt 1990s 2000s 2010s 2020s functional gsgphx36 gsgrsg36",vec4(491,-18,90,0),array(),array(),vec2(0,18),array(),110
        ,"models/hanksabutt/rollingstock/bethgon_coalporter/bethgon_coalporter.mdl",4,"usamerican coal_gondola loaded freight unitfreight old sdetail mstsports hanksabutt 1990s 2000s 2010s 2020s functional gsgphx36 gsgrsg36",vec4(491,-18,90,0),array(),array(),vec2(0,18),array(vec(1,1,1)),110
        ,"models/hanksabutt/rollingstock/bethgon_coalporter/bethgon_coalporter_irlskins.mdl",4,"usamerican coal_gondola empty freight unitfreight old sdetail mstsports hanksabutt 1990s 2000s 2010s 2020s functional gsgphx36 gsgrsg36",vec4(491,-18,90,0),array(),array(),vec2(0,10),array(),110
        ,"models/hanksabutt/rollingstock/bethgon_coalporter/bethgon_coalporter_irlskins.mdl",4,"usamerican coal_gondola loaded freight unitfreight old sdetail mstsports hanksabutt 1990s 2000s 2010s 2020s functional gsgphx36 gsgrsg36",vec4(491,-18,90,0),array(),array(),vec2(0,10),array(vec(1,1,1)),110
        ,"models/hanksabutt/rollingstock/boxcars/boxcar_50ft_fmc_doubledoor.mdl",35,"usamerican general_boxcar_nonhigh manifest freight invisiload sdetail mstsports hanksabutt 1970s 1980s 1990s 2000s 2010s 2020s functional gsgphx36 gsgrsg33",vec4(486,-17,90,0),array(),array(),vec2(0,4),array(),100
        ,"models/hanksabutt/rollingstock/boxcars/boxcar_50ft_fmc_doubledoor_ribbed.mdl",25,"usamerican general_boxcar_nonhigh manifest freight invisiload sdetail mstsports hanksabutt 1970s 1980s 1990s 2000s 2010s 2020s functional gsgphx36 gsgrsg33",vec4(486,-17,90,0),array(),array(),vec2(0,1),array(),100
        ,"models/hanksabutt/rollingstock/boxcars/boxcar_50ft_gunderson.mdl",30,"usamerican general_boxcar_highcube paper_boxcar_highcube appliance_boxcar_highcube manifest freight invisiload sdetail mstsports hanksabutt 1990s 2000s 2010s 2020s functional gsgphx36 gsgrsg33",vec4(492,-16,90,0),array(),array(),vec2(0,4),array(),130
        ,"models/hanksabutt/rollingstock/boxcars/boxcar_50ft_pcf_insulated.mdl",8,"usamerican insulated_boxcar_nonhigh manifest freight invisiload sdetail mstsports hanksabutt 1970s 1980s 1990s 2000s functional gsgphx33 gsgrsg33",vec4(496,-18,90,0),array(),array(),vec2(0,8),array(),100
        ,"models/hanksabutt/rollingstock/boxcars/boxcar_50ft_pcf_plugdoor.mdl",8,"usamerican general_boxcar_nonhigh manifest freight invisiload sdetail mstsports hanksabutt 1980s 1990s 2000s 2010s 2020s functional gsgphx36 gsgrsg33",vec4(512,-4,90,0),array(),array(),vec2(0,0),array(),100
        ,"models/hanksabutt/rollingstock/boxcars/boxcar_50ft_ps.mdl",10,"usamerican general_boxcar_nonhigh manifest freight invisiload sdetail mstsports hanksabutt 1960s 1970s 1980s 1990s 2000s 2010s 2020s functional gsgphx33 gsgrsg33",vec4(512,-15,90,0),array(),array(),vec2(0,6),array(),100
        ,"models/hanksabutt/rollingstock/boxcars/boxcar_86ft_ps.mdl",20,"usamerican autoparts_boxcar_highcube invisiload freight unitfreight old sdetail mstsports hanksabutt 1970s 1980s 1990s 2000s 2010s 2020s functional gsgphx36 gsgrsg33",vec4(776,-18,90,0),array(),array(),vec2(0,6),array(),100
        ,"models/hanksabutt/rollingstock/centerbeams/nsc_centerbeam.mdl",12,"usamerican centerbeam_flatcar_wood empty manifest freight sdetail mstsports hanksabutt 1990s 2000s 2010s 2020s functional gsgphx36 gsgrsg33",vec4(724,-18,90,0),array(),array(),vec2(0,11),array(),100
        ,"models/hanksabutt/rollingstock/centerbeams/nsc_centerbeam.mdl",12,"usamerican centerbeam_flatcar_wood loaded manifest freight sdetail mstsports hanksabutt 1990s 2000s 2010s 2020s functional gsgphx36 gsgrsg33",vec4(724,-18,90,0),array(),array(),vec2(0,11),array(vec(1,1,6)),100
        ,"models/hanksabutt/rollingstock/flatcars/nsc_bulkheadflat.mdl",10,"usamerican general_flatcar_bulkhead bulkhead_flatcar_wood steel_flatcar_bulkhead manifest freight empty sdetail mstsports hanksabutt 1990s 2000s 2010s 2020s functional gsgphx36 gsgrsg33",vec4(638,-28,90,0),array(),array(),vec2(0,2),array(),100
        ,"models/hanksabutt/rollingstock/flatcars/nsc_bulkheadflat.mdl",5,"usamerican bulkhead_flatcar_wood manifest freight loaded sdetail mstsports hanksabutt 1990s 2000s 2010s 2020s functional gsgphx36 gsgrsg33",vec4(638,-28,90,0),array(),array(),vec2(0,2),array(vec(1,1,2)),100
        ,"models/hanksabutt/rollingstock/flatcars/nsc_bulkheadflat.mdl",5,"usamerican steel_flatcar_bulkhead manifest freight loaded sdetail mstsports hanksabutt 1990s 2000s 2010s 2020s functional gsgphx36 gsgrsg33",vec4(638,-28,90,0),array(),array(),vec2(0,2),array(vec(1,3,3)),100
        ,"models/hanksabutt/rollingstock/flatcars/thrall_bulkheadflat.mdl",10,"usamerican general_flatcar_bulkhead bulkhead_flatcar_wood steel_flatcar_bulkhead manifest freight empty sdetail mstsports hanksabutt 1990s 2000s 2010s 2020s functional gsgphx36 gsgrsg33",vec4(638,-28,90,0),array(),array(),vec2(0,3),array(),100
        ,"models/hanksabutt/rollingstock/flatcars/thrall_bulkheadflat.mdl",5,"usamerican bulkhead_flatcar_wood manifest freight loaded sdetail mstsports hanksabutt 1990s 2000s 2010s 2020s functional gsgphx36 gsgrsg33",vec4(638,-28,90,0),array(),array(),vec2(0,3),array(vec(1,1,2)),100
        ,"models/hanksabutt/rollingstock/flatcars/thrall_bulkheadflat.mdl",5,"usamerican steel_flatcar_bulkhead manifest freight loaded sdetail mstsports hanksabutt 1990s 2000s 2010s 2020s functional gsgphx36 gsgrsg33",vec4(638,-28,90,0),array(),array(),vec2(0,3),array(vec(1,3,3)),100
        ,"models/hanksabutt/rollingstock/hoppers/hopper_acf_2970.mdl",25,"usamerican cement_hopper manifest freight invisiload sdetail mstsports hanksabutt 1970s 1980s 1990s 2000s 2010s 2020s functional gsgphx36 gsgrsg33",vec4(312,-7,90,0),array(),array(),vec2(0,7),array(),100
        ,"models/hanksabutt/rollingstock/hoppers/hopper_ps4750.mdl",50,"usamerican grain_hopper manifest freight invisiload sdetail mstsports hanksabutt 1980s 1990s 2000s 2010s 2020s functional gsgphx36 gsgrsg33",vec4(564,-16,90,0),array(),array(),vec2(0,17),array(),100
        ,"models/hanksabutt/rollingstock/reefers/reefer_trincool/reefer_trincool.mdl",40,"usamerican mechanicalreeferrefridgerator manifest freight invisiload sdetail mstsports hanksabutt 1990s 2000s 2010s 2020s functional gsgphx36 gsgrsg33",vec4(660,-16,90,0),array(),array(),vec2(0,0),array(),100
        ,"models/hanksabutt/rollingstock/tankers/tanker_26k.mdl",40,"usamerican general_tanker ethanol_tanker oil_tanker manifest freight invisiload sdetail mstsports hanksabutt 1990s 2000s 2010s 2020s functional gsgphx36 gsgrsg33",vec4(581,-16,90,0),array(),array(),vec2(0,6),array(),100
        ,"models/jk/wagon_jk.mdl",2,"nswaustralianz general_tanker invisiload freight manifest mdetail linnie 1970s 1980s 1990s 2000s 2010s 2020s nsw2cmrsg nsw2cmphx functional",vec4(452,-15,90,0),array(2,1,1,2,3,3,1,4,2,5),array(8),vec2(0,0),array(),70
        ,"models/joe/rolling_stock/1860s/24_boxcar/24_boxcar.mdl",25,"usamerican general_boxcar_nonhigh invisiload freight mow janky manifest old hdetail joeconqueror preera 1900s 1910s archrsg magphx magphx magrsg",vec4(220,-8,90,0),array(2,1,2,2,2,3,2,5,2,9),array(10,10,10,11),vec2(0,0),array(),30
        ,"models/joe/rolling_stock/1860s/boxcar/boxcar.mdl",35,"usamerican general_boxcar_nonhigh invisiload janky freight manifest mow old hdetail joeconqueror preera 1900s 1910s 1920s 1930s archrsg magphx magphx magrsg",vec4(264,-10,90,0),array(2,1,2,3,2,5),array(10,10,10,11),vec2(0,0),array(),40
        ,"models/joe/rolling_stock/1860s/flat_car/flat_car.mdl",15,"usamerican coal_gondola loaded freight manifest old hdetail joeconqueror preera 1900s 1910s functional archrsg magphx magphx magrsg",vec4(220,-8,90,0),array(3,3,2,4,3,7),array(10,10,10,11),vec2(0,0),array(vec(3,1,1),vec(4,2,2)),35
        ,"models/joe/rolling_stock/1860s/flat_car/flat_car.mdl",15,"usamerican wood_flatcar log_flatcar general_flatcar empty freight manifest mow old hdetail joeconqueror preera 1900s 1910s functional archrsg magphx magphx magrsg",vec4(220,-8,90,0),array(3,3,2,4,3,7),array(10,10,10,11),vec2(0,0),array(vec(1,1,1),vec(2,0,1)),35
        ,"models/joe/rolling_stock/1860s/flat_car/flat_car.mdl",2,"usamerican water_tanker empty freight manifest old hdetail joeconqueror preera 1900s 1910s functional archrsg magphx magphx magrsg",vec4(220,-8,90,0),array(3,3,2,4,3,7),array(10,10,10,11),vec2(0,0),array(vec(3,1,1),vec(4,1,1)),40
        ,"models/joe/rolling_stock/1860s/flat_car/flat_car.mdl",2,"usamerican water_tanker empty freight manifest old hdetail joeconqueror preera 1900s 1910s functional archrsg magphx magphx magrsg",vec4(220,-8,90,0),array(3,3,2,4,3,7),array(10,10,10,11),vec2(0,0),array(vec(4,1,1)),40
        ,"models/joe/rolling_stock/1860s/flat_car/flat_car.mdl",20,"usamerican coal_gondola general_gondola empty freight manifest mow old hdetail joeconqueror preera 1900s 1910s functional archrsg magphx magphx magrsg",vec4(220,-8,90,0),array(3,3,2,4,3,7),array(10,10,10,11),vec2(0,0),array(vec(3,1,1)),35
        ,"models/joe/rolling_stock/1860s/flat_car/flat_car.mdl",7,"usamerican log_flatcar loaded freight manifest mow old hdetail joeconqueror preera 1900s 1910s functional archrsg magphx magphx magrsg",vec4(220,-8,90,0),array(3,3,2,4,3,7),array(10,10,10,11),vec2(0,0),array(vec(1,1,1),vec(2,1,1),vec(4,3,3)),35
        ,"models/joe/rolling_stock/1860s/flat_car/flat_car.mdl",7,"usamerican wood_flatcar loaded freight manifest mow old hdetail joeconqueror preera 1900s 1910s functional archrsg magphx magphx magrsg",vec4(220,-8,90,0),array(3,3,2,4,3,7),array(10,10,10,11),vec2(0,0),array(vec(1,1,1),vec(2,0,1),vec(4,4,4)),35
        ,"models/joe/rolling_stock/1860s/open_stock_car/open_stock_car.mdl",2,"usamerican stock empty freight manifest old janky hdetail joeconqueror preera magphx magrsg",vec4(220,-8,90,0),array(3,2,2,3,2,7,2,8),array(10,10,10,11),vec2(0,0),array(),25
        ,"models/joe/rolling_stock/2ft/boxcar.mdl",5,"usamerican general_boxcar_nonhigh invisiload freight manifest new hdetail joeconqueror preera 1900s 1910s 1920s 1930s 1940s joe2ft functional",vec4(183,-2.5,0,4),array(3,1,3,3,2,5,2,8,2,9),array(1,7,8,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11),vec2(0,0),array(),20
        ,"models/joe/rolling_stock/2ft/flat_car.mdl",5,"usamerican general_flatcar wood_flatcar empty freight manifest new hdetail joeconqueror preera 1900s 1910s 1920s 1930s 1940s joe2ft functional",vec4(198,0,0,4),array(1,1,3,2,3,5,3,6,2,7,2,8),array(1,7,8,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11),vec2(0,0),array(vec(1,0,1)),20
        ,"models/joe/rolling_stock/2ft/flat_car.mdl",5,"usamerican wood_flatcar loaded freight manifest new hdetail joeconqueror preera 1900s 1910s 1920s 1930s 1940s joe2ft functional",vec4(198,0,0,4),array(1,1,3,2,3,5,3,6,2,7,2,8),array(1,7,8,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11),vec2(0,0),array(vec(1,1,1),vec(2,1,1)),20
        ,"models/joe/rolling_stock/2ft/gondola.mdl",5,"usamerican coal_gondola loaded freight manifest new hdetail joeconqueror preera 1900s 1910s 1920s 1930s 1940s joe2ft functional",vec4(198,2,0,4),array(2,3,3,4,2,5,3,6,7,8),array(1,7,8,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11),vec2(0,0),array(vec(1,1,1)),20
        ,"models/joe/rolling_stock/2ft/gondola.mdl",5,"usamerican general_gondola coal_gondola empty freight manifest new hdetail joeconqueror preera 1900s 1910s 1920s 1930s 1940s joe2ft functional",vec4(198,2,0,4),array(2,3,3,4,2,5,3,6),array(1,7,8,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11),vec2(0,0),array(),20
        ,"models/joe/rolling_stock/2ft/mc_hopper/mc_hopper.mdl",5,"usamerican coal_hopper empty freight manifest new hdetail joeconqueror preera 1900s 1910s 1920s 1930s 1940s joe2ft functional",vec4(198,-1,0,4),array(3,4,3,6,2,7,2,8,7,9),array(1,7,8,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11),vec2(0,0),array(),20
        ,"models/joe/rolling_stock/2ft/mc_hopper/mc_hopper.mdl",5,"usamerican coal_hopper loaded freight manifest new hdetail joeconqueror preera 1900s 1910s 1920s 1930s 1940s joe2ft functional",vec4(198,-1,0,4),array(3,4,3,6,2,7,2,8),array(1,7,8,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11),vec2(0,0),array(vec(2,1,1)),20
        ,"models/joe/rolling_stock/2ft/stock_car.mdl",5,"usamerican stock empty freight manifest new hdetail joeconqueror preera 1900s 1910s 1920s 1930s 1940s joe2ft functional",vec4(183,-2,0,4),array(3,1,3,3,2,5,2,8,2,9),array(1,7,8,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11),vec2(0,0),array(),20
        ,"models/joe/rolling_stock/bobber/bobber_caboose.mdl",1,"usamerican caboose hdetail joeconqueror preera 1900s 1910s 1920s 1930s 1940s 1950s functional archrsg magphx magphx magrsg",vec4(122,-15,90,0),array(5,1,3,3,2,7,2,9),array(10,11,11,11,11,11,11),vec2(0,0),array(),15
        ,"models/joe/rolling_stock/caboose_1/caboose_1.mdl",0,"usamerican caboose hdetail joeconqueror preera 1900s 1910s 1920s 1930s 1940s 1950s functional archrsg magphx magphx magrsg",vec4(188,-15,90,0),array(5,1,3,3,2,7,2,9),array(10,11,11,11,11,11,11),vec2(0,0),array(),20
        ,"models/joe/rolling_stock/fec_caboose/fec_caboose.mdl",5,"usamerican caboose hdetail joeconqueror 1910s 1920s 1930s 1940s 1950s 1960s functional archrsg magphx magphx magrsg",vec4(298,-15,90,0),array(3,2,2,7,5,8,2,9),array(10,11,11,11,11,11,11),vec2(0,0),array(),10
        ,"models/joe/rolling_stock/stock_car.mdl",10,"usamerican stock empty freight manifest old hdetail joeconqueror 1910s 1920s 1930s 1940s 1950s functional archrsg magphx magphx magrsg",vec4(344,0,90,0),array(3,1,2,7,1,4,4,2,4,6,3,9,1,5),array(7,10,10,10,10,11,11),vec2(0,0),array(),50
        ,"models/joe/rolling_stock/tank_car.mdl",10,"usamerican general_tanker invisiload freight manifest old mow hdetail janky joeconqueror 1930s 1940s 1950s 1960s 1970s magphx magrsg",vec4(416,0,90,0),array(4,5,3,1,1,2,2,3,2,7),array(2,3,3,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7),vec2(0,0),array(),55
        ,"models/lazpack/freightcars/flatcar_p-0.mdl",1,"usamerican general_flatcar wood_flatcar steel_flatcar empty freight manifest hdetail laz 1950s 1960s 1970s 1980s functional magphx magrsg",vec4(414,-18,90,0),array(1,1,2,10,2,11,3,12,2,17),array(1,4,4,4,4,4,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12),vec2(0,0),array(vec(1,0,1)),70
        ,"models/lazpack/freightcars/flatcar_p-0.mdl",1,"usamerican steel_flatcar loaded freight manifest hdetail laz 1950s 1960s 1970s 1980s functional magphx magrsg",vec4(414,-18,90,0),array(1,1,2,10,2,11,3,12,2,17),array(1,4,4,4,4,4,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12),vec2(0,0),array(vec(1,2,6)),70
        ,"models/lazpack/freightcars/flatcar_p-0.mdl",1,"usamerican wood_flatcar loaded freight manifest hdetail laz 1950s 1960s 1970s 1980s functional magphx magrsg",vec4(414,-18,90,0),array(1,1,2,10,2,11,3,12,2,17),array(1,4,4,4,4,4,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12),vec2(0,0),array(vec(1,7,8)),70
        ,"models/lazpack/freightcars/hopper_acf_1958cuft.mdl",3,"usamerican cement_hopper sand_hopper dolomite_hopper invisiload freight manifest new sdetail laz 1940s 1950s 1960s 1970s functional magphx magrsg",vec4(302,-16,90,0),array(1,1,2,6),array(3),vec2(0,0),array(vec(2,1,1),vec(1,16,19)),70
        ,"models/lazpack/freightcars/hopper_acf_1958cuft.mdl",3,"usamerican cement_hopper sand_hopper dolomite_hopper invisiload freight manifest new sdetail laz 1940s 1950s 1960s 1970s functional magphx magrsg",vec4(302,-16,90,0),array(1,1,2,6),array(7),vec2(0,0),array(vec(2,0,3),vec(1,0,3)),70
        ,"models/lazpack/freightcars/hopper_acf_1958cuft.mdl",6,"usamerican cement_hopper sand_hopper dolomite_hopper invisiload freight manifest new sdetail laz 1940s 1950s 1960s 1970s functional magphx magrsg",vec4(302,-16,90,0),array(1,1,2,6),array(1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,5,6,7,7,7,7,7,8,8,8,11,11,11),vec2(0,0),array(vec(2,0,1),vec(1,20,20)),70
        ,"models/lazpack/freightcars/hopper_acf_1958cuft.mdl",9,"usamerican cement_hopper sand_hopper dolomite_hopper invisiload freight manifest new sdetail laz 1940s 1950s 1960s 1970s functional magphx magrsg",vec4(302,-16,90,0),array(1,1,2,6),array(3),vec2(0,0),array(vec(2,0,3),vec(1,4,15)),70
        ,"models/lazpack/freightcars/hopper_h30.mdl",2,"usamerican cement_hopper sand_hopper dolomite_hopper invisiload freight manifest new sdetail laz 1940s 1950s 1960s 1970s functional magphx magrsg",vec4(324,-16,90,0),array(1,1,2,4),array(1,3,3,3,3,3,3,3,3,3,3,4,5,7,7,7,7,7,8,8,8,8,8,11,11,11,12),vec2(0,0),array(vec(1,10,10)),70
        ,"models/lazpack/freightcars/hopper_h30.mdl",4,"usamerican cement_hopper sand_hopper dolomite_hopper invisiload freight manifest new sdetail laz 1940s 1950s 1960s functional magphx magrsg",vec4(324,-16,90,0),array(1,1,2,4),array(11),vec2(0,0),array(vec(1,0,4)),70
        ,"models/lazpack/freightcars/hopper_h30.mdl",4,"usamerican cement_hopper sand_hopper dolomite_hopper invisiload freight manifest new sdetail laz 1960s 1970s 1980s functional magphx magrsg",vec4(324,-16,90,0),array(1,1,2,4),array(12),vec2(0,0),array(vec(1,5,9)),70
        ,"models/lazpack/freightcars/hopper_ps2_2bay.mdl",2,"usamerican cement_hopper sand_hopper dolomite_hopper invisiload freight manifest new sdetail laz 1950s 1960s 1970s 1980s functional magphx magrsg",vec4(302,-16,90,0),array(1,1,2,6),array(12),vec2(0,0),array(vec(1,12,14)),70
        ,"models/lazpack/freightcars/hopper_ps2_2bay.mdl",2,"usamerican cement_hopper sand_hopper dolomite_hopper invisiload freight manifest new sdetail laz 1950s 1960s 1970s 1980s functional magphx magrsg",vec4(302,-16,90,0),array(1,1,2,6),array(7),vec2(0,0),array(vec(1,9,11)),70
        ,"models/lazpack/freightcars/hopper_ps2_2bay.mdl",4,"usamerican cement_hopper sand_hopper dolomite_hopper invisiload freight manifest new sdetail laz 1950s 1960s 1970s 1980s functional magphx magrsg",vec4(302,-16,90,0),array(1,1,2,6),array(1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,5,6,7,7,7,7,7,8,8,8,11,11,11,11,11,12),vec2(0,0),array(vec(1,24,24)),70
        ,"models/lazpack/freightcars/hopper_ps2_2bay.mdl",6,"usamerican cement_hopper sand_hopper dolomite_hopper invisiload freight manifest new sdetail laz 1950s 1960s 1970s 1980s functional magphx magrsg",vec4(302,-16,90,0),array(1,1,2,6),array(3),vec2(0,0),array(vec(1,0,8)),70
        ,"models/lazpack/freightcars/hopper_ps2_2bay.mdl",6,"usamerican cement_hopper sand_hopper dolomite_hopper invisiload freight manifest new sdetail laz 1950s 1960s 1970s 1980s functional magphx magrsg",vec4(302,-16,90,0),array(1,1,2,6),array(3),vec2(0,0),array(vec(1,15,23)),70
        ,"models/lazpack/freightcars/hopper_ps2cd_4750.mdl",60,"usamerican grain_hopper invisiload freight manifest new sdetail functional laz 1970s 1980s 1990s 2000s 2010s magphx magrsg",vec4(550,-16,90,0),array(1,25,1,26,1,27),array(1,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,5,5,5,5,5,6,7,8,9,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12),vec2(0,0),array(vec(1,0,10),vec(2,0,2),vec(3,0,10),vec(4,0,1)),100
        ,"models/lazpack/freightcars/icc_103w_19k.mdl",10,"usamerican ethanol_tanker invisiload freight manifest new hdetail laz 1940s 1950s 1960s 1970s 1980s functional magphx magrsg",vec4(454,-18,90,0),array(1,1),array(7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8),vec2(0,0),array(),70
        ,"models/lazpack/freightcars/icc_103w_19k.mdl",10,"usamerican oil_tanker invisiload freight manifest new hdetail laz 1940s 1950s 1960s 1970s 1980s functional magphx magrsg",vec4(454,-18,90,0),array(1,1),array(7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8),vec2(0,0),array(),70
        ,"models/lazpack/freightcars/icc_103w_19k.mdl",20,"usamerican general_tanker invisiload freight manifest new hdetail laz 1940s 1950s 1960s 1970s 1980s functional magphx magrsg",vec4(454,-18,90,0),array(1,1),array(2,3,3,3,3,3,4,4,4,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,12),vec2(0,0),array(vec(1,1,1)),70
        ,"models/lazpack/freightcars/trinity_3230_pd.mdl",1,"usamerican pressuredifferentialpd_hopper_clay invisiload freight manifest new sdetail laz 1990s 2000s 2010s 2020s functional magphx magrsg",vec4(402,-15,90,0),array(1,1),array(3),vec2(0,11),array(),70
        ,"models/lazpack/freightcars/trinity_5660_pd.mdl",5,"usamerican pressuredifferentialpd_hopper_flour invisiload freight manifest new sdetail laz 1990s 2000s 2010s 2020s functional magphx magrsg",vec4(626,-15,90,0),array(1,1),array(3),vec2(0,11),array(),100
        ,"models/lazpack/freightcars/usra_ds_ventmod.mdl",50,"usamerican general_boxcar_nonhigh manifest freight invisiload sdetail laz 1910s 1920s 1930s 1940s 1950s functional magphx magrsg",vec4(374,-17,90,0),array(),array(1,1,1,1,1,1,2,2,2,3,4,4,4,4,5,5,5,5,6,6,6,7,8,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12),vec2(0,0),array(),50
        ,"models/magtrains/autorack_89_covered.mdl",3,"usamerican bilevel_closed_autorack invisiload freight unitfreight new hdetail magnum 1980s 1990s 2000s 2010s 2020s functional magphx magrsg",vec4(784,0,0,0),array(3,1,1,2,1,7),array(1,2,2,2,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,6,6,7,8,11,11,11,11,11),vec2(0,0),array(vec(1,0,5),vec(2,0,3),vec(3,0,1)),120
        ,"models/magtrains/boxcar3.mdl",80,"usamerican general_boxcar_highcube invisiload freight manifest old mdetail magnum 1990s 2000s 2010s 2020s functional magphx magrsg",vec4(608,0,0,0),array(1,4,2,3,3,1,6,5),array(1,1,1,1,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,6,6,6,6,6,6,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11),vec2(0,0),array(),100
        ,"models/magtrains/boxcar5.mdl",30,"usamerican general_boxcar_highcube invisiload freight manifest old mdetail mow magnum 1970s 1980s 1990s 2000s 2010s 2020s functional magphx magrsg",vec4(512,0,0,0),array(1,4,3,1,2,2),array(1,1,1,1,1,1,2,2,2,3,4,4,4,4,5,5,5,5,6,6,6,7,8,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11),vec2(0,0),array(vec(1,0,3),vec(2,0,2),vec(3,0,2),vec(4,0,2)),100
        ,"models/magtrains/boxcar_50.mdl",70,"usamerican general_boxcar_nonhigh invisiload freight manifest new hdetail mow magnum 1970s 1980s 1990s 2000s 2010s 2020s functional magphx magrsg",vec4(448,0,0,0),array(1,5,2,7,3,1),array(1,1,1,2,2,3,4,4,4,4,4,4,4,4,4,4,5,5,6,6,6,6,7,8,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11),vec2(0,0),array(vec(1,0,3),vec(2,0,2),vec(3,0,2),vec(4,0,2)),100
        ,"models/magtrains/caboose1.mdl",1,"usamerican caboose old mdetail magnum 1930s 1940s 1950s 1960s 1970s 1980s 1990s functional magphx magrsg",vec4(352,0,0,0),array(3,1,3,2,1,3,1,4,1,5,2,7,2,9),array(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,3,4,5,5,5,6,7,8,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12),vec2(0,0),array(vec(1,0,1)),30
        ,"models/magtrains/caboose2.mdl",1,"usamerican caboose old mdetail magnum 1930s 1940s 1950s 1960s 1970s 1980s 1990s functional magphx magrsg",vec4(352,0,0,0),array(3,1,3,2,1,3,1,4,1,5,2,7,2,9),array(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,3,4,5,5,5,6,7,8,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12),vec2(0,0),array(vec(1,0,1)),30
        ,"models/magtrains/caboose3.mdl",1,"usamerican caboose old mdetail magnum 1930s 1940s 1950s 1960s 1970s 1980s 1990s functional magphx magrsg",vec4(352,0,0,0),array(3,1,3,2,1,3,1,4,1,5,2,7,2,10),array(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,3,4,5,5,5,6,7,8,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12),vec2(0,0),array(vec(1,0,1)),30
        ,"models/magtrains/caboose4.mdl",1,"usamerican caboose old mdetail magnum 1930s 1940s 1950s 1960s 1970s 1980s 1990s functional magphx magrsg",vec4(352,0,0,0),array(3,1,3,2,1,3,1,4,1,5,2,7,3,9),array(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,3,4,5,5,5,6,7,8,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12),vec2(0,0),array(vec(1,0,1)),30
        ,"models/magtrains/centerbeam1.mdl",0.4,"usamerican centerbeam_flatcar_wood empty freight manifest mdetail old magnum 1970s 1980s 1990s functional magphx magrsg",vec4(608,0,0,0),array(3,2,4,3,1,5,2,1),array(1,1,1,1,1,2,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,7,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12),vec2(0,0),array(vec(1,0,1)),80
        ,"models/magtrains/flatcar1.mdl",15,"usamerican general_flatcar empty freight manifest old mdetail mow magnum 1940s 1950s 1960s 1970s 1980s functional magphx magrsg",vec4(608,0,0,0),array(3,1,4,2,1,4,2,5),array(1,2,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,6,7,7,7,8,8,8,11,11,11,11,11,11,11,11,12),vec2(0,0),array(),80
        ,"models/magtrains/flatcar1.mdl",8,"usamerican wood_flatcar empty freight manifest old mdetail magnum 1940s 1950s 1960s 1970s 1980s functional magphx magrsg",vec4(608,0,0,0),array(3,1,4,2,1,4,2,5),array(1,2,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,6,7,7,7,8,8,8,11,11,11,11,11,11,11,11,12),vec2(0,0),array(vec(1,1,1)),80
        ,"models/magtrains/flatcar2.mdl",15,"usamerican general_flatcar_bulkhead empty freight manifest old mdetail magnum 1950s 1960s 1970s 1980s functional magphx magrsg",vec4(608,0,0,0),array(3,1,4,2,1,4,2,5),array(1,1,2,4,4,5,5,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,11,11,11,11,11,11,11,11,11,11,12),vec2(0,0),array(),70
        ,"models/magtrains/flatcar2.mdl",25,"usamerican general_flatcar_bulkhead empty freight manifest old mdetail magnum 1970s 1980s 1990s 2000s functional magphx magrsg",vec4(608,0,0,0),array(3,1,4,2,1,4,2,5),array(1,2,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,6,7,7,7,8,8,8,11,11,11,11,11,11,11,11,12),vec2(0,0),array(),120
        ,"models/magtrains/flatcar3.mdl",4,"usamerican heavy_flatcar empty freight manifest old mdetail magnum 1940s 1950s 1960s functional magphx magrsg",vec4(528,0,0,0),array(1,1,3,2,3,3,2,5),array(8,11,11,11,12),vec2(0,0),array(),120
        ,"models/magtrains/flatcar4.mdl",6,"usamerican tofc_flatcar empty freight old mdetail magnum 1950s 1960s 1970s 1980s functional magphx magrsg",vec4(608,0,0,0),array(1,3,3,1,2,4),array(1,1,1,1,1,2,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,7,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12),vec2(0,0),array(vec(1,0,2)),100
        ,"models/magtrains/flatcar_f89f.mdl",10,"usamerican tofc_flatcar empty freight manifest unitfreight new hdetail magnum 1980s 1990s 2000s 2010s 2020s functional magphx magrsg",vec4(736,0,0,0),array(1,1,3,2,6,3),array(3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,8,8,8,11,11,11,11,11),vec2(0,0),array(),100
        ,"models/magtrains/flatcar_f89j.mdl",10,"usamerican tofc_flatcar empty freight manifest unitfreight new hdetail magnum 1980s 1990s 2000s 2010s 2020s functional magphx magrsg",vec4(736,0,0,0),array(1,1,3,2,6,3),array(3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,8,8,8,11,11,11,11,11),vec2(0,0),array(),100
        ,"models/magtrains/gondola1.mdl",5,"usamerican scrap_gondola general_gondola empty freight manifest mow old mdetail magnum 1940s 1950s 1960s 1970s 1980s 1990s 2000s 2010s functional magphx magrsg",vec4(608,0,0,0),array(2,1,3,3,1,2),array(1,1,1,1,1,1,1,2,3,4,5,5,5,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11),vec2(0,0),array(),100
        ,"models/magtrains/hopper1.mdl",10,"usamerican coal_hopper empty freight manifest unitfreight mdetail old magnum 1930s 1940s 1950s 1960s 1970s functional magphx magrsg",vec4(352,-4,0,0),array(3,2,1,4,2,1),array(1,1,1,3,4,5,5,5,5,5,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,9,9,9,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11),vec2(0,0),array(vec(2,0,0)),70
        ,"models/magtrains/hopper1.mdl",10,"usamerican coal_hopper loaded freight manifest unitfreight mdetail old magnum 1930s 1940s 1950s 1960s 1970s functional magphx magrsg",vec4(352,-4,0,0),array(3,2,1,4,2,1),array(1,1,1,3,4,5,5,5,5,5,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,9,9,9,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11),vec2(0,0),array(vec(2,1,1)),70
        ,"models/magtrains/hopper1.mdl",16,"usamerican cement_hopper empty freight manifest old mdetail magnum 1950s 1960s 1970s 1980s functional magphx magrsg",vec4(352,-4,0,0),array(3,2,1,4,2,1),array(3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,6,7,8,8,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12),vec2(0,0),array(vec(1,2,2)),70
        ,"models/magtrains/hopper1.mdl",16,"usamerican cement_hopper loaded freight manifest old mdetail magnum 1950s 1960s 1970s 1980s functional magphx magrsg",vec4(352,-4,0,0),array(3,2,1,4,2,1),array(3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,6,7,8,8,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12),vec2(0,0),array(vec(1,2,2)),70
        ,"models/magtrains/hopper1.mdl",8,"usamerican grain_hopper empty freight manifest old mdetail magnum 1960s 1970s 1980s functional magphx magrsg",vec4(352,-4,0,0),array(3,2,1,4,2,1),array(1,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,5,5,6,6,7,8,11,11,11,11,11,12),vec2(0,0),array(vec(1,1,1)),70
        ,"models/magtrains/hopper1.mdl",8,"usamerican grain_hopper loaded freight manifest old mdetail magnum 1960s 1970s 1980s functional magphx magrsg",vec4(352,-4,0,0),array(3,2,1,4,2,1),array(1,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,5,5,6,6,7,8,11,11,11,11,11,12),vec2(0,0),array(vec(1,1,1)),70
        ,"models/magtrains/hopper2.mdl",20,"usamerican cement_hopper invisiload freight manifest mdetail old magnum 1960s 1970s 1980s 1990s functional magphx magrsg",vec4(352,0,0,0),array(3,2,1,4,2,1),array(1,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,5,5,6,7,7,8,11,11,11,11,11,11,11,11,12),vec2(0,0),array(),90
        ,"models/magtrains/hopper4.mdl",10,"usamerican coal_hopper empty freight manifest unitfreight old mdetail magnum 1940s 1950s 1960s 1970s 1980s functional magphx magrsg",vec4(512,-4,0,0),array(3,2,1,4,2,1),array(1,1,1,3,4,5,5,5,5,5,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,9,9,9,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11),vec2(0,0),array(vec(1,0,1),vec(2,0,0)),100
        ,"models/magtrains/hopper4.mdl",10,"usamerican coal_hopper loaded freight manifest unitfreight old mdetail magnum 1940s 1950s 1960s 1970s 1980s functional magphx magrsg",vec4(512,-4,0,0),array(3,2,1,4,2,1),array(1,1,1,3,4,5,5,5,5,5,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,9,9,9,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11),vec2(0,0),array(vec(1,0,1),vec(2,1,1)),100
        ,"models/magtrains/hopper4.mdl",20,"usamerican grain_hopper invisiload freight manifest buffer old mdetail magnum 1970s 1980s 1990s 2000s 2010s 2020s functional magphx magrsg",vec4(512,-4,0,0),array(3,2,1,4,2,1),array(1,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,5,5,6,6,7,8,11,11,11,11,11),vec2(0,0),array(vec(1,2,2)),100
        ,"models/magtrains/hopper4.mdl",7,"usamerican grain_hopper invisiload freight manifest old mdetail buffer magnum 1950s 1960s 1970s 1980s functional magphx magrsg",vec4(512,-4,0,0),array(3,2,1,4,2,1),array(3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,6,7,8,8,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12),vec2(0,0),array(vec(1,3,3)),100
        ,"models/magtrains/intermodal/wellcar_40_single.mdl",3,"usamerican single_wellcar_40ft empty freight unitfreight new hdetail magnum 1980s 1990s 2000s 2010s 2020s functional magphx magrsg",vec4(640,0,0,0),array(1,1,2,3,3,2),array(1,4,4,4,4,4,4,4,4,4,4,6,11,11),vec2(0,0),array(),100
        ,"models/magtrains/intermodal/wellcar_40r_single.mdl",1,"usamerican single_wellcar_40ft empty freight unitfreight new hdetail magnum 1980s 1990s 2000s 2010s functional magphx magrsg",vec4(640,0,0,0),array(1,1,3,3,2,2),array(1,4,4,4,4,4,4,4,4,4,4,6,11,11),vec2(0,0),array(),100
        ,"models/magtrains/intermodal/wellcar_48_single.mdl",5,"usamerican single_wellcar_48ft empty freight unitfreight new hdetail magnum 1980s 1990s 2000s 2010s 2020s functional magphx magrsg",vec4(736,0,0,0),array(1,1,2,3,3,2),array(1,4,4,4,4,4,4,4,4,4,4,6,11,11),vec2(0,0),array(),100
        ,"models/magtrains/intermodal/wellcar_53_single.mdl",15,"usamerican single_wellcar_53ft empty freight unitfreight new hdetail magnum 1980s 1990s 2000s 2010s 2020s functional magphx magrsg",vec4(800,0,0,0),array(1,1,3,4,2,2),array(1,4,4,4,4,4,4,4,4,4,4,6,11,11),vec2(0,0),array(),100
        ,"models/magtrains/jenny1.mdl",8,"usamerican generic_ore_gondola empty freight unitfreight old mdetail magnum 1940s 1950s 1960s 1970s 1980s functional magphx magrsg",vec4(216,-5,0,0),array(1,1,3,2,2,3,2,5),array(7,11,11,12),vec2(0,0),array(vec(3,0,3),vec(5,0,2),vec(7,0,2)),100
        ,"models/magtrains/monkatraz/boxcars/boxcar_40pw_standard.mdl",175,"usamerican general_boxcar_nonhigh invisiload freight manifest old hdetail magnum monkatraz 1940s 1950s 1960s functional magphx magrsg",vec4(344,-4,0,0),array(1,2,1,4,1,6,1,9,2,5,3,1),array(1,1,1,1,1,1,2,2,2,3,4,4,4,4,5,5,5,5,6,6,6,7,8,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12),vec2(0,0),array(vec(4,0,2),vec(5,0,2),vec(1,2,3),vec(3,0,5)),70
        ,"models/magtrains/monkatraz/boxcars/boxcar_40pw_standard.mdl",50,"usamerican general_boxcar_nonhigh invisiload freight manifest old hdetail magnum monkatraz 1930s 1940s 1950s 1960s 1970s functional magphx magrsg",vec4(344,-4,0,0),array(1,2,1,4,1,6,1,9,2,5,3,1),array(1,1,1,1,1,1,2,2,2,3,4,4,4,4,5,5,5,5,6,6,6,7,8,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12),vec2(0,0),array(vec(5,0,2),vec(1,2,2)),70
        ,"models/mcar/wagon_mcar.mdl",10,"nswaustralianz generic_ore_gondola hematite_ore_gondola magnetite_ore_gondola empty freight manifest mdetail linnie 1970s 1980s 1990s 2000s 2010s 2020s magphx magrsg functional",vec4(238,-12,90,0),array(3,1,1,2),array(11,11,11,13,13,14,14),vec2(0,0),array(),160
        ,"models/ntaf/wagon_ntaf.mdl",5,"nswaustralianz general_tanker invisiload freight manifest mdetail linnie 1970s 1980s 1990s 2000s 2010s 2020s magphx magrsg functional",vec4(478,-22,90,0),array(1,1,3,2,2,3),array(7,7,8),vec2(0,0),array(),120
        ,"models/props/linnies_nsw_train_pack/nhff_hopper.mdl",15,"nswaustralianz coal_hopper mdetail freight manifest empty linnie 1980s 1990s 2000s 2010s 2020s magphx magrsg functional",vec4(546,0,0,10),array(1,1,3,2,2,3),array(6,6,6,6,6,6,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,11,13,13,14,14,14,14,14,14),vec2(0,0),array(),100
        ,"models/props/linnies_nsw_train_pack/nhvf_hopper.mdl",15,"nswaustralianz coal_hopper mdetail freight manifest empty linnie 1970s 1980s 1990s 2000s 2010s 2020s magphx magrsg functional",vec4(594,0,0,10),array(3,1,2,2,1,3),array(6,6,6,6,6,6,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,11,13,13,13,14,14,14,14,14,14),vec2(0,0),array(),100
        ,"models/props/linnies_nsw_train_pack/prycementhopper.mdl",5,"nswaustralianz cement_hopper manifest invisiload mdetail linnie 1970s 1980s 1990s 2000s 2010s 2020s nsw2cmrsg nsw2cmphx functional",vec4(332,-41,90,0),array(3,1,1,2),array(8),vec2(0,0),array(),80
        ,"models/props_metaladon/boxcar_40ft_hycube.mdl",1,"usamerican appliance_boxcar_highcube invisiload freight manifest mow new hdetail metaladon 1950s 1960s 1970s functional magphx magrsg",vec4(352,0,0,0),array(1,4,2,3,3,1,1,7,2,8,5,13),array(1,2,4,5,11,11),vec2(1,1),array(vec(6,0,1)),70
        ,"models/props_metaladon/boxcar_40ft_hycube.mdl",3,"usamerican appliance_boxcar_highcube invisiload freight manifest mow new hdetail metaladon 1950s 1960s 1970s functional magphx magrsg",vec4(352,0,0,0),array(1,4,2,3,3,1,1,7,2,8,5,13),array(1,2,4,5,11,11),vec2(0,0),array(vec(6,0,1)),70
        ,"models/props_metaladon/boxcar_86ft_autoparts.mdl",1,"usamerican autoparts_boxcar_highcube invisiload freight unitfreight old hdetail metaladon 1960s 1970s 1980s 1990s functional magphx magrsg",vec4(740,-1,0,0),array(1,1,1,6,2,5,3,2),array(1,1,1,1,1,1,1,1,1,1,3,4,4,4,4,4,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,8,8,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11),vec2(0,0),array(vec(1,8,9),vec(2,7,8),vec(3,2,2),vec(4,2,2),vec(5,2,2),vec(6,2,2),vec(7,0,1),vec(8,0,1)),100
        ,"models/props_metaladon/boxcar_86ft_autoparts.mdl",15,"usamerican autoparts_boxcar_highcube invisiload freight unitfreight old hdetail metaladon 1970s 1980s 1990s 2000s 2010s 2020s functional magphx magrsg",vec4(740,-1,0,0),array(1,1,1,6,2,5,3,2),array(1,1,1,1,1,1,1,1,1,1,3,4,4,4,4,4,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,8,8,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11),vec2(0,0),array(vec(1,0,4),vec(2,0,6),vec(7,0,1),vec(8,0,1)),100
        ,"models/props_metaladon/boxcar_86ft_autoparts.mdl",4,"usamerican autoparts_boxcar_highcube invisiload freight unitfreight old hdetail metaladon 1970s 1980s 1990s 2000s 2010s 2020s functional magphx magrsg",vec4(740,-1,0,0),array(1,1,1,6,2,5,3,2),array(1,1,1,1,1,1,1,1,1,1,3,4,4,4,4,4,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,8,8,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11),vec2(0,0),array(vec(1,5,7),vec(2,0,6),vec(3,2,2),vec(4,2,2),vec(5,2,2),vec(6,2,2),vec(7,0,1),vec(8,0,1)),100
        ,"models/props_metaladon/coilcar_48ft_evans.mdl",15,"usamerican coilcar manifest freight invisiload hdetail metaladon 1960s 1970s 1980s 1990s 2000s 2010s 2020s functional magphx magrsg",vec4(486,0,0,0),array(3,1,1,2,2,3,2,10),array(1,2,2,2,4,5,5,6,6,7,7,7,7,7,8,11,11,11,11,12),vec2(0,1),array(vec(3,0,5),vec(4,0,5),vec(5,0,5)),100
        ,"models/props_metaladon/coilcar_48ft_evans.mdl",20,"usamerican coilcar manifest freight invisiload hdetail metaladon 1960s 1970s 1980s 1990s 2000s 2010s functional magphx magrsg",vec4(486,0,0,0),array(3,1,1,2,2,3,2,10),array(1,2,2,2,4,5,5,6,6,7,7,7,7,7,8,11,11,11,11,12),vec2(0,1),array(vec(3,0,5)),100
        ,"models/props_metaladon/coilcar_48ft_evans.mdl",20,"usamerican coilcar manifest freight invisiload hdetail metaladon 1970s 1980s 1990s 2000s 2010s 2020s functional magphx magrsg",vec4(486,0,0,0),array(3,1,1,2,2,3,2,10),array(1,2,2,2,4,5,5,6,6,7,7,7,7,7,8,11,11,11,11,12),vec2(0,1),array(vec(3,0,5),vec(4,2,2),vec(5,2,2)),100
        ,"models/props_metaladon/coilcar_48ft_evans.mdl",3,"usamerican coilcar manifest freight invisiload hdetail metaladon 1970s 1980s 1990s 2000s 2010s 2020s functional magphx magrsg",vec4(486,0,0,0),array(3,1,1,2,2,3,2,10),array(6),vec2(0,1),array(vec(3,0,5),vec(4,6,6),vec(5,6,6)),100
        ,"models/props_metaladon/coilcar_48ft_evans.mdl",40,"usamerican coilcar manifest freight invisiload hdetail metaladon 1990s 2000s 2010s 2020s functional magphx magrsg",vec4(486,0,0,0),array(3,1,1,2,2,3,2,10),array(1,2,2,2,4,5,5,6,6,7,7,7,7,7,8,11,11,11,11,12),vec2(0,1),array(vec(3,0,5),vec(4,4,4),vec(5,4,4)),100
        ,"models/props_metaladon/commissions/gondola_silverside_coal.mdl",5,"usamerican coal_gondola unitfreight freight loaded hdetail metaladon 1960s 1970s 1980s 1990s functional magphx magrsg",vec4(460,0,0,0),array(3,1,1,2,2,4,1,5),array(9),vec2(0,0),array(vec(4,1,1),vec(5,0,1)),100
        ,"models/props_metaladon/commissions/gondola_silverside_coal.mdl",5,"usamerican coal_gondola unitfreight freight empty hdetail metaladon 1960s 1970s 1980s 1990s functional magphx magrsg",vec4(460,0,0,0),array(3,1,1,2,2,4,1,5),array(9),vec2(0,0),array(vec(5,0,1)),100
        ,"models/props_metaladon/flatcar_73ft_centerbeam.mdl",15,"usamerican centerbeam_flatcar_wood empty freight manifest new hdetail metaladon 1980s 1990s 2000s 2010s 2020s functional magphx magrsg",vec4(720,0,0,0),array(2,1,1,2,3,3,8,11),array(1,1,1,1,1,2,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11),vec2(0,0),array(vec(1,0,1),vec(2,0,4),vec(6,0,3),vec(7,0,1)),100
        ,"models/props_metaladon/flatcar_73ft_centerbeam.mdl",2,"usamerican centerbeam_flatcar_frames loaded freight manifest new hdetail metaladon 1980s 1990s 2000s 2010s 2020s functional magphx magrsg",vec4(720,0,0,0),array(2,1,1,2,3,3,8,11),array(1,1,1,1,1,2,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11),vec2(0,0),array(vec(1,0,1),vec(2,0,4),vec(3,10,13),vec(6,0,3),vec(7,0,1)),100
        ,"models/props_metaladon/flatcar_73ft_centerbeam.mdl",2,"usamerican centerbeam_flatcar_steel loaded freight manifest new hdetail metaladon 1980s 1990s 2000s 2010s 2020s functional magphx magrsg",vec4(720,0,0,0),array(2,1,1,2,3,3,8,11),array(1,1,1,1,1,2,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11),vec2(0,0),array(vec(1,0,1),vec(2,0,4),vec(3,9,9),vec(6,0,3),vec(7,0,1)),100
        ,"models/props_metaladon/flatcar_73ft_centerbeam.mdl",2,"usamerican centerbeam_flatcar_ties loaded freight manifest new hdetail metaladon 1980s 1990s 2000s 2010s 2020s functional magphx magrsg",vec4(720,0,0,0),array(2,1,1,2,3,3,8,11),array(1,1,1,1,1,2,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11),vec2(0,0),array(vec(1,0,1),vec(2,0,4),vec(3,7,8),vec(6,0,3),vec(7,0,1)),100
        ,"models/props_metaladon/flatcar_73ft_centerbeam.mdl",9,"usamerican centerbeam_flatcar_wood loaded freight manifest new hdetail metaladon 1980s 1990s 2000s 2010s 2020s functional magphx magrsg",vec4(720,0,0,0),array(2,1,1,2,3,3,8,11),array(1,1,1,1,1,2,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11),vec2(0,0),array(vec(1,0,1),vec(2,0,4),vec(3,1,6),vec(6,0,3),vec(7,0,1)),100
        ,"models/props_metaladon/freelance/boxcar_40ft_xm1.mdl",25,"usamerican general_boxcar_nonhigh invisiload freight manifest new hdetail metaladon 1910s 1920s 1930s 1940s 1950s functional archrsg magphx magphx magrsg",vec4(354,0,0,0),array(3,2,1,3,1,4),array(1,1,1,1,1,1,2,2,2,3,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,6,6,6,7,7,7,7,7,7,7,7,7,7,8,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12),vec2(0,0),array(vec(5,0,2),vec(6,0,1)),60
        ,"models/props_metaladon/freelance/boxcar_40ft_xm1.mdl",25,"usamerican general_boxcar_nonhigh invisiload freight manifest new hdetail metaladon 1930s 1940s 1950s 1960s functional magphx magrsg",vec4(354,0,0,0),array(3,2,2,3,1,4),array(1,1,1,1,1,1,2,2,2,3,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,6,6,6,7,7,7,7,7,7,7,7,7,7,8,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12),vec2(1,1),array(vec(5,0,2),vec(6,0,1)),60
        ,"models/props_metaladon/freelance/boxcar_40ft_xm1.mdl",4,"usamerican stock empty freight manifest new hdetail metaladon 1930s 1940s 1950s functional magphx magrsg",vec4(354,0,0,0),array(3,2,2,3,1,4),array(1,1,1,1,1,1,2,2,2,3,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,6,6,6,7,7,7,7,7,7,7,7,7,7,8,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12),vec2(1,1),array(vec(5,1,1),vec(6,2,2)),70
        ,"models/props_metaladon/freelance/boxcar_40ft_xm1.mdl",7,"usamerican stock empty freight manifest new hdetail metaladon 1920s 1930s 1940s functional magphx magrsg",vec4(354,0,0,0),array(3,2,1,3,1,4),array(1,1,1,1,1,1,2,2,2,3,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,6,6,6,7,7,7,7,7,7,7,7,7,7,8,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12),vec2(0,0),array(vec(5,1,1),vec(6,2,2)),70
        ,"models/props_metaladon/freelance/boxcar_60ft_autoparts.mdl",1.5,"usamerican autoparts_boxcar_highcube invisiload freight manifest new hdetail metaladon 1960s 1970s 1980s functional magphx magrsg",vec4(543,0,0,0),array(1,4,2,3,3,1,1,8,2,9,5,13),array(1,1,1,4,5,6,6,6,7,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12),vec2(1,1),array(vec(6,0,1)),100
        ,"models/props_metaladon/freelance/boxcar_60ft_autoparts.mdl",3.5,"usamerican autoparts_boxcar_highcube invisiload freight manifest new hdetail metaladon 1960s 1970s 1980s functional magphx magrsg",vec4(543,0,0,0),array(1,4,2,3,3,1,1,8,2,9,5,13),array(1,1,1,4,5,6,6,6,7,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12),vec2(0,0),array(vec(6,0,1)),100
        ,"models/props_metaladon/freelance/flatcar_40ft_freelance.mdl",12,"usamerican general_flatcar wood_flatcar steel_flatcar empty freight manifest mow new hdetail metaladon 1930s 1940s 1950s 1960s functional magphx magrsg",vec4(332,4,0,0),array(3,2,1,3,2,5),array(4,4,4,8,8,8,8,8,8,8,8,8,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12),vec2(0,0),array(vec(3,0,2)),70
        ,"models/props_metaladon/freelance/flatcar_40ft_freelance.mdl",2,"usamerican general_flatcar loaded freight manifest mow new hdetail metaladon 1930s 1940s 1950s 1960s functional magphx magrsg",vec4(332,4,0,0),array(3,2,1,3,2,5),array(4,4,4,8,8,8,8,8,8,8,8,8,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12),vec2(0,0),array(vec(3,0,2),vec(5,6,6)),70
        ,"models/props_metaladon/freelance/flatcar_40ft_freelance.mdl",2,"usamerican wood_flatcar loaded freight manifest mow new hdetail metaladon 1930s 1940s 1950s 1960s functional magphx magrsg",vec4(332,4,0,0),array(3,2,1,3,2,5),array(4,4,4,8,8,8,8,8,8,8,8,8,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12),vec2(0,0),array(vec(3,0,2),vec(5,5,5)),70
        ,"models/props_metaladon/freelance/flatcar_40ft_freelance.mdl",8,"usamerican steel_flatcar loaded freight manifest mow new hdetail metaladon 1930s 1940s 1950s 1960s functional magphx magrsg",vec4(332,4,0,0),array(3,2,1,3,2,5),array(4,4,4,8,8,8,8,8,8,8,8,8,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12),vec2(0,0),array(vec(3,0,2),vec(5,1,4)),70
        ,"models/props_metaladon/freelance/flatcar_45ft_logs.mdl",8,"usamerican log_flatcar empty freight manifest new hdetail metaladon 1950s 1960s 1970s 1980s 1990s functional magphx magrsg",vec4(386,2,0,0),array(2,6,3,2,1,4),array(11),vec2(0,0),array(),70
        ,"models/props_metaladon/freelance/flatcar_45ft_logs.mdl",8,"usamerican log_flatcar loaded freight manifest new hdetail metaladon 1950s 1960s 1970s 1980s 1990s functional magphx magrsg",vec4(386,2,0,0),array(2,6,3,2,1,4),array(11),vec2(0,0),array(vec(3,1,6)),70
        ,"models/props_metaladon/freelance/hopper_aggregate_freelance.mdl",0.4,"usamerican generic_ore_hopper loaded freight manifest new hdetail metaladon 1970s 1980s 1990s 2000s 2010s 2020s functional magphx magrsg",vec4(376,0,0,0),array(1,1,3,3,2,6,2,2,8,9),array(1,1,1,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,5,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,11,11,11,11,11,12),vec2(0,0),array(vec(3,8,8),vec(2,0,1)),100
        ,"models/props_metaladon/freelance/hopper_aggregate_freelance.mdl",0.4,"usamerican taconite_ore_hopper loaded freight manifest new hdetail metaladon 1970s 1980s 1990s 2000s 2010s 2020s functional magphx magrsg",vec4(376,0,0,0),array(1,1,3,3,2,6,2,2,8,9),array(1,1,1,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,5,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,11,11,11,11,11,12),vec2(0,0),array(vec(3,9,9),vec(2,0,1)),100
        ,"models/props_metaladon/freelance/hopper_aggregate_freelance.mdl",0.9,"usamerican coal_hopper loaded freight manifest new hdetail metaladon 1970s 1980s 1990s 2000s 2010s 2020s functional magphx magrsg",vec4(376,0,0,0),array(1,1,3,3,2,6,2,2,8,9),array(1,1,1,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,5,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,11,11,11,11,11,12),vec2(0,0),array(vec(3,7,7),vec(2,0,1)),100
        ,"models/props_metaladon/freelance/hopper_aggregate_freelance.mdl",0.9,"usamerican sand_hopper loaded freight manifest new hdetail metaladon 1970s 1980s 1990s 2000s 2010s 2020s functional magphx magrsg",vec4(376,0,0,0),array(1,1,3,3,2,6,2,2,8,9),array(1,1,1,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,5,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,11,11,11,11,11,12),vec2(0,0),array(vec(3,4,4),vec(2,0,1)),100
        ,"models/props_metaladon/freelance/hopper_aggregate_freelance.mdl",1.8,"usamerican aggregate_hopper loaded freight manifest new hdetail metaladon 1970s 1980s 1990s 2000s 2010s 2020s functional magphx magrsg",vec4(376,0,0,0),array(1,1,3,3,2,6,2,2,8,9),array(1,1,1,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,5,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,11,11,11,11,11,12),vec2(0,0),array(vec(3,5,6),vec(2,0,1)),100
        ,"models/props_metaladon/freelance/hopper_aggregate_freelance.mdl",2.7,"usamerican aggregate_hopper loaded freight manifest new hdetail metaladon 1970s 1980s 1990s 2000s 2010s 2020s functional magphx magrsg",vec4(376,0,0,0),array(1,1,3,3,2,6,2,2,8,9),array(1,1,1,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,5,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,11,11,11,11,11,12),vec2(0,0),array(vec(3,1,3),vec(2,0,1)),100
        ,"models/props_metaladon/freelance/hopper_aggregate_freelance.mdl",6.2,"usamerican generic_ore_hopper empty aggregate_hopper freight manifest new hdetail metaladon 1970s 1980s 1990s 2000s 2010s 2020s functional magphx magrsg",vec4(376,0,0,0),array(1,1,3,3,2,6,2,2,8,9),array(1,1,1,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,5,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,11,11,11,11,11,12),vec2(0,0),array(vec(2,0,1)),100
        ,"models/props_metaladon/freelance/tanker_18k_chemical.mdl",17,"usamerican chemical_tanker invisiload freight manifest new hdetail metaladon 1980s 1990s 2000s 2010s 2020s functional magphx magrsg",vec4(308,0,0,0),array(3,2,2,4,1,5,1,9,8,10),array(3,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7),vec2(1,1),array(),100
        ,"models/props_metaladon/freelance/tanker_18k_chemical.mdl",8,"usamerican chemical_tanker invisiload freight manifest new hdetail metaladon 1980s 1990s 2000s 2010s 2020s functional magphx magrsg",vec4(308,0,0,0),array(3,2,2,4,1,5,1,9,8,10),array(3,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7),vec2(0,0),array(),100
        ,"models/props_metaladon/freelance/tanker_25k_trinity.mdl",10,"usamerican general_tanker invisiload freight manifest new hdetail metaladon 1980s 1990s 2000s 2010s 2020s functional magphx magrsg",vec4(524,0,0,0),array(2,1,1,2,3,3,1,7,8,9),array(2,3,3,3,3,3,3,3,3,3,3,4,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8),vec2(1,1),array(vec(3,0,2)),100
        ,"models/props_metaladon/freelance/tanker_25k_trinity.mdl",20,"usamerican oil_tanker ethanol_tanker invisiload freight manifest new hdetail metaladon 1980s 1990s 2000s 2010s 2020s functional magphx magrsg",vec4(524,0,0,0),array(2,1,1,2,3,3,1,7,8,9),array(7),vec2(1,1),array(vec(3,0,2)),100
        ,"models/props_metaladon/freelance/tanker_25k_trinity.mdl",3,"usamerican general_tanker invisiload freight manifest new hdetail metaladon 1980s 1990s 2000s 2010s 2020s functional magphx magrsg",vec4(524,0,0,0),array(2,1,1,2,3,3,1,7,8,9),array(2,3,3,3,3,3,3,3,3,3,3,4,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8),vec2(0,0),array(vec(3,0,2)),100
        ,"models/props_metaladon/freelance/tanker_25k_trinity.mdl",6,"usamerican oil_tanker ethanol_tanker invisiload freight manifest new hdetail metaladon 1980s 1990s 2000s 2010s 2020s functional magphx magrsg",vec4(524,0,0,0),array(2,1,1,2,3,3,1,7,8,9),array(7),vec2(0,0),array(vec(3,0,2)),100
        ,"models/props_metaladon/gondola_70t_usra.mdl",10,"usamerican general_gondola loaded freight manifest new hdetail metaladon 1920s 1930s 1940s 1950s 1960s 1970s functional magphx magrsg",vec4(452,0,0,0),array(1,1,1,2,3,3,2,4),array(1,1,1,1,1,1,1,2,3,4,5,5,5,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11),vec2(0,0),array(vec(3,1,2)),70
        ,"models/props_metaladon/gondola_70t_usra.mdl",10,"usamerican scrap_gondola loaded freight manifest new hdetail metaladon 1920s 1930s 1940s 1950s 1960s 1970s functional magphx magrsg",vec4(452,0,0,0),array(1,1,1,2,3,3,2,4),array(1,1,1,1,1,1,1,2,3,4,5,5,5,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11),vec2(0,0),array(vec(3,10,13)),70
        ,"models/props_metaladon/gondola_70t_usra.mdl",10,"usamerican steel_gondola loaded freight manifest new hdetail metaladon 1920s 1930s 1940s 1950s 1960s 1970s functional magphx magrsg",vec4(452,0,0,0),array(1,1,1,2,3,3,2,4),array(1,1,1,1,1,1,1,2,3,4,5,5,5,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11),vec2(0,0),array(vec(3,7,9)),70
        ,"models/props_metaladon/gondola_70t_usra.mdl",2,"usamerican wood_gondola loaded freight manifest new hdetail metaladon 1920s 1930s 1940s 1950s 1960s 1970s functional magphx magrsg",vec4(452,0,0,0),array(1,1,1,2,3,3,2,4),array(1,1,1,1,1,1,1,2,3,4,5,5,5,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11),vec2(0,0),array(vec(3,22,22)),70
        ,"models/props_metaladon/gondola_70t_usra.mdl",40,"usamerican general_gondola coke_gondola cement_gondola steel_gondola generic_ore_gondola coal_gondola gravel_gondola sand_gondola wood_gondola empty freight manifest new hdetail metaladon 1920s 1930s 1940s 1950s 1960s 1970s functional magphx magrsg",vec4(452,0,0,0),array(1,1,1,2,3,3,2,4),array(1,1,1,1,1,1,1,2,3,4,5,5,5,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11),vec2(0,0),array(),70
        ,"models/props_metaladon/gondola_70t_usra.mdl",8,"usamerican wood_gondola loaded freight manifest new hdetail metaladon 1920s 1930s 1940s 1950s 1960s 1970s functional magphx magrsg",vec4(452,0,0,0),array(1,1,1,2,3,3,2,4),array(1,1,1,1,1,1,1,2,3,4,5,5,5,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11),vec2(0,0),array(vec(3,20,20)),70
        ,"models/props_metaladon/gondola_woodchips_gunderson.mdl",6,"usamerican scrap_gondola loaded freight manifest old hdetail metaladon 1970s 1980s 1990s 2000s 2010s functional magphx magrsg",vec4(644,0,0,0),array(3,2,1,5,2,4,5,9,1,12,8,13),array(1,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,9,9,9,9,9),vec2(0,0),array(vec(2,2,2),vec(3,0,6),vec(4,0,3),vec(7,1,1)),100
        ,"models/props_metaladon/gondola_woodchips_gunderson.mdl",6,"usamerican scrap_gondola loaded freight manifest old hdetail metaladon 1970s 1980s 1990s 2000s 2010s functional magphx magrsg",vec4(644,0,0,0),array(3,2,1,5,2,4,5,9,1,12,8,13),array(1,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,9,9,9,9,9),vec2(0,0),array(vec(2,6,6),vec(3,0,6),vec(4,0,3),vec(7,1,1)),100
        ,"models/props_metaladon/gondola_woodchips_gunderson.mdl",6,"usamerican trash_gondola loaded freight manifest old hdetail metaladon 1970s 1980s 1990s 2000s 2010s functional magphx magrsg",vec4(644,0,0,0),array(3,2,1,5,2,4,5,9,1,12,8,13),array(1,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,9,9,9,9,9),vec2(0,0),array(vec(2,3,3),vec(3,0,6),vec(4,0,3),vec(7,1,1)),100
        ,"models/props_metaladon/gondola_woodchips_gunderson.mdl",6,"usamerican woodchips_gondola loaded freight manifest old hdetail metaladon 1960s 1970s 1980s functional magphx magrsg",vec4(644,0,0,0),array(3,2,1,5,2,4,5,9,1,12,8,13),array(1,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,9,9,9,9,9),vec2(0,0),array(vec(2,1,1),vec(3,0,6),vec(4,0,3),vec(7,1,1)),100
        ,"models/props_metaladon/gondola_woodchips_gunderson.mdl",6,"usamerican woodchips_gondola loaded freight manifest old hdetail metaladon 1970s 1980s 1990s 2000s 2010s functional magphx magrsg",vec4(644,0,0,0),array(3,2,1,5,2,4,5,9,1,12,8,13),array(1,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,9,9,9,9,9),vec2(0,0),array(vec(2,4,5),vec(3,0,6),vec(4,0,3),vec(7,1,1)),100
        ,"models/props_metaladon/gondola_woodchips_gunderson.mdl",6,"usamerican woodchips_gondola scrap_gondola trash_gondola empty freight manifest old hdetail metaladon 1970s 1980s 1990s 2000s 2010s functional magphx magrsg",vec4(644,0,0,0),array(3,2,1,5,2,4,5,9,1,12,8,13),array(1,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,9,9,9,9,9),vec2(0,0),array(vec(3,0,6),vec(4,0,3),vec(7,1,1)),100
        ,"models/props_metaladon/hopper_2bay_airslide.mdl",12,"usamerican airslide_hopper_flour airslide_hopper_sugar invisiload freight manifest buffer new hdetail metaladon 1950s 1960s 1970s 1980s 1990s functional magphx magrsg",vec4(488,0,0,0),array(2,2,1,3,3,4,8,9),array(1,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,5,5,6,6,7,8,11,11,11,11,11,12),vec2(0,0),array(vec(2,0,1)),100
        ,"models/props_metaladon/hopper_2bay_trinity.mdl",12,"usamerican cement_hopper invisiload freight manifest hdetail new metaladon 1980s 1990s 2000s 2010s 2020s functional magphx magrsg",vec4(360,0,0,0),array(3,8,1,3,2,1,3,2,8,9),array(3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,6,7,8,8,8,8,8,11,11,11,11,11),vec2(0,0),array(vec(5,0,5),vec(2,0,3)),100
        ,"models/props_metaladon/hopper_3bay_ari.mdl",50,"usamerican grain_hopper invisiload freight manifest buffer old hdetail metaladon 1990s 2000s 2010s 2020s functional magphx magrsg",vec4(568,0,0,0),array(1,1,2,2,3,3,8,6),array(3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,6,7,8),vec2(0,0),array(vec(3,0,1)),120
        ,"models/props_metaladon/jenny_24ft_u27.mdl",18,"usamerican generic_ore_hopper taconite_ore_hopper empty aggregate_hopper freight unitfreight old hdetail metaladon 1950s 1960s 1970s functional magphx magrsg",vec4(212,4,0,0),array(2,1,1,2,3,3,8,9),array(11),vec2(0,0),array(vec(5,0,2)),100
        ,"models/props_metaladon/jenny_24ft_u27.mdl",6,"usamerican aggregate_hopper loaded freight unitfreight old hdetail metaladon 1960s 1970s 1980s functional magphx magrsg",vec4(212,4,0,-3),array(2,1,1,2,3,3,8,9),array(11),vec2(0,0),array(vec(3,3,3),vec(5,2,2)),100
        ,"models/props_metaladon/jenny_24ft_u27.mdl",6,"usamerican generic_ore_hopper loaded freight unitfreight old hdetail metaladon 1950s 1960s 1970s functional magphx magrsg",vec4(212,4,0,-3),array(2,1,1,2,3,3,8,9),array(11),vec2(0,0),array(vec(3,1,1)),100
        ,"models/props_metaladon/jenny_24ft_u27.mdl",6,"usamerican taconite_ore_hopper loaded freight unitfreight old hdetail metaladon 1950s 1960s 1970s 1980s functional magphx magrsg",vec4(212,4,0,-3),array(2,1,1,2,3,3,8,9),array(11),vec2(0,0),array(vec(3,2,2),vec(5,1,2)),100
        ,"models/props_metaladon/tanker_11k_jacketed.mdl",30,"usamerican chemical_tanker invisiload freight manifest new hdetail functional metaladon 1940s 1950s 1960s 1970s magphx magrsg",vec4(304,0,0,0),array(1,1,2,3,3,4),array(2,3,4,5,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8),vec2(0,0),array(vec(3,0,1),vec(4,0,1)),50
        ,"models/props_metaladon/tanker_31k_trinity.mdl",10,"usamerican oil_tanker ethanol_tanker invisiload freight manifest new hdetail metaladon 2000s 2010s 2020s functional magphx magrsg",vec4(548,0,0,0),array(2,1,1,2,3,3,8,9),array(7),vec2(0,0),array(vec(3,0,4)),100
        ,"models/props_metaladon/tanker_31k_trinity.mdl",25,"usamerican general_tanker invisiload freight manifest new hdetail metaladon 2000s 2010s 2020s functional magphx magrsg",vec4(548,0,0,0),array(2,1,1,2,3,3,8,9),array(2,3,3,3,3,3,3,3,3,3,3,4,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8),vec2(0,0),array(),100
        ,"models/props_metaladon/tanker_34k_lpg.mdl",15,"usamerican lpg_tanker invisiload freight manifest old hdetail metaladon  1970s 1980s 1990s 2000s 2010s functional magphx magrsg",vec4(648,0,0,0),array(1,1,3,3,2,5,1,6,8,7),array(3,3,3,3,3,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7),vec2(1,1),array(),100
        ,"models/props_metaladon/tanker_34k_lpg.mdl",5,"usamerican lpg_tanker invisiload freight manifest old hdetail metaladon  1970s 1980s 1990s 2000s 2010s functional magphx magrsg",vec4(648,0,0,0),array(1,1,3,3,2,5,1,6,8,7),array(3,3,3,3,3,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7),vec2(0,0),array(),100
        ,"models/props_metaladon/tanker_8k_beercan.mdl",3,"usamerican chemical_tanker invisiload freight manifest mow new hdetail metaladon 1970s 1980s 1990s functional magphx magrsg",vec4(192,0,0,0),array(3,2,2,4,1,5),array(3,3,3,3,3,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7),vec2(0,0),array(vec(3,0,1)),70
        ,"models/rcaf/wagon_rcaf.mdl",15,"nswaustralianz coilcar empty freight manifest mdetail linnie 1970s 1980s 1990s 2000s 2010s 2020s nsw2cmrsg nsw2cmphx functional",vec4(452,-2,90,0),array(1,1,3,2,2,3),array(10,11,13,13,13,13,13,13),vec2(0,0),array(vec(1,0,1),vec(3,0,1),vec(4,0,2)),70
        ,"models/rcaf/wagon_rcaf.mdl",15,"nswaustralianz coilcar loaded freight manifest mdetail linnie 1970s 1980s 1990s 2000s 2010s 2020s nsw2cmrsg nsw2cmphx functional",vec4(452,-2,90,0),array(1,1,3,2,2,3,6,5),array(10,11,13,13,13,13,13,13),vec2(0,0),array(vec(1,0,1),vec(3,0,1),vec(4,0,2),vec(5,1,1)),70
        ,"models/rkly/wagon_rkly.mdl",30,"nswaustralianz container_flatcar empty freight manifest mdetail linnie 1970s 1980s 1990s 2000s 2010s 2020s nsw2cmrsg nsw2cmphx functional",vec4(446,0,90,0),array(1,1,3,2,2,3),array(10,11,13,13,13,13,13,13),vec2(0,0),array(vec(1,0,1)),70
        ,"models/rkly/wagon_rkly.mdl",30,"nswaustralianz container_flatcar loaded freight manifest mdetail linnie 1970s 1980s 1990s 2000s 2010s 2020s nsw2cmrsg nsw2cmphx functional",vec4(446,0,90,0),array(1,1,3,2,2,3),array(10,11,13,13,13,13,13,13),vec2(0,0),array(vec(1,0,1),vec(3,1,1)),70
        ,"models/toast/rollingstock/boxcars/boxcar_pfe_reefer.mdl",40,"usamerican icereeferrefridgerator invisiload freight manifest new functional sdetail toastur 1920s 1930s 1940s 1950s 1960s gsgphx33 gsgrsg33",vec4(374,-16,90,0),array(),array(),vec2(0,2),array(),70
        ,"models/toast/rollingstock/boxcars/boxcar_wagontop_40ft.mdl",6,"usamerican general_boxcar_nonhigh invisiload manifest freight sdetail mstsports janky toastur 1940s 1950s 1960s functional gsgphx33 gsgrsg33",vec4(376,-18,90,0),array(),array(),vec2(0,6),array(),70
        ,"models/toast/rollingstock/gondolas/gondola_40ft_usra.mdl",25,"usamerican general_gondola gravel_gondola sand_gondola scrap_gondola empty manifest freight sdetail mstsports janky toastur 1900s 1910s 1920s 1930s 1940s 1950s functional gsgphx33 gsgrsg33",vec4(400,-16,90,0),array(),array(),vec2(0,2),array(),70
        ,"models/toast/rollingstock/hoppers/boxcar_sco_usra_fishbelly.mdl",15,"usamerican general_boxcar_nonhigh invisiload manifest freight sdetail mstsports janky toastur 1900s 1910s 1920s 1930s 1940s 1950s functional gsgphx33 gsgrsg33",vec4(380,-16,90,0),array(),array(),vec2(0,1),array(),100
        ,"models/toast/rollingstock/hoppers/hopper_2bay_usra_lcn.mdl",35,"usamerican coal_hopper empty manifest freight sdetail mstsports janky toastur 1920s 1930s 1940s 1950s 1960s functional gsgphx33 gsgrsg33",vec4(266,-10,90,0),array(),array(),vec2(0,10),array(),50
        ,"models/toast/rollingstock/hoppers/hopper_2bay_usra_lcn.mdl",35,"usamerican coal_hopper loaded manifest freight sdetail mstsports janky toastur 1920s 1930s 1940s 1950s 1960s functional gsgphx33 gsgrsg33",vec4(266,-10,90,0),array(),array(),vec2(0,10),array(vec(1,1,1)),50
        ,"models/v92/props_trains/ep2/train_boxcar.mdl",15,"ussrussian general_boxcar_nonhigh invisiload freight manifest sdetail reverendv92 1970s 1980s 1990s 2000s 2010s 2020s functional rus5ft rusphx rusrsg",vec4(320,-56,90,0),array(),array(),vec2(0,0),array(),70
        ,"models/wam98_trains/rolling_stock/container_flats/ave_q40.mdl",15,"nswaustralianz container_flatcar empty freight manifest mdetail westausman98 1970s 1980s 1990s 2000s 2010s 2020s magphx magrsg functional",vec4(362,-30,90,0),array(1,1,3,2,2,3),array(10,11,13,13,13,13,13,13),vec2(0,0),array(),45
        ,"models/wam98_trains/rolling_stock/container_flats/ave_q60.mdl",10,"nswaustralianz container_flatcar empty freight manifest mdetail westausman98 1970s 1980s 1990s 2000s 2010s 2020s magphx magrsg functional",vec4(526,-30,90,0),array(3,1,2,2,1,3),array(10,11,13,13,13,13,13,13),vec2(0,0),array(),60
        ,"models/wam98_trains/rolling_stock/container_flats/ave_q80.mdl",5,"nswaustralianz container_flatcar empty freight manifest mdetail westausman98 1970s 1980s 1990s 2000s 2010s 2020s nsw2cmrsg nsw2cmphx functional",vec4(766,-30,90,0),array(1,1,3,2,2,3),array(10,11,13,13,13,13,13,13),vec2(0,0),array(),75
        ,"models/wam98_trains/rolling_stock/ore_cars/crrc_cck.mdl",15,"nswaustralianz hematite_ore_gondola magnetite_ore_gondola generic_ore_gondola empty freight manifest hdetail westausman98 2000s 2010s 2020s magphx magrsg functional",vec4(280,-18,90,0),array(3,1,1,2,3,3,1,9,2,11),array(11,11,11,13,13,14,14),vec2(0,0),array(),160
        ,"models/wam98_trains/rolling_stock/ore_cars/crrc_cck.mdl",15/3,"nswaustralianz generic_ore_gondola loaded freight manifest hdetail westausman98 2000s 2010s 2020s magphx magrsg functional",vec4(280,-18,90,-10),array(3,1,1,2,3,3,1,9,2,11),array(11,11,11,13,13,14,14),vec2(0,0),array(vec(1,3,3)),160
        ,"models/wam98_trains/rolling_stock/ore_cars/crrc_cck.mdl",15/3,"nswaustralianz hematite_ore_gondola loaded freight manifest hdetail westausman98 2000s 2010s 2020s magphx magrsg functional",vec4(280,-18,90,0),array(3,1,1,2,3,3,1,9,2,11),array(11,11,11,13,13,14,14),vec2(0,0),array(vec(1,1,1)),160
        ,"models/wam98_trains/rolling_stock/ore_cars/crrc_cck.mdl",15/3,"nswaustralianz magnetite_ore_gondola loaded freight manifest hdetail westausman98 2000s 2010s 2020s magphx magrsg functional",vec4(280,-18,90,0),array(3,1,1,2,3,3,1,9,2,11),array(11,11,11,13,13,14,14),vec2(0,0),array(vec(1,2,2)),160
        ,"models/zexciv_train_stuff/usa/armc/hopper_armc_77t_2700cuft.mdl",10,"usamerican coal_hopper empty freight unitfreight new sdetail zexciv 1970s 1980s 1990s 2000s 2010s functional magphx magrsg",vec4(410,-18,90,0),array(1,1,3,5,7,9),array(7,7,7,7,7,7,7,7,11),vec2(0,0),array(vec(9,0,1)),77
        ,"models/zexciv_train_stuff/usa/armc/hopper_armc_77t_2700cuft.mdl",10,"usamerican coal_hopper loaded freight unitfreight new sdetail zexciv 1970s 1980s 1990s 2000s 2010s functional magphx magrsg",vec4(410,-18,90,0),array(1,1,3,5,7,9),array(7,7,7,7,7,7,7,7,11),vec2(0,0),array(vec(8,1,1),vec(9,0,1)),77
        

        #[
        #Uncomment these if you like, but generally people don't use them and they increase search times. Plus, they look terrible.
        ,"models/magtrains/boxcar4.mdl",15,"usamerican general_boxcar_nonhigh invisiload freight manifest old ldetail magnum 1990s 2000s 2010s 2020s functional magphx magrsg",vec4(608,0,0,0),array(1,4,3,1,2,3),array(1,1,1,1,1,1,2,2,2,3,4,4,4,4,5,5,5,5,6,6,6,7,8,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11),vec2(0,0),array(),100
        ,"models/anytrains/rollingstock/freight/tf2/tf2_tankcar.mdl",10,"usamerican general_tanker manifest freight invisiload mdetail tf2 anyone991 1960s 1970s 1980s 1990s functional tf2phx tf2rsg",vec4(308,-21,90,-3),array(),array(),vec2(0,1),array(),70
        ,"models/magtrains1ga/flatcar1.mdl",1,"testing usamerican general_flatcar empty freight manifest ldetail magnum preera 1900s 1910s 1920s 1930s 1940s joe2ft functional",vec4(244,-2,0,0),array(2,1,3,2,4,3,1,5),array(1,7,8,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11),vec2(0,0),array(),20
        ,"models/magtrains1ga/flatcar2.mdl",1,"testing usamerican general_flatcar_bulkhead empty freight manifest ldetail magnum preera 1900s 1910s 1920s 1930s 1940s joe2ft functional",vec4(244,-2,0,0),array(2,1,3,2,4,3,1,5),array(1,7,8,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11),vec2(0,0),array(),20
        ,"models/magtrains1ga/flatcar3.mdl",1,"testing usamerican general_flatcar_bulkhead empty freight manifest ldetail magnum preera 1900s 1910s 1920s 1930s 1940s joe2ft functional",vec4(244,-2,0,0),array(2,1,3,2,4,3,1,5),array(1,7,8,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11),vec2(0,0),array(),20
        ,"models/magtrains1ga/flatcar4.mdl",1,"testing usamerican general_flatcar empty freight manifest ldetail magnum preera 1900s 1910s 1920s 1930s 1940s joe2ft functional",vec4(300,-2,0,0),array(1,1,3,2),array(1,7,8,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11),vec2(0,0),array(),20
        ,"models/magtrains1ga/caboose1.mdl",1,"testing usamerican caboose ldetail magnum preera 1900s 1910s 1920s 1930s 1940s joe2ft functional",vec4(176,-2,0,0),array(3,1,2,2,1,4),array(10,11,11,11,11,11,11),vec2(0,0),array(),4
        ,"models/magtrains1ga/hopper1.mdl",1,"testing usamerican coal_hopper empty freight manifest ldetail magnum preera 1900s 1910s 1920s 1930s 1940s joe2ft functional",vec4(140,-2,0,0),array(3,1,2,3,1,4),array(8,8,8,8,8,9),vec2(0,0),array(),20
        ,"models/magtrains1ga/hopper2.mdl",1,"testing usamerican cement_hopper empty freight manifest ldetail magnum preera 1900s 1910s 1920s 1930s 1940s joe2ft functional",vec4(140,-2,0,0),array(2,1,3,2,1,3),array(3,3,3,3,3,9),vec2(0,0),array(),20
        ,"models/magtrains1ga/tanker1.mdl",1,"testing usamerican cement_hopper invisiload freight manifest ldetail magnum preera 1900s 1910s 1920s 1930s 1940s joe2ft functional",vec4(208,-2,0,0),array(3,1,1,3),array(8),vec2(0,0),array(),20
        ,"models/magtrains1ga/boxcar1.mdl",1,"testing usamerican general_boxcar_nonhigh invisiload freight manifest ldetail magnum preera 1900s 1910s 1920s 1930s 1940s joe2ft functional",vec4(176,-2,0,0),array(2,1,1,2,3,3),array(1,7,8,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11),vec2(0,0),array(),20
        ,"models/magtrains1ga/boxcar2.mdl",1,"testing usamerican general_boxcar_nonhigh empty freight manifest ldetail magnum preera 1900s 1910s 1920s 1930s 1940s joe2ft functional",vec4(176,-2,0,0),array(2,1,1,2,3,3),array(1,7,8,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11),vec2(0,0),array(),20
        ,"models/rolling_stock/caboose1.mdl",1,"usamerican caboose ldetail joeconqueror preera 1900s 1910s 1920s 1930s 1940s joe2ft functional",vec4(178,38,0,8),array(),array(),vec2(0,0),array(),4
        ,"models/rolling_stock/caboose1.mdl",5,"usamerican caboose ldetail joeconqueror preera 1900s 1910s 1920s 1930s 1940s joe2ft functional",vec4(178,38,0,8),array(3,1,1,4,2,5,3,8,3,9,2,10,5,11,2,12),array(10,11,11,11,11,11,11),vec2(0,0),array(),4
        ,"models/titus's_propper_model_pack_2.4/propper/ukwagon/ukwagon.mdl",1,"britishuk general_flatcar empty freight manifest mdetail janky titus 1970s 1980s 1990s 2000s 2010s 2020s uky25cphx",vec4(474,-19,90,0),array(3,3,1,4,2,5),array(7),vec2(0,0),array(),70
        ,"models/magtrains/autorack1.mdl",1,"usamerican bilevel_closed_autorack invisiload freight unitfreight old ldetail magnum 1980s 1990s functional magphx magrsg",vec4(608,0,0,0),array(1,1,3,3,2,2),array(1,2,2,2,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,6,6,7,8,11,11,11,11,11),vec2(0,0),array(),120
        ,"models/magtrains/autorack2.mdl",1,"usamerican bilevel_open_autorack empty freight unitfreight old ldetail magnum 1970s 1980s 1990s functional magphx magrsg",vec4(608,0,0,0),array(3,1,2,2,1,3),array(1,2,2,2,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,6,6,7,8,11,11,11,11,11),vec2(0,0),array(),100
        ,"models/magtrains/boxcar1.mdl",5,"usamerican general_boxcar_nonhigh invisiload freight manifest old ldetail magnum 1940s 1950s 1960s functional magphx magrsg",vec4(352,-6,0,0),array(1,2,2,1,3,3),array(1,1,1,1,1,1,2,2,2,3,4,4,4,4,5,5,5,5,6,6,6,7,8,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12),vec2(0,0),array(),70
        ,"models/magtrains/boxcar2.mdl",5,"usamerican general_boxcar_nonhigh invisiload freight manifest old ldetail magnum 1940s 1950s 1960s functional magphx magrsg",vec4(352,-6,0,0),array(1,2,2,1,3,3),array(1,1,1,1,1,1,2,2,2,3,4,4,4,4,5,5,5,5,6,6,6,7,8,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12),vec2(0,0),array(),70
        ,"models/magtrains/boxcar3.mdl",80,"usamerican general_boxcar_highcube invisiload freight manifest old mdetail magnum 1990s 2000s 2010s 2020s functional magphx magrsg",vec4(608,0,0,0),array(1,4,2,3,3,1,6,5),array(1,1,1,1,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,6,6,6,6,6,6,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11),vec2(0,0),array(),100
        ,"models/magtrains/boxcar4.mdl",15,"usamerican general_boxcar_nonhigh invisiload freight manifest old ldetail magnum 1990s 2000s 2010s 2020s functional magphx magrsg",vec4(608,0,0,0),array(1,4,3,1,2,3),array(1,1,1,1,1,1,2,2,2,3,4,4,4,4,5,5,5,5,6,6,6,7,8,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11),vec2(0,0),array(),100
        ,"models/magtrains/tanker1.mdl",1,"usamerican general_tanker invisiload chemical_tanker freight manifest mow old ldetail magnum 1960s 1970s 1980s functional magphx magrsg",vec4(416,-4,0,0),array(3,1,2,4,1,3),array(3,3,3,3,3,6,7,7,7,7,7,7,7,7,7,7),vec2(0,0),array(),70
        ,"models/magtrains/tanker2.mdl",10,"usamerican lpg_tanker invisiload freight manifest old ldetail magnum 1960s 1970s 1980s 1990s functional magphx magrsg",vec4(608,0,0,0),array(3,1,1,3,2,4),array(3,3,3,3,3,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7),vec2(0,0),array(),100
        ,"models/magtrains/gondola2.mdl",10,"usamerican scrap_gondola empty freight manifest old ldetail magnum 1960s 1970s 1980s 1990s 2000s 2010s functional magphx magrsg",vec4(608,0,0,0),array(2,1,3,2,1,3),array(1,1,1,1,1,1,1,2,3,4,5,5,5,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11),vec2(0,0),array(),100
        ,"models/magtrains/hopper3.mdl",35,"usamerican grain_hopper invisiload freight manifest old ldetail magnum 1980s 1990s 2000s 2010s functional magphx magrsg",vec4(544,0,0,0),array(1,4,2,3,3,1),array(3,3,3,3,3,11),vec2(0,0),array(),100
        ,"models/unionstrains/caboose1.mdl",1,"usamerican caboose old mdetail union janky 1910s 1920s 1930s 1940s 1950s 1960s archrsg magphx magphx magrsg",vec4(320,77,0,0),array(2,1,1,2,3,3,2,4,2,6),array(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,3,4,5,5,5,6,7,8,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11),vec2(0,0),array(),30
        ,"models/jazzie/trains/cars/aar_bulkhead_flatcar.mdl",1,"usamerican general_flatcar_bulkhead empty freight janky manifest old hdetail jazzie 1940s 1950s 1960s 1970s magphx magrsg",vec4(622,38,0,0),array(1,1,1,3,2,2),array(1,2,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,6,7,7,7,8,8,8,11,11,11,11,11,11,11,11,12),vec2(0,0),array(),70
        ,"models/jazzie/trains/cars/aar_flatcar.mdl",1,"usamerican general_flatcar_bulkhead empty freight janky manifest old hdetail mow jazzie 1940s 1950s 1960s 1970s magphx magrsg",vec4(622,1,0,0),array(1,1,1,3,2,2),array(1,2,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,6,7,7,7,8,8,8,11,11,11,11,11,11,11,11,12),vec2(0,0),array(),70
        ,"models/jazzie/trains/cars/aar_flatcar_stakes.mdl",1,"usamerican general_flatcar_bulkhead empty freight janky manifest old hdetail mow jazzie 1940s 1950s 1960s 1970s magphx magrsg",vec4(622,22,0,0),array(1,1,1,3,2,2),array(1,2,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,6,7,7,7,8,8,8,11,11,11,11,11,11,11,11,12),vec2(0,0),array(),70
        ,"models/jazzie/trains/cars/ps1_boxcar.mdl",20,"usamerican general_boxcar_nonhigh invisiload freight janky manifest old hdetail jazzie 1950s 1960s 1970s 1980s magphx magrsg",vec4(600,78,0,0),array(3,1,3,2,2,3,2,4,1,6,1,7,2,10,1),array(1,1,1,1,1,1,2,2,2,3,4,4,4,4,5,5,5,5,6,6,6,7,8,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11),vec2(0,0),array(),70
        ,"models/unionstrains/bethgon1.mdl",8,"usamerican coal_gondola empty freight unitfreight old mdetail union janky 1980s 1990s 2000s 2010s magphx magrsg",vec4(570,4,0,0),array(3,2,1,1,2,4,7,8,3,7),array(1,1,1,3,4,5,5,5,5,5,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11),vec2(0,0),array(vec(5,0,0),vec(2,3,3),vec(3,3,3)),100
        ,"models/unionstrains/bethgon1.mdl",8,"usamerican coal_gondola loaded freight unitfreight old mdetail union janky 1980s 1990s 2000s 2010s magphx magrsg",vec4(570,4,0,0),array(3,2,1,1,2,4,7,8,3,7),array(1,1,1,3,4,5,5,5,5,5,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11),vec2(0,0),array(vec(5,3,3),vec(2,3,3),vec(3,3,3)),100
        ,"models/unionstrains/hopper1.mdl",4,"usamerican coal_hopper loaded freight manifest unitfreight old hdetail union janky 1930s 1940s 1950s 1960s magphx magrsg",vec4(376,40,0,0),array(3,1,2,3,1,4,3,5,7,9,3,7),array(1,1,1,3,4,5,5,5,5,5,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,9,9,9,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11),vec2(0,0),array(vec(1,3,3)),70
        ,"models/unionstrains/hopper1.mdl",4,"usamerican coal_hopper empty freight manifest unitfreight old hdetail union janky 1930s 1940s 1950s 1960s magphx magrsg",vec4(376,40,0,0),array(3,1,2,3,1,4,3,5,7,9,3,7),array(1,1,1,3,4,5,5,5,5,5,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,9,9,9,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11),vec2(0,0),array(),70
        ,"models/unionstrains/gondola_g21.mdl",7,"usamerican general_gondola empty freight manifest mow old mdetail union janky 1940s 1950s 1960s 1970s magphx magrsg",vec4(712,-19,90,0),array(3,1,1,3,2,5),array(1,1,1,1,1,1,1,2,3,4,5,5,5,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11),vec2(0,0),array(),70
        ,"models/unionstrains/boxcar1.mdl",4,"usamerican general_boxcar_nonhigh invisiload freight manifest janky old mdetail union 1930s 1940s 1950s 1960s magphx magrsg",vec4(454,70,0,0),array(1,4,2,6,3,1,3,3,4,5),array(1,11,11,11,11,11,11,11,11,11,11),vec2(0,0),array(),70
        ,"models/unionstrains/flatcar1.mdl",12,"usamerican general_flatcar empty freight manifest old mdetail union 1920s 1930s 1940s 1950s 1960s functional magphx magrsg",vec4(514,-14,0,0),array(3,1,1,3,2,4),array(1,2,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,6,7,7,7,8,8,8,11,11,11,11,11,11,11,11,12),vec2(0,0),array(),70
        ,"models/magtrains/tanker3.mdl",4,"usamerican ethanol_tanker invisiload oil_tanker freight manifest old mdetail magnum 1980s 1990s 2000s 2010s functional magphx magrsg",vec4(640,0,0,0),array(3,1,1,2,2,3),array(3,3,3,3,3,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7),vec2(0,0),array(),100
        ,"models/magtrains/tanker4.mdl",8,"usamerican general_tanker invisiload freight manifest old mdetail magnum 1980s 1990s 2000s 2010s 2020s functional magphx magrsg",vec4(512,0,0,0),array(3,1,2,2,1,5),array(3,3,3,3,3,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7),vec2(0,0),array(),100
        #]#

    )
    
    TAGDATA[11,array] = array("poluvagon.mdl","rus_grain_hopper.mdl","rus_wagon_19-1241.mdl","ll_tankcar.mdl","woodreefer.mdl","goomz_gondola1.mdl","rus","12","132","gondola.mdl","rus","1612-10","box","wagon.mdl","rus","1612-12","box","wagon.mdl","boxcar_50ft_ps.mdl",
     "autorack_bilevel_semiopen.mdl","autorack_trilevel_semiopen.mdl","bathtub_hs_coal.mdl","bathtub_thrall_coal.mdl","caboose_baywindow_acf.mdl","flatcar_89ft_garbage.mdl","gon_52ft_nsc.mdl","gon_52ft_thrall.mdl","hopper_covered_3800.mdl","hopper_covered_acf_4600.mdl",
     "hopper_covered_grain_4100.mdl","hopper_covered_grain_4550.mdl","hopper_covered_potash_4550.mdl","bethgon_coalporter.mdl","bethgon_coalporter_irlskins.mdl","aar_bulkhead_flatcar.mdl","aar_flatcar.mdl","aar_flatcar_stakes.mdl","ps1_boxcar.mdl","24_boxcar.mdl",
     "flat_car.mdl","open_stock_car.mdl","stock_car.mdl","tank_car.mdl","hopper_acf_1958cuft.mdl","hopper_h30.mdl","hopper_ps2_2bay.mdl","icc_103w_19k.mdl","trinity_5660_pd.mdl","trinity_3230_pd.mdl","autorack1.mdl","autorack2.mdl","autorack_89_covered.mdl",
     "boxcar3.mdl","boxcar4.mdl","boxcar5.mdl","boxcar_50.mdl","caboose1.mdl","caboose2.mdl","caboose3.mdl","caboose4.mdl","centerbeam1.mdl","flatcar1.mdl","flatcar2.mdl","flatcar3.mdl","flatcar4.mdl","flatcar_f89f.mdl","flatcar_f89j.mdl","gondola1.mdl","hopper1.mdl",
     "hopper2.mdl","hopper3.mdl","hopper4.mdl","wellcar_40_single.mdl","wellcar_40r_single.mdl","wellcar_48_single.mdl","wellcar_53_single.mdl","jenny1.mdl","boxcar_40pw_standard.mdl","tanker1.mdl","tanker2.mdl","tanker3.mdl","tanker4.mdl","boxcar_40ft_hycube.mdl",
     "boxcar_86ft_autoparts.mdl","flatcar_73ft_centerbeam.mdl","boxcar_40ft_xm1.mdl","boxcar_60ft_autoparts.mdl","flatcar_40ft_freelance.mdl","flatcar_45ft_logs.mdl","hopper_aggregate_freelance.mdl","tanker_18k_chemical.mdl","tanker_25k_trinity.mdl","ukwagon.mdl",
     "gondola_woodchips_gunderson.mdl","hopper_2bay_airslide.mdl","hopper_2bay_trinity.mdl","hopper_3bay_ari.mdl","jenny_24ft_u27.mdl","tanker_8k_beercan.mdl","tanker_34k_lpg.mdl","bethgon1.mdl","gondola_g21.mdl","bethlehem3bay4000.mdl","flat_car.mdl",
     "stock_car.mdl","gondola.mdl","mc_hopper.mdl","boxcar.mdl","tlr_hopper.mdl","nyct_flatcar.mdl","flatcar_p-0.mdl","train_boxcar.mdl","fec_caboose.mdl","ca_1_caboose.mdl","bobber_caboose.mdl","caboose_1.mdl","nhvf_hopper.mdl","nhff_hopper.mdl","wagon_jk.mdl",
     "wagon_rcaf.mdl","wagon_rkly.mdl","wagon_ntaf.mdl","ave_q40.mdl","ave_q60.mdl","ave_q80.mdl","bogie_tank.mdl","steel_carrier_b.mdl","prycementhopper.mdl","boxcar.mdl","boxcar1.mdl","boxcar2.mdl","wagon_mcar.mdl","autorack_bilevel_enclosed.mdl","gondola2.mdl",
     "boxcar_50ft_pcf_plugdoor.mdl","tanker_26k.mdl","reefer_trincool.mdl","hopper_ps2cd_4750.mdl","boxcar_pfe_reefer.mdl","nsc_bulkheadflat.mdl","thrall_bulkheadflat.mdl","tanker_11k_jacketed.mdl","hopper_2bay_usra_lcn.mdl","boxcar_sco_usra_fishbelly.mdl",
     "gondola_40ft_usra.mdl","boxcar_wagontop_40ft.mdl","nsc_centerbeam.mdl","boxcar_50ft_gunderson.mdl","boxcar_50ft_pcf_insulated.mdl","boxcar_50ft_ps.mdl","boxcars/boxcar_50ft_pcf_plugdoor.mdl","crrc_cck.mdl","usra_ds_ventmod","tf2_boxcar","tf2_tankcar",
     "tf2_boxcar_noladder","tf2_orecar","gondola_70t_usra.md","tanker_31k_trinity","coilcar_48ft_evans","boxcar_50ft_fmc_doubledoor","boxcar_50ft_fmc_doubledoor_ribbed.mdl","hopper_acf_2970","gondola_silverside_coal","hopper_armc_77t_2700cuft")

    BOGIES = table()
    
    BOGIES["magphx",table] = table("models/magtrains/trucks/barber_s2_phx.mdl",           26,44,0,vec(90,65,55),"magnum new",array(),array(1,"models/props_gulch/tinycars/tc_colorable",2,"models/props_gulch/tinycars/tc_colorable",6,"models/props_gulch/tinycars/tc_lightgray",7,"models/proppertextures/wheel",9,"models/proppertextures/wheel"))
    BOGIES["magrsg",table] = table("models/magtrains/trucks/barber_s2_rsg.mdl",           26,44,0,vec(90,65,55),"magnum new",array(),array(1,"models/props_gulch/tinycars/tc_colorable",2,"models/props_gulch/tinycars/tc_colorable",5,"models/props_gulch/tinycars/tc_lightgray",6,"models/proppertextures/wheel",8,"models/proppertextures/wheel"))
    BOGIES["magold",table] = table("models/magtrains/freightbogey2.mdl",                  44,44,0,vec(90,65,55),"magnum old phx",array(),array(1,"models/proppertextures/wheel",2,"models/proppertextures/wheel",3,"models/props_gulch/tinycars/tc_colorable"))
    BOGIES["rus5ft",table] = table("models/akandr/russian/bogie/cnii_hz_5ft.mdl",         34,57.5,90,vec(90,65,55),"",array(),array(1,"models/props_gulch/tinycars/tc_colorable",3,"models/props_gulch/tinycars/tc_lightgray",4,"models/proppertextures/wheel",5,"models/proppertextures/wheel"))
    BOGIES["rusphx",table] = table("models/akandr/russian/bogie/cnii_hz_phx.mdl",         34,57.5,90,vec(90,65,55),"",array(),array(1,"models/props_gulch/tinycars/tc_colorable",3,"models/props_gulch/tinycars/tc_lightgray",4,"models/proppertextures/wheel",5,"models/proppertextures/wheel"))
    BOGIES["rusrsg",table] = table("models/akandr/russian/bogie/cnii_hz_rsg.mdl",         34,57.5,90,vec(90,65,55),"",array(),array(1,"models/props_gulch/tinycars/tc_colorable",3,"models/props_gulch/tinycars/tc_lightgray",4,"models/proppertextures/wheel",5,"models/proppertextures/wheel"))
    #BOGIES["archrsg",table] = table("models/joe/bogies/arch_bar_truck_2.mdl",            27,44,0,vec(90,65,55),"rsg",array(),array(1,"models/props_gulch/tinycars/tc_darkgray",4,"models/props_gulch/tinycars/tc_colorable",5,"models/proppertextures/wheel",6,"models/proppertextures/wheel",8,"models/proppertextures/wheel",10,"models/proppertextures/wheel"))
    BOGIES["archrsg",table] = table("models/magtrains/trucks/barber_s2_rsg.mdl",          26,44,0,vec(90,65,55),"magnum new",array(),array(1,"models/props_gulch/tinycars/tc_colorable",2,"models/props_gulch/tinycars/tc_colorable",5,"models/props_gulch/tinycars/tc_lightgray",6,"models/proppertextures/wheel",8,"models/proppertextures/wheel"))
    #BOGIES["magphx",table] =table("models/joe/bogies/bogie_1.mdl",                       19,44,90,vec(90,65,55),"phx",array(),array(1,"models/props_gulch/tinycars/tc_colorable",2,"models/props_gulch/tinycars/tc_colorable",4,"models/props_gulch/tinycars/tc_darkgray"))
    #BOGIES["preerarsg",table]=table("models/joe/bogies/wood_beam_truck.mdl",              32,32,90,vec(90,65,55),"preera",array(),array(3,"models/props_gulch/tinycars/tc_darkgray",4,"models/props_gulch/tinycars/tc_colorable",5,"models/props_gulch/tinycars/tc_colorable",7,"models/props_gulch/tinycars/tc_colorable"))
    BOGIES["joe2ft",table] = table("models/joe/bogies/2ft_2.mdl",                         -4,20,0,vec(90,65,55),"3ft",array(),array(1,"models/props_gulch/tinycars/tc_colorable",6,"models/props_gulch/tinycars/tc_lightgray",7,"models/props_gulch/tinycars/tc_lightgray"))
    BOGIES["gsgrsg33",table] = table("models/gsgtrainprops/parts/trucks/barber_s2_33in.mdl",26,44,90,vec(255),"grove rsg",array(),array())
    BOGIES["gsgphx33",table] = table("models/gsgtrainprops/parts/trucks/barber_s2_33in_phx.mdl",26,44,90,vec(255),"grove",array(),array())  
    BOGIES["gsgrsg36",table] = table("models/gsgtrainprops/parts/trucks/barber_s2hd_36in.mdl",26,44,90,vec(255),"grove rsg",array(),array())
    BOGIES["gsgphx36",table] = table("models/gsgtrainprops/parts/trucks/barber_s2hd_36in_phx.mdl",26,44,90,vec(255),"grove",array(),array())   
    BOGIES["gsgrsg28",table] = table("models/gsgtrainprops/parts/trucks/barber_s2_28in.mdl",22,37,90,vec(255),"grove rsg",array(),array())
    BOGIES["gsgphx28",table] = table("models/gsgtrainprops/parts/trucks/barber_s2_28in_phx.mdl",22,37,90,vec(255),"grove",array(),array())  
    BOGIES["gsgrsgleaf",table] = table("models/gsgtrainprops/parts/trucks/barber-bettendorf.mdl",26,44,90,vec(255),"grove rsg leaf",array(),array())
    BOGIES["gsgphxleaf",table] = table("models/gsgtrainprops/parts/trucks/barber-bettendorf_phx.mdl",26,44,90,vec(255),"grove leaf",array(),array())  
    BOGIES["coachphx",table]=table("models/magtrains/coachbogie1.mdl",                    20,44,0,vec(90,65,55),"magnum old",array(),array(1,"models/proppertextures/wheel",3,"models/props_gulch/tinycars/tc_colorable"))
    BOGIES["nsw2cmphx",table]=table("models/bogies/bogie_2cm_phx.mdl",                    18,42,0,vec(90,65,55),"linnie austrailian",array(),array(1,"models/props_gulch/tinycars/tc_colorable",3,"models/proppertextures/wheel",4,"models/proppertextures/wheel"))
    BOGIES["nsw2cmrsg",table]=table("models/bogies/bogie_2cm_tp3.mdl",                    18,42,0,vec(90,65,55),"linnie rsg austrailian",array(),array(1,"models/props_gulch/tinycars/tc_colorable",3,"models/proppertextures/wheel",4,"models/proppertextures/wheel"))
    BOGIES["uky25cphx",table]=table("models/bobsters_trains/uk/bogies/y25c.mdl",          50,55,90,vec(90,65,55),"",array(),array(1,"models/props_gulch/tinycars/tc_colorable",3,"models/proppertextures/wheel",2,"models/proppertextures/wheel",5,"models/proppertextures/wheel"))
    BOGIES["tf2phx",table]=table("models/anytrains/rollingstock/freight/tf2/tf2_bogie_phx.mdl",24,44,90,vec(255),"",array(1,2),array())
    BOGIES["tf2rsg",table]=table("models/anytrains/rollingstock/freight/tf2/tf2_bogie_rsg.mdl",24,44,90,vec(255),"",array(1,2),array())




    FIVEFOOT = 0
    
    HID = 20
    
    #Functions
    
    function number safe(){ #Function that determines if the current iteration is out of processing time
        
        if(SAFEMODE){
            
            return minquota() > QUOTA & perf()
            
        }else{
        
            return minquota() > QUOTA
            
        }

    }
    
    function playsound(Str:string){ #Consolidated function for playing sounds
        
        soundStop(3)
        
        if(Str == "err"){
            
            owner():soundPlay(3,100,"buttons/button11.wav",0)
            soundVolume(3,0.3)
            
        }elseif(Str == "ding"){
        
            owner():soundPlay(3,100,"buttons/bell1.wav",0)
            soundVolume(3,0.3)
            
        }elseif(Str == "spawn"){
        
            owner():soundPlay(3,100,"buttons/blip2.wav",0)
            soundVolume(3,0.3)
            
        }elseif(Str == "nope"){
        
            owner():soundPlay(3,100,"buttons/combine_button_locked.wav",0)
            
        }elseif(Str == "remove"){
            
            owner():soundPlay(3,100,"buttons/button19.wav",0)
            soundVolume(3,0.3)
            
        }elseif(Str == "space"){
        
            owner():soundPlay(3,100,"buttons/lever2.wav",0)
            soundVolume(3,0.2)
            
        }elseif(Str == "kill"){
        
            owner():soundPlay(3,100,"buttons/lever4.wav",0)
            soundVolume(3,0.2)
            
        }elseif(Str == "hmm"){
        
            owner():soundPlay(3,100,"buttons/button16.wav",0)
            
        }elseif(Str == "done"){
        
            owner():soundPlay(3,100,"buttons/button14.wav",0)
            soundVolume(3,0.3)
            
        }
        
    }
    
    function number metafind(Str1:string,Str2:string,Nclusive){ #For space-explode Str2, find matches in Str1. Nclusive switches between "and" or "or" behavior
        
        local N = 1
        
        for(X = 1,Str2:explode(" "):count()){
            
            if(!Str1:find(Str2:explode(" ")[X,string])){N = 0}elseif(Nclusive){return 1}
            
        }
        
        return N
        
    }
    
    function vector flat(V:vector){ #Returns a vector flattened along the Z axis
            
        return vec(V:x(),V:y(),0)
        
    }
    
    function number metacount(T:table){ #Count every item in every array in a table
        
        local O = 0
        
        for(X = 1, 10){
            
            O = O + T[toString(X),array]:count()
            
        }
        
        return O
        
    }
    
    function string list(T:table){ #Collect every item in every array in a table into a string
        
        local O = ""
        
        for(X = 1, 10){
            
            for(Y = 1, T[toString(X),array]:count()){
            
                O = O + T[toString(X),array][Y,string] + " "
                
            }
            
        }
        
        return O:trim()
        
    }
    
    function array prunekeys(Ar:table){ #Similar to keys(), but only returns valid entries with some added restrictions
        
        local Out = array()
        local Ky = Ar:keys()
        
        for(X = 1, Ky:count()){
            
            if(Ar[Ky[X,string],array]:count()){
                
                if(Ky[X,string] == "1" | Ky[X,string] == "2"){
                    
                    Out:insertString(1,Ky[X,string])
                    
                }elseif(Ky[X,string] != "9"){
                
                    Out:pushString(Ky[X,string])
                    
                }
                
            }
            
        }
        
        return Out
        
    }
    
    function vector toRGB(HSL:vector){ #Converts HSL to RGB
        
        local Chr = (1 - abs(2 * HSL:z() - 1)) * HSL:y()
        local H = HSL:x()/60
        local MID =(1 - abs(H % 2 - 1)) * Chr
        
        if(H < 1){R = Chr, G = MID,B = 0
        }elseif(H < 2){R = MID,G = Chr, B = 0
        }elseif(H < 3){R = 0,G = Chr,B = MID
        }elseif(H < 4){R = 0,G = MID,B = Chr
        }elseif(H < 5){R = MID,G = 0,B = Chr
        }elseif(H < 6){R = Chr,G = 0,B = MID
        }else{R = 255,G = 255,B = 255}
        
        local M = HSL:z() - Chr/2
        return vec(R+M,G+M,B+M)*255
    
    }
    
    function printS(In:string){ #Processes long strings into Print:array format
        
        local In = "[CCC] " +In
        local Width = 75
        
        if(!NOPRNT){
        
            if(In:length() > Width){
                
                local A = In:explode("\n")
                local Aa = array()
                local P = ""
                
                for(X = 1,A:count()){ 
                    
                    Aa = A[X,string]:explode(" ")
                    
                    for(Y = 1,Aa:count()){
                        
                        if((P +Aa[Y,string] + " "):length() <= Width){
                            
                            P = P + Aa[Y,string] + " "
                            
                        }else{
                        
                            if(P:trim() != ""){
                                
                                Print = Print:add(array(P))
                                
                            }
                            
                            P = Aa[Y,string]+" "
                            
                        }
                        
                    }
                    
                    if(P != ""){
                        
                        Print = Print:add(array(P))
                        P = ""
                        
                    }
                    
                }
                
            }else{
            
                Print = Print:add(array(In))
                
            }
            
        }
        
    }
    
    function takelog(Str:string){ #Takes a log of the current system state and command stack.
        
        local O = 
        
        "SetAng: "+SetAng+"\nOldOffset: "+OldOffset+"\nGauge: "+Gauge+"\nRailhead: "+Railhead+"\nSCSpeed: "+SCSpeed+"\nHue: "+round(Hue)+"\nSCTrav: "+round(SCTrav)+"\nChew: "+Chew+"\nTag1: "+Tag1+"\nTag2: "+Tag2+"\nTime: "+Time+"\n"+
        "TotalTrainLength: "+round(TotalTrainLength)+"\nTotalTrainWeight: "+round(TotalTrainWeight)+"\nID: "+ID+"\n"+
        "Same: "+Same+"\nRopeID: "+RopeID+"\nSCProc: "+SCProc+"\nForeOffset: "+ForeOffset+"\nLyrC: "+LyrC+"\nLyrX: "+LyrX+"\nLyrY: "+LyrY+"\nLyrZ: "+LyrZ+"\nPhase: "+Phase+"\nNoDef: "+NoDef+"\n"+
        "MdlTag: "+MdlTag+"\nTagCount: "+TagCount+"\nTagsBefore: "+TagsBefore+"\nFlag: "+Flag+"\nSpacer: "+Spacer+"\nRandT: "+RandT+"\nLoaded: "+Loaded+"\nStartID: "+StartID+"\n"+
        "PoolTrack: "+PoolTrack+"\nTagStr: "+TagStr+"\nForced: "+Forced+"\nMode: "+Mode+"\n"+
        
        "SetPos: "+round(SetPos)+"\nSCEndPos: "+round(SCEndPos)+"\nSCLast: "+round(SCLast)+"\nSCEndAng: "+round(SCEndAng)+"\n"+
        
        
        "Head: "+round(Head:pos())+" "+round(Head:angles())+" "+Head:model()+"\n"+
        "SCP: "+round(SCP:pos())+" "+round(SCP:angles())+" "+SCP:model()+"\n"+
        "LastBogie: "+round(LastBogie:pos())+" "+round(LastBogie:angles())+" "+LastBogie:model()+"\n"
        
        for(X = 1,CommandStack:count()){
            
            O = O + CommandStack[X,string]+"\n"
            
        }
        
        fileWrite(">e2shared/ccc_error_log_"+Str+".txt",O)
        
    }
    
    function validate(V1:vector,A1:angle,V2:vector,A2:angle,V3:vector,A3:angle){ #Function for catching bad spawning conditions and reporting a log
        
        local Ar = array(V1:x(),V1:y(),V1:z(),V2:x(),V2:y(),V2:z(),V3:x(),V3:y(),V3:z(),A1:pitch(),A1:yaw(),A1:roll(),A2:pitch(),A2:yaw(),A2:roll(),A3:pitch(),A3:yaw(),A3:roll())
        
        for(X = 1,Ar:count()){
            
            if(isnan(Ar[X,number]) | isinf(Ar[X,number]) | abs(Ar[X,number]) > 16384){takelog(Time+"-"+X+"_"+Ar[X,number]+"_err"),propDeleteAll(),error("Serious bug detected! Report the spawning conditions to Metaladon, he's been hunting this bug! Take the log file from e2shared and give it to him.")}
            
        }

    }

    function array bB(Str:string,TN,A1:array){ #Finds the bodygroups for a given bogie
        
        if(A1:count()){
            
            local A2 = array()
            for(X = 1,A1:count()/2){
                
                A2:pushNumber(A1[X*2-1,number])
                A2:pushNumber(A1[X*2,number])
                
            }
            
            return A2
            
        }
        
        if(!Str:find("magphx") & !Str:find("magold")){
            return array()   
        }
        
        if(TN > 105){
            
            if(Str:find("magphx")){return array(1,3)}elseif(Str:find("magold")){return array()}  
            
        }
        
        if(TN > 75){
            
            if(Str:find("magphx")){return array(1,2)}elseif(Str:find("magold")){return array()}  
            
        }

        if(Str:find("preera") | Str:find("1910s") | Str:find("1920s") | Str:find("1930s")){
            
            if(Str:find("magphx")){return array(1,4)}elseif(Str:find("magold")){return array()}  
            
        }elseif(Str:find("1940s")){
            if(random() > 0.95){
                if(random() > 0.75){
                    if(Str:find("magphx")){return array(1,1)}elseif(Str:find("magold")){return array(2,1)}  
                }else{
                    if(Str:find("magphx")){return array(1,5)}elseif(Str:find("magold")){return array(2,1,1,2)}  
                }
            }else{
                if(Str:find("magphx")){return array(1,4)}elseif(Str:find("magold")){return array(2,1,1,1)}  
            }
        }elseif(Str:find("1950s")){
            if(random() > 0.85){
                if(random() > 0.6){
                    if(Str:find("magphx")){return array(1,1)}elseif(Str:find("magold")){return array(2,1)}  
                }else{
                    if(Str:find("magphx")){return array(1,5)}elseif(Str:find("magold")){return array(2,1,1,2)}  
                }
            }else{
                if(Str:find("magphx")){return array(1,4)}elseif(Str:find("magold")){return array(2,1,1,1)}  
            }
        }elseif(Str:find("1960s")){
            if(random() > 0.7){
                if(random() > 0.5){
                    if(Str:find("magphx")){return array(1,1)}elseif(Str:find("magold")){return array(2,1)}  
                }else{
                    if(Str:find("magphx")){return array(1,5)}elseif(Str:find("magold")){return array(2,1,1,2)}  
                }
            }else{
                if(Str:find("magphx")){return array(1,4)}elseif(Str:find("magold")){return array(2,1,1,1)}  
            }
        }elseif(Str:find("1970s")){
            if(random() > 0.4){
                if(random() > 0.4){
                    if(Str:find("magphx")){return array(1,1)}elseif(Str:find("magold")){return array(2,1)}  
                }else{
                    if(Str:find("magphx")){return array(1,5)}elseif(Str:find("magold")){return array(2,1,1,2)}  
                }
            }else{
                if(Str:find("magphx")){return array(1,4)}elseif(Str:find("magold")){return array(2,1,1,1)}  
            }
        }elseif(Str:find("1980s")){
            if(random() > 0.2){
                if(Str:find("magphx")){return array(1,1)}elseif(Str:find("magold")){return array(2,1)}  
            }else{
                if(Str:find("magphx")){return array(1,5)}elseif(Str:find("magold")){return array(2,1,1,2)}  
            }
        }else{
            if(Str:find("magphx")){return array(1,1)}elseif(Str:find("magold")){return array(2,1,1,1)}  
        }
    }
        
    function number modelLength(N){ #Determines the length of a model
        
        Model = MODELS[N,string]
        holoModel(1,Model)
        
        if(holoEntity(1):boxSize():y()-8 > holoEntity(1):boxSize():x()-8){
        
            return holoEntity(1):boxSize():y()-8+(MODELS[N+3,vector4]:w())*2
            
        }else{
            
            return holoEntity(1):boxSize():x()-8+(MODELS[N+3,vector4]:w())*2
        
        }
        
    }
    
    function number progress(N,Y){ #Determines the final tonnage from capacity and load status
        
        return clamp((((0.6 - (Y/120)*0.4)*Y)+Y) - ((Y*(1-N))*LOADVAL),1,400)
        
        
    }
    
    function array parse(P:array){ #Turns 'Num of Num' arrays into random-choice arrays
        
        local O = array()
        
        if(!P:count()){
            
            return array()
            
        }else{
            
            for(X = 1, P:count()){
                
                for(Y = 1, P[X,number]){
                    
                    O = O:add(array(X))
                    
                }
                
            }
            
            return O
            
        }
        
    }
    
    function number chew(N){ #Turns car data into useable tables
        
        if(AddModels[N*INFOPERMODEL-8,string] == "" | AddModels[N*INFOPERMODEL,number] == 0){return 0}
        
        local B = 0
        if(!AddModels[N*INFOPERMODEL-6,string]:find("janky")){AddModels[N*INFOPERMODEL-6,string] = AddModels[N*INFOPERMODEL-6,string] + " functional"}
        if(AddModels[N*INFOPERMODEL-6,string]:find("ussrussian")){AddModels[N*INFOPERMODEL-6,string] = AddModels[N*INFOPERMODEL-6,string] + " rus5ft rusphx rusrsg",B++}
        if(AddModels[N*INFOPERMODEL-8,string]:find("2ft") | AddModels[N*INFOPERMODEL-6,string]:find("2ft") | AddModels[N*INFOPERMODEL-6,string]:find("nsw2cmphx") | AddModels[N*INFOPERMODEL-6,string]:find("uky25cphx")){B++}
        if(AddModels[N*INFOPERMODEL-6,string]:find("grove") | AddModels[N*INFOPERMODEL-6,string]:find("hank")){
            if(AddModels[N*INFOPERMODEL-6,string]:find("auto")){
                AddModels[N*INFOPERMODEL-6,string] = AddModels[N*INFOPERMODEL-6,string] + " gsgphx28 gsgrsg28" 
            }elseif(AddModels[N*INFOPERMODEL-6,string]:find("caboose")){
                AddModels[N*INFOPERMODEL-6,string] = AddModels[N*INFOPERMODEL-6,string] + " gsgphxleaf gsgrsgleaf" 
            }elseif(AddModels[N*INFOPERMODEL,number] > 70){
                AddModels[N*INFOPERMODEL-6,string] = AddModels[N*INFOPERMODEL-6,string] + " gsgphx36 gsgrsg36" 
            }else{
                AddModels[N*INFOPERMODEL-6,string] = AddModels[N*INFOPERMODEL-6,string] + " gsgphx33 gsgrsg33" 
            },B++}
        if(AddModels[N*INFOPERMODEL-6,string]:find("passenger")){AddModels[N*INFOPERMODEL-6,string] = AddModels[N*INFOPERMODEL-6,string] + " coach",B++}
        if(!B&((AddModels[N*INFOPERMODEL-6,string]:find("1900s") | AddModels[N*INFOPERMODEL-6,string]:find("1910s") | AddModels[N*INFOPERMODEL-6,string]:find("1920s")) & AddModels[N*INFOPERMODEL,number] < 70)){AddModels[N*INFOPERMODEL-6,string] = AddModels[N*INFOPERMODEL-6,string] + " archrsg magphx" }
        if(!B){AddModels[N*INFOPERMODEL-6,string] = AddModels[N*INFOPERMODEL-6,string] + " magphx magrsg"}
        
        AddModels[N*INFOPERMODEL-3,array] = parse(AddModels[N*INFOPERMODEL-3,array])
        
        TAGDATA[11,array]:pushString(AddModels[N*INFOPERMODEL-8,string]:explode("/")[AddModels[N*INFOPERMODEL-8,string]:explode("/"):count(),string])
        
        MODELS:pushString(AddModels[N*INFOPERMODEL-8,string])
        MODELS:pushNumber(AddModels[N*INFOPERMODEL-7,number])
        MODELS:pushString(AddModels[N*INFOPERMODEL-6,string])
        MODELS:pushVector4(AddModels[N*INFOPERMODEL-5,vector4])
        MODELS:pushArray(AddModels[N*INFOPERMODEL-4,array])
        MODELS:pushArray(AddModels[N*INFOPERMODEL-3,array])
        MODELS:pushVector2(AddModels[N*INFOPERMODEL-2,vector2])
        MODELS:pushArray(AddModels[N*INFOPERMODEL-1,array])
        MODELS:pushNumber(AddModels[N*INFOPERMODEL,number])
        
        return 1
        
    }
    
    function array locate(N){ #Function that turns a distance into a position on the track via a graph
        
        if(SPWNBHVIOR){
            
            local N = clamp(N,0,SCTrav)
            
            if(SCTrav == N){print("Positive overload! This is bad! Report this bug to Metaladon.")}
            if(N == 0){print("Negative overload! This is bad! Report this bug to Metaladon.")}
            
            local L = clamp(floor(N/(SCINT*(SCSpeed/1000)*1.1)),1,SCGraph:count()-1) #Rough guess for L
            
            while(SCGraph[L,array][3,number] > N | SCGraph[L+1,array][3,number] < N){ #Loop moves L towards the correct answer
                
                if(SCGraph[L,array][3,number] > N){L--}else{L++}
                
            }
            
            local L = round(clamp(L,0,SCGraph:count()-1)) #Clamp L
            local A1 = SCGraph[L,array][2,angle]:yaw() #First angle
            local A2 = SCGraph[L+1,array][2,angle]:yaw() #Second angle
            
            local V1 = SCGraph[L+1,array][1,vector]-SCGraph[L,array][1,vector] #Calculate the inbetween vector
            local V2 = ((A2-A1)%360)*2 % 360 - (A2-A1)%360 #Calculate the inbetween angle
            
            local I = clamp((N-SCGraph[L,array][3,number])/V1:length(),0,1) #Calculate how far to go between the 2 points
            
            return array(SCGraph[L,array][1,vector] + V1*I, SCGraph[L,array][2,angle]:yaw() + V2*I) #Return an array of the final position, yaw, and state (is it at the end of the tether or not)
            
        }else{
            
            return array(SetPos+ (vec(N,0,0)):rotateAroundAxis(vec(0,0,1),SetAng),SetAng+90)
            
        }
         
    }
    
    function number rails(Ent:entity){ #Checks to see if the prop is on the rails
            
        rangerFilter(Ent)
        local R1 = rangerOffset(200,Ent:toWorld(vec((Gauge/2)-1,0,-Railhead-6):rotateAroundAxis(vec(0,0,1),OldOffset)),(Ent:forward()-Ent:right()):rotateAroundAxis(vec(0,0,1),OldOffset))
        local R2 = rangerOffset(200,Ent:toWorld(vec(-(Gauge/2)+1,0,-Railhead-6):rotateAroundAxis(vec(0,0,1),OldOffset)),(-Ent:forward()-Ent:right()):rotateAroundAxis(vec(0,0,1),OldOffset))
        
        return (R1:hit() & R2:hit())
        
    }
    
    function void endSC(){ #Ends the current scan
        
        if(SCP:isValid()){
        
            SCP:constraintBreak()
            
            SCP:setPos(vec(0))
            SCP:propFreeze(1)
            noCollideAll(SCP,1)
            SCP:setAlpha(0)
            
        }
        
        stoptimer("sc")
        stoptimer("startsc")
        
    }
    
    function string determinebogie(Str:string){ #Determines what the main bogie string should be
        
        if(metafind("models/magtrains/trucks/barber_s2_phx.mdl new",Str,0) | Str == ""){
            
            return "models/magtrains/trucks/barber_s2_phx.mdl"
            
        }elseif(metafind("models/magtrains/trucks/barber_s2_rsg.mdl new",Str,0)){
        
            return "models/magtrains/trucks/barber_s2_rsg.mdl"
            
        }elseif(metafind("models/joe/bogies/2ft_2.mdl",Str,0)){
        
            return "models/joe/bogies/2ft_2.mdl"
            
        }elseif(metafind("models/akandr/russian/bogie/cnii_hz_5ft.mdl",Str,0) & FIVEFOOT){
        
            return "models/akandr/russian/bogie/cnii_hz_5ft.mdl"
            
        }else{
        
            return ""
            
        }
        
        
    }
    
    function string gaugeswitch(Str:string){ #Switches the current Head and Scanner props to the new head type, deleting the old heads
        
        local CP = vec()
        local CA = ang()
        local State = 0
        local NewOffset = 0
        local TempSCP = entity()
        local TempHead = entity()
        
        noCollideAll(Head,1)
        
        switch(Str){ #Determine which kind the new bogie is
            
            case("models/magtrains/trucks/barber_s2_phx.mdl"),
                
                Railhead = 26
                Gauge = 80
                State = 1
                
            break
            case("models/magtrains/trucks/barber_s2_rsg.mdl"),
            
                Railhead = 26
                Gauge = 56
                State = 2
            
            break
            case("models/joe/bogies/2ft_2.mdl"),
            
                Railhead = -4
                Gauge = 32
                State = 3
            
            break
            case("models/akandr/russian/bogie/cnii_hz_5ft.mdl"),
            
                Railhead = 34
                Gauge = 60
                State = 4
                NewOffset = 90
            
            break
            default,
                
                propDeleteAll()
                error("This is impossible, right? How did you get a bad string here after completing a check?")
                
            break
            
        }
        
        SCSpeed = select(State,750,750,300,750) #Set the new SCSpeed
        
        if(Instr[1,table][1,string] == "respawn"){ #If the current instruction involves deleting the head, use this stored data
        
            CP = Instr[1,table][2,vector]
            CA = Instr[1,table][3,angle]
            
        }elseif(first()){ #If it's the first iteration, use the E2's position as a base and nullify Railhead
        
            CP = entity():pos()
            CA = entity():angles()
            OldHead = Railhead
            
        }else{
        
            CP = Head:pos()
            CA = Head:angles()
            
        }
        
        propSpawnUndo(0)
        enableConstraintUndo(0)
        
        if(propCanCreate()){ #Spawning the scanner object first, else retry
            
            TempSCP = propSpawn(Str,vec(0),ang(0,0,0),1) #Spawn Scanner Object
            
        }else{
        
            return ""
            
        }
        
        if(Str == entity():model()){ #If the head is going to become the entity
            
            if(Head != entity()){Head:propDelete()}
            Head = entity()
            entity():setAlpha(255)
            
        }elseif(propCanCreate()){ #Try to spawn a new head, else retry
            
            if(Head != entity()){Head:propDelete()}
            Head = propSpawn(Str,CP+vec(0,0,8-OldHead+Railhead),CA:rotateAroundAxis(vec(0,0,1),NewOffset-OldOffset),0) #Create Spawner Object
            
        }else{
            
            return ""
            
        }
        
        #Past this point, it's confirmed that Head and SCP are valid.
        
        SCP:propDelete()
        SCP = TempSCP
        SCP:setMass(500)
        SCP:setAlpha(0)
        SCP:propPhysicalMaterial("friction_00")
        SCP:setMaterial("models/props_combine/health_charger_glass")
        
        if(SCP:isValid() & Head:isValid()){
            
            noCollide(SCP,Head)
            
        }
        
        propSpawnUndo(1)
        enableConstraintUndo(1)

        if(Str != entity():model()){
            
            timer("tpcenter",200)
            entity():propFreeze(1)
            entity():setAlpha(0)
            
        }
        
        Head:setMass(50000)
        Head:constraintBreak()
        
        holoCreate(0,Head:toWorld(select(State,vec(0,70,-7),vec(0,70,-7),vec(0,38,12),vec(68,0,-16))),vec(1,1,1.5)*select(State,2.5,2.5,1.25,2.5),Head:toWorld(select(State,ang(0,0,-90),ang(0,0,-90),ang(0,0,-90),ang(0,-90,-90))),vec(0,0,0),"cone")
        holoParent(0,Head)
        holoMaterial(0,"debug/debugdrawflat")
        Head:setColor(toRGB(vec(Hue,0.5,0.5)))
        holoColor(0,toRGB(vec(Hue,0.5,0.5)))
        
        holoCreate(1)
        holoPos(1,Head:pos())
        holoParent(1,Head) 
        holoAlpha(1,0)
        holoShadow(1,0)
        holoModel(1,"cube")
        
        local HeadPos = CP+vec(0,0,8-OldHead+Railhead) #Minor offset

        OldOffset = NewOffset
        OldHead = Railhead
        
        if(FINDTRACK){
        
            Head:propFreeze(0)
            timer("freeze",800)
            
            local Dir = 4
            local RF = vec2()
            local Depth = 0
            local Depth2 = 0
            local Shortest = MAX
            if(State == 3){Depth = 4,Depth2 = 0}else{Depth = -37,Depth2 = Depth-4}
            if(!first()){Depth = Depth - 8,Depth2 = Depth2 - 8}
            
            rangerFilter(Head)
        
            for(X = 1,Dir){ #For every direction, run 4 rangers and collect the shortest of all the iterations that successfully hit
                
                local RD = vec(1,0,0):rotateAroundAxis(vec(0,0,1),X*(360/Dir))
                    
                local RP = HeadPos + vec((Gauge-4)/2,0,Depth):rotateAroundAxis(vec(0,0,1),X*(360/Dir))
                
                local Rang1 = rangerOffset(Gauge*3,RP,RD)
                local Rang2 = rangerOffset(Gauge*3,RP+vec(0,0,-Depth+Depth2),RD)
                local Rang3 = rangerOffset(Gauge*3,HeadPos + vec(0,0,Depth),RD)
                local Rang4 = rangerOffset(Gauge*3,HeadPos + vec(0,0,Depth2),RD)
                
                if(Rang1:distance() != 0 & Rang1:hit() & !abs(Rang1:hitNormal():z()) > 0.5 & Rang1:distance() < Shortest){
                    
                    Shortest = Rang1:distance()
                    Angle = Rang1:hitNormal()
                    Hitpos = Rang1:pos()
                    
                }elseif(Rang2:distance() != 0 & Rang2:hit() & !abs(Rang2:hitNormal():z()) > 0.5 & Rang2:distance() < Shortest){
                    
                    Angle = Rang2:hitNormal()
                    Hitpos = Rang2:pos()
                    Shortest = Rang2:distance()
                    
                }elseif(Rang3:distance() != 0 & Rang3:hit() & !abs(Rang3:hitNormal():z()) > 0.5 & Rang3:distance() < Shortest){
                    
                    Shortest = Rang3:distance()
                    Angle = Rang3:hitNormal()
                    Hitpos = Rang3:pos()
                    
                }elseif(Rang4:distance() != 0 & Rang4:hit() & !abs(Rang4:hitNormal():z()) > 0.5 & Rang4:distance() < Shortest){
                    
                    Angle = Rang4:hitNormal()
                    Hitpos = Rang4:pos()
                    Shortest = Rang4:distance()
                    
                }
                
            }
            
            if(Angle != vec(0)){ #If one of the previous rangers was sucessful, run 2 rangers for "which side is longer" and place the spawner on the rails
            
                local R1 = vec(1,0,0):rotateAroundAxis(vec(0,0,1),Angle:toAngle():yaw()+90)
                local R2 = vec(1,0,0):rotateAroundAxis(vec(0,0,1),Angle:toAngle():yaw()-90)
                    
                local Rang1 = rangerOffset(10000,Hitpos+(Angle*1.5),R1)
                local Rang2 = rangerOffset(10000,Hitpos+(Angle*1.5),R2)
                 
                Head:setAng(ang(0,Angle:toAngle():yaw()+OldOffset+(Rang1:distance() > Rang2:distance() ? 0 : 180),0))
                Head:setPos(Hitpos+(Angle*(Gauge/2))+vec(0,0,37))
                
                local Rang3 = rangerOffset(10000,Hitpos,Angle)
                local NG = (round(Rang3:distance()/8))*8
                
                if(Gauge != NG & first()){
                    
                    if(NG == 56){Instr:pushTable(table("mode","rsg"))
                    }elseif(NG == 32){Instr:pushTable(table("mode","2ft"))
                    }elseif(NG == 80){Instr:pushTable(table("mode","phx"))}
                    CommandStack:pushString(Time+" mode "+Instr[1,table][2,string])
                    
                }  
                
            }elseif(!first()){Head:setPos(HeadPos)}
            
        }
        
        return select(State,"PHX","RSG","2ft","5ft") #Return gauge
    }
    
    function table calibogie(Str:string){ #Finds the correct bogie for the given input string
        
        if(BOGIES[Str,table][1,string] != ""){
            
            return BOGIES[Str,table]
            
        }
        
        local Ky = BOGIES:keys()
        
        for(X = 1,Ky:count()){
            
            if(metafind(BOGIES[Ky[X,string],table][1,string]+BOGIES[Ky[X,string],table][6,string],Str,0)){
                
                return BOGIES[Ky[X,string],table]   
                
            }
            
        }
        
        if(Mode == "PHX"){
        
            printS("Invalid bogie model. Reverted to \"barber_s2_phx\".")
            return BOGIES["magphx",table]
            
        }elseif(Mode == "RSG"){
        
            printS("Invalid bogie model. Reverted to \"barber_s2_rsg\".")
            return BOGIES["magrsg",table]
            
        }elseif(Mode == "2ft"){
        
            printS("Invalid bogie model. Reverted to \"2ft_2\".")
            return BOGIES["joe2ft",table]
        
        }
            
    }
    
    function number findnext(Type:array){ #Finds the next matching car in the list of buffered cars
        
        if(Type[1,string] == ""){return 0}
        
        for(X = 1, Buffer:count()){
            
            if(metafind(MODELS[Buffer[X,vector2]:x()+2,string],Type[1,string],1) & Buffer[X,vector2]:y() == Type[3,number]){
                
                Same++
                return X
                
            }
            
        }
        
        Same = 0
        if(Type[2,string] == ""){return 0}
        
        for(X = 1, Buffer:count()){
            
            if(metafind(MODELS[Buffer[X,vector2]:x()+2,string],Type[2,string]+" "+Type[1,string],1)){
                
                return X
                
            }
            
        }
        
        return 0
        
    }
    
    function string miniresolve(N){ #Resolves car type to a definite state
        
        local Str = MODELS[N+2,string]
        local Choice = array()
        
        for(X = 1,TAGDATA[1,array]:count()){
        
            if(Str:find(TAGDATA[1,array][X,string]) & TAGDATA[1,array][X,string] != "anytype"){
                
                Choice:pushString(TAGDATA[1,array][X,string])
                
            }
            
        }
        Str = Choice[randint(1,Choice:count()),string]
        return Str
        
    }
    
    function array resolve(N){ #Resolves a RandT to a Train Type + Load state for use in the next iteration
        
        local Str = MODELS[N+2,string]
        local Rtr = array()
        local Choice = array()
        
        Rtr[1,string] = miniresolve(N)

        Choice = array()
        
        for(X = 1,TRNTYPS:count()){
        
            if(metafind(Str,TRNTYPS[X,string],1)){
                
                Choice:pushString(TRNTYPS[X,string])
                
            }
            
        }
        
        Rtr[2,string] = Choice[randint(1,Choice:count()),string]
        
        return Rtr
        
    }
    
    function string getBogie(Str:string){ #Resolves a bogie type for a car
        
        Ky = BOGIES:keys()
        BogRoll = array()
        
        for(X = 1,Ky:count()){
            
            if(Ky[X,string]:find(Mode:lower()) & Str:find(Ky[X,string])){
                
                BogRoll:pushString(Ky[X,string])
                
            }
            
        }
        
        Str = BogRoll[randint(1,BogRoll:count()),string]
        return Str
        
    }
    
    function resetspawn(){ #Resets all elements of the Spawning procedure as well as all train data storage variables
        
        LyrX = LyrY = LyrZ = ID = 1
        Spawned = table()
        endSC()
        Forced = ""
        LyrC = TotalTrainLength = TotalTrainWeight = Phase = Spacer = RandT = Same = ForeOffset = 0
        Buffer = TrainType = array()
        
    }
        
    #Misc Variables Priming and Hidden Settings
    
    INFOPERMODEL = 9 #Number of data inputs per car
    QUOTA = 500 #Tick quota limit
    
    LyrX = LyrY = LyrZ = Chew =  ID = 1
    
    
        
    #Variables for debugging purposes
    HIDECHAT = 1 #If 1, chat commands are hidden
    DELT = 0.85 #If 0, all cars have the same chance to spawn
    FUNC = 1 #If 1, the "functional" tag is automatically added to searches
    FUNMODE = 0 #Makes the spawner ignore spawning conditions when spawning cars
    SCINT = 200 #Scan Interval
    FINDTRACK = 1 #If 1, the system will snap to the track.
    
    TXCLR = vec2(0.8,0.7)
    TXCLRSPD = 6
    
    MAX = 9^9^9 #Value used for infinity
    
    WEIGHTMUL = WEIGHTMUL/2 #PT2 sees everything as double-weight, use this to negate it
    
    #Clamping vars
    WEIGHTMUL = clamp(WEIGHTMUL,0.1,5)
    LOADCHANCE = clamp(LOADCHANCE,0,1)
    LOADVAL = clamp(LOADVAL,0,1)
    NOPRNT = clamp(round(NOPRNT),0,1)
    DISPLAYTAGS = clamp(round(DISPLAYTAGS),0,1)
    SAFEMODE = clamp(round(SAFEMODE),0,1)
    SPWNBHVIOR = clamp(round(SPWNBHVIOR),0,1)
    STACKSIZE = clamp(round(STACKSIZE),1,30)
    VISIBLESCAN = round(clamp(VISIBLESCAN,0,1))
    
    TOOLONG = ceil(STACKSIZE/8)
    ENDC = 1-(1/(STACKSIZE/8))
    
    dsJoinGroup("operations")
    
    Hue = random(0,359) #Randomly set the starting Hue
    
    setName("Convenient Classic Carspawner V"+VERSION+"\nMade by Sir Metaladon")
    printColor(toRGB(vec(Hue,TXCLR:x(),TXCLR:y())),"[CCC] Welcome to the Convenient, Classic Carspawner V"+VERSION+" Please type \".help\" for a tutorial on how to use the E2, as it's hard to learn otherwise.")
    if(NOPRNT){
        printColor(toRGB(vec(Hue,TXCLR:x(),TXCLR:y())),"[CCC] Chat output is disabled! Re-enable it by setting the variable \"NOPRNT\" to 0.")
        playsound("nope")
    }
    runOnChat(1)

    if(entity():model() == "models/magtrains/trucks/barber_s2_phx.mdl"){BStr = "mag phx"}
    elseif(entity():model() == "models/magtrains/trucks/barber_s2_rsg.mdl"){BStr = "mag rsg"}
    elseif(entity():model() == "models/akandr/russian/bogie/cnii_hz_5ft.mdl"){BStr = "rus"}
    elseif(entity():model() == "models/joe/bogies/2ft_2.mdl"){BStr = "2ft"}
    else{BStr = "mag phx"}
    
    Mode = gaugeswitch(determinebogie(BStr)) #Switch gauges if needed, spawn the SCP, and re-rail the head
    
    #Version Checker
    
    
    runOnHTTP(1)
    timer("timeout",3500)
    httpRequest("https://raw.githubusercontent.com/SirMetaladon/convenient-classic-carspawner/master/versions.txt")

}

noCollideAll(Head,Head:isFrozen())

if(clk() | first()){ #Processes which run on tick
    
    interval(100)
    
    Time = Time + 1
    
    if(Time % 1 == 0){
            
        Head:setColor(toRGB(vec(Hue,0.5,0.5)))
        holoColor(0,toRGB(vec(Hue,0.5,0.5)))
        Hue = (Hue + TXCLRSPD)%360
        
    }
    
    if(safe()){
    
        if(Print:count() & playerCanPrint() & !NOPRNT){
            
            if(Print[1,string] != ""){
                
                printColor(toRGB(vec(Hue,TXCLR:x(),TXCLR:y())),Print[1,string])
                
            }elseif(Print[1,number]:toString() != ""){
            
                printColor(toRGB(vec(Hue,TXCLR:x(),TXCLR:y())),"[CCC] "+Print[1,number]:toString())
                
            }else{
            
                printColor(toRGB(vec(Hue,TXCLR:x(),TXCLR:y())),"[CCC] Incompatible print data type!")
                
            }
            
            Print:remove(1)
            
        }
        
        while(Chew <= ceil(AddModels:count()/INFOPERMODEL) & safe()){
            
            if(chew(Chew)){Valids++}else{Chew = ceil(AddModels:count()/INFOPERMODEL)}
            Chew++
            
        }
        
        if(Chew == 1+ceil(AddModels:count()/INFOPERMODEL)){
            
            if(AddModels:count() != 0){
                printS(Valids+" extra cars added to the main list of "+((MODELS:count()/INFOPERMODEL)-Valids)+" spawnable cars.")
            }else{
                printS(ceil(MODELS:count()/INFOPERMODEL)+" spawnable cars initialized.")
            }
            Chew++
            
        }
        
        if(Taglist){
    
            while(Tag1 <= TAGDATA:count()-1 & safe()){
                
                while(Tag2 <= TAGDATA[Tag1,array]:count() & safe()){
                    
                    TagStr = TagStr +" | "+ TAGDATA[Tag1,array][Tag2,string]
                    Tag2++
                    
                }
                
                if(Tag2 > TAGDATA[Tag1,array]:count()){
                    
                    printS("Group "+Tag1 + ":" + TagStr + "\n ")
                    TagStr = ""
                    Tag1++
                    Tag2 = 1
                    
                }
                
            }
            
            if(Tag1 > TAGDATA:count()-1){
                
                Tag1 = 1
                printS("Told you there's be a lot of them....")
                Taglist = 0
                
            }
            
        }
        
    }
    
}

if(chatClk(owner())){ #Chat Commands
    
    LSC = owner():lastSaid():trim():lower() #Short for Last Said Current

    if((LSC:explode(" ")[1,string] == ".mode" | LSC:explode(" ")[1,string] == "!mode") & LSC:explode(" ")[2,string] != ""){
        
        Instr:pushTable(table("mode",LSC:explode(" ")[2,string]))   
        CommandStack:pushString(Time+" mode "+Instr[1,table][2,string])
        hideChat(HIDECHAT) 

    }elseif((LSC:explode(" ")[1,string] == "!sp" | LSC:explode(" ")[1,string] == ".sp")){
        
        hideChat(HIDECHAT) 
    
        if(LSC:explode(" ")[2,string]:toNumber() != 0){
            
            printS("Command recieved! Queuing " + LSC:explode(" ")[2,string]:toNumber() + " cars. Spawnpoint locked.")
            Instr:pushTable(table("clean"))
            Instr:pushTable(table("sp",LSC,vec(LSC:explode(" ")[2,string]:toNumber(),0,0)))
            CommandStack:pushString(Time+" clean")
            CommandStack:pushString(Time+" sp "+LSC)
            playsound("spawn")
            OpsMode = 0
            
        }elseif(LSC:explode(" ")[2,string]:sub(0,LSC:explode(" ")[2,string]:length()-2):toNumber() != 0 & LSC:explode(" ")[2,string]:sub(LSC:explode(" ")[2,string]:length()-1,LSC:explode(" ")[2,string]:length()) == "ft"){
        
            printS("Command recieved! Queuing " + LSC:explode(" ")[2,string]:sub(0,LSC:explode(" ")[2,string]:length()-2):toNumber() + " feet of cars. Spawnpoint locked.")
            Instr:pushTable(table("clean"))
            Instr:pushTable(table("sp",LSC,vec(0,LSC:explode(" ")[2,string]:sub(0,LSC:explode(" ")[2,string]:length()-2):toNumber(),0)))
            CommandStack:pushString(Time+" clean")
            CommandStack:pushString(Time+" sp "+LSC)
            playsound("spawn")
            OpsMode = 0
            
        }elseif(LSC:explode(" ")[2,string]:sub(0,LSC:explode(" ")[2,string]:length()-1):toNumber() != 0 & LSC:explode(" ")[2,string]:sub(LSC:explode(" ")[2,string]:length(),LSC:explode(" ")[2,string]:length()) == "t"){
        
            printS("Command recieved! Queuing " + LSC:explode(" ")[2,string]:sub(0,LSC:explode(" ")[2,string]:length()-1):toNumber() + " tons worth of cars. Spawnpoint locked.")
            Instr:pushTable(table("clean"))
            Instr:pushTable(table("sp",LSC,vec(0,0,LSC:explode(" ")[2,string]:sub(0,LSC:explode(" ")[2,string]:length()-1):toNumber())))
            CommandStack:pushString(Time+" clean")
            CommandStack:pushString(Time+" sp "+LSC)
            playsound("spawn")
            OpsMode = 0
            
        }else{
            
            playsound("err")
            printS("Incorrect syntax! Do .sp [number of cars] [tag] [tag] etc...")
            
        }
        
    }elseif(LSC:explode(" ")[1,string] == ".rem" | LSC:explode(" ")[1,string] == "!rem"){
        
        hideChat(HIDECHAT) 
        
        if(LSC:explode(" ")[2,string]:toNumber() != 0){
            
            printS("Command recieved! Queuing " + LSC:explode(" ")[2,string]:toNumber() + " car removals.")
            Instr:pushTable(table("rem",LSC:explode(" ")[2,string]:toNumber(),0,0))
            CommandStack:pushString(Time+" rem "+LSC:explode(" ")[2,string]:toNumber())
            playsound("remove")
            
        }elseif(LSC:explode(" ")[2,string]:sub(0,LSC:explode(" ")[2,string]:length()-2):toNumber() != 0 & LSC:explode(" ")[2,string]:sub(LSC:explode(" ")[2,string]:length()-1,LSC:explode(" ")[2,string]:length()) == "ft"){
        
            printS("Command recieved! Queuing " + LSC:explode(" ")[2,string]:sub(0,LSC:explode(" ")[2,string]:length()-2):toNumber() + " feet of removals.")
            Instr:pushTable(table("rem",0,LSC:explode(" ")[2,string]:sub(0,LSC:explode(" ")[2,string]:length()-2):toNumber(),0))
            CommandStack:pushString(Time+" rem "+LSC:explode(" ")[2,string]:sub(0,LSC:explode(" ")[2,string]:length()-2):toNumber())
            playsound("remove")
            
        }elseif(LSC:explode(" ")[2,string]:sub(0,LSC:explode(" ")[2,string]:length()-1):toNumber() != 0 & LSC:explode(" ")[2,string]:sub(LSC:explode(" ")[2,string]:length(),LSC:explode(" ")[2,string]:length()) == "t"){
        
            printS("Command recieved! Queuing " + LSC:explode(" ")[2,string]:sub(0,LSC:explode(" ")[2,string]:length()-1):toNumber() + " tons of removals.")
            Instr:pushTable(table("rem",0,0,LSC:explode(" ")[2,string]:sub(0,LSC:explode(" ")[2,string]:length()-1):toNumber()))
            CommandStack:pushString(Time+" rem "+LSC:explode(" ")[2,string]:sub(0,LSC:explode(" ")[2,string]:length()-1):toNumber())
            playsound("remove")
        
        }else{
            
            playsound("err")
            printS("Incorrect syntax! Do .rem [number of cars]")
            
        }
    
    }elseif((LSC:explode(" ")[1,string] == ".help" | LSC:explode(" ")[1,string] == "!help") & LSC:explode(" ")[2,string] == ""){
    
        printS("Here's an overview on how to use this spawner:\n"+
        "A system of Tags is used to determine what kind of train to spawn. Each car in the list of availible cars has tags that describe it. Example: My cement hopper model has the tags \"cement_hopper\", \"90s\", \"metaladon\", \"hdetail\", \"manifest\", and so forth. "+
        "Tags are broken up into 11 categories like Type, Era, Addon, etc. To spawn a car, type \".sp\", then number of cars (like 5), then Tags like \"boxcar\" or \"50s\". This example (.sp 5 boxcar 50s) will spawn 5 1950's boxcars. Feel free to try this command to see what it does! "+
        "To remove cars, do \".rem\", then the number of cars to remove. You can also substitute the number of cars with feet or tons, like \".sp 200ft grain\" which spawns 200ft of grain cars, or \".rem 500t\" which deletes 500 tons of cars. "+
        "To see other commands that the E2 supports, do \".commandlist\". You can also do \".help adv\" for some tips on more advanced spawning behavior.\n \n"+
        "Here's some other useful commands:\n"+
        "Do \".faq\" for frequently asked questions on the E2 and other functions.\n"+
        "Do \".mode\" then a gauge type to switch gauges like PHX, RSG, and 2ft.\n"+
        "Do \".contact\" for my profile to ask questions and give feedback.\n"+
        "Do \".addons\" for the addon pack containing the models used in this E2.\n"+
        "Do \".settings\" to explain the current E2 spawning settings.\n"+
        "Do \".updates\" to get a link to the latest version on Github.")

        playsound("ding")
        hideChat(HIDECHAT) 
        
    }elseif(LSC:explode(" ")[1,string] == ".log" | LSC:explode(" ")[1,string] == "!log"){
    
        printS("Took log \">e2shared/ccc_error_log_"+Time+"-normal.txt\"")
        takelog(Time+"-normal")

        playsound("ding")
        hideChat(HIDECHAT) 
        
    }elseif((LSC:explode(" ")[1,string] == ".help" | LSC:explode(" ")[1,string] == "!help") & LSC:explode(" ")[2,string] == "adv"){
        
        printS("Here's an overview of advanced spawning:\n"+
        "When you spawn a train and don't specify a tag in one of the 11 categories, it is filled with the \"default\" tags for that slot. This can lead to some odd behavior, like the E2 not being able to spawn older cars like reefers. "+
        "Do .default to see default tags. To disable default tags when spawning, enter the tag \"nodef\". Not recommended, as it can lead to strange trains. Do \".help tags\" to see more specific information. "+
        "If you want to remove the random unit train cars (like wellcars and ore hoppers) from your mixed freight trains, use the \"manifest\" tag. You can also select only unit freight cars with \"unitfreight\" "+
        "You can use a comma to separate \"blocks\" of commands when spawning cars. Example: \".sp 5 grain 60s, tank 40s\" selects 60's grainers and 40's tankers, but NOT 40's grainers or 60's tankers. "+
        "Another special tag is \"mdltag\", which enables searching model names as well as normal tags. For instance \".sp 3 mdltag flatcar1\" would spawn both Union's and Magnum's Flatcar1, as they both have that model name. If you want to be more specific, "+
        "use the tags for the modeler's name like \"union\" or \"magnum\". Keep in mind, it can only see the text after the last slash of a model path, excluding the .mdl part. Example: You can spawn the car \"models/magtrains/boxcar_50.mdl\" with "+
        "\".sp 1 mdltag boxcar_50\", but not \".sp 1 mdltag boxcar_50.mdl\" or \".sp 1 mdltag models/magtrains/boxcar_50\". "+ 
        "You can specify whether a car is loaded or not with the \"loaded\" or \"empty\" tags. Keep in mind loaded cars are much heavier than empty ones! "+
        "\"janky\" allows easily derailed cars to be spawned. They're not as usable, but they still exist. Highly recommended for \"preera\" and \"10s\" eras.")
        
        playsound("ding")
        hideChat(HIDECHAT) 
        
    }elseif((LSC:explode(" ")[1,string] == ".help" | LSC:explode(" ")[1,string] == "!help") & LSC:explode(" ")[2,string] == "tags"){
        
        printS("Here's how tags and searching work in detail:\n"+
        "Every car has tags. When you spawn a train, the tags you search are used to find cars. Tags are grouped into 11 blocks, each of which is examined separately when searching. This means that if you do \".sp 10 box 70s grove\", you're actually searching 3 "+
        "separate categories: car type, era, and modeler. If no tags of a certain category are used in a search, the system fills in the default tags. This means the spawner is more specific by default, and can cause issues when you're searching for a car outside "+
        "the default tags. For instance, when you do \".sp 5 coal loaded\", it won't spawn cars outside the default era like Hank's bethgon. Doing \".sp 5 coal_gondola loaded hank\" won't fix it either, as the default era still excludes those cars from the "+
        "search. Instead, do \".sp 5 coal loaded 90s\" to specify an era and get the car you need. Alternatively, you can do add \"anytime\" to the search to ignore era alltogether, though this will produce very odd trains like Nodef. There are a number of "+
        "other \"any\" tags, such as \"anywhere\" for locale, \"anyone\" for modeler (not to be confused with the anyone991 tag for Anyone's models), \"anytype\" for car type, \"anykind\" for stock type (like freight or MOW), and \"anydetail\" for detail level.")
        playsound("ding")
        hideChat(HIDECHAT) 
         
    }elseif(LSC:explode(" ")[1,string] == ".addons" | LSC:explode(" ")[1,string] == "!addons"){
        
        printS("Here's a link to the FC&N Server Collection\n"+
        "It should contain the textures and models required.\n"+
        "http://steamcommunity.com/sharedfiles/filedetails/?id=390798140\n"+
        "Hit the Subscribe All button, and close Garry's Mod.\n"+
        "Re-launch the game, let the addons download, then rejoin!")
        playsound("ding")
        hideChat(HIDECHAT) 
        
    }elseif(LSC:explode(" ")[1,string] == ".faq" | LSC:explode(" ")[1,string] == "!faq"){
        
        printS("Here's some common questions answered: \n"+
        "Q: Can it spawn RSG/2ft? A: Yes! Do .mode rsg or .mode 2ft.\n"+
        "Q: Can it spawn Unit Trains? A: Yep. Read the .help adv for instructions.\n"+
        "Q: Will it be able to spawn holos? A: Not until I convert the whole E2 to a Lua addon. Probably not soon\never.\n"+
        "Q: Can I add my own cars, like Passenger? A: Yes. Follow the examples and key near the top (line 140 or so)\n"+
        "Q: What is planned for the next update? A: 0.96 will have complex car support for wellcars and UK wagons, as well as extended coupler tags.")
        playsound("ding")
        hideChat(HIDECHAT) 
        
    }elseif(LSC:explode(" ")[1,string] == ".contact" | LSC:explode(" ")[1,string] == "!contact"){
        
        printS("Want to contact me? Report a bug? Got feedback? Here you go!\n"+
        "https://steamcommunity.com/profiles/76561198077247660/\n"+
        "Discord: Sir Metaladon#1539")
        playsound("ding")
        hideChat(HIDECHAT) 
        
    }elseif(LSC:explode(" ")[1,string] == ".tags" | LSC:explode(" ")[1,string] == "!tags"){
        
        printS("Tags are separated into groups based on exclusivity:\n"+
        "The 1st group is Car Type, like boxcar or tanker.\n"+
        "The 2nd group is Era, like 2020s, 1930s, or preera (civil war).\n"+
        "The 3rd group is Modeler, like gsgrove or metaladon.\n"+
        "The 4th group is Suspension/bolsters, just old or new.\n"+
        "The 5th group is Car Role, such as manifest, buffer, and mow.\n"+
        "The 6th group is Stability. Some unstable cars are marked janky.\n"+
        "The 7th group is Detail; ldetail, mdetail, and hdetail.\n"+
        "The 8th group is Country, like usamerican and ussrussian.\n"+
        "The 9th group is Special, tags like nodef and mdltag.\n"+
        "The 10th group is Load, just loaded or empty.\n"+
        "The 11th group is Modelpath, use with mdltag tag.\n"+
        "Do .taglist for a massive list of almost ALL possible tags.")
        playsound("ding")
        hideChat(HIDECHAT) 
        
    }elseif(LSC:explode(" ")[1,string] == ".settings" | LSC:explode(" ")[1,string] == "!settings"){
    
        printS("Here's a section explaining your current settings:\n"+
        "Gauge type is currently "+Mode+".\n"+
        "WEIGHTMUL is currently "+WEIGHTMUL*2+", so average loaded car weight is "+WEIGHTMUL*200+" tons.\n"+
        "LOADCHANCE is currently "+LOADCHANCE+", so chance to be loaded is a "+round(LOADCHANCE*100)+"% chance.\n"+
        "LOADVAL is currently "+LOADVAL+", so the load percentage is "+LOADVAL*100+"%.\n"+
        "SAFEMODE is currently "+select(SAFEMODE+1,"off, so the e2 is faster","on, so the e2 is slower")+".\n"+
        "SPWNBHVIOR is currently in "+select(SPWNBHVIOR+1,"straight-line","track-following")+" mode.\n"+
        "STACKSIZE is currently "+STACKSIZE+", so cuts are typically "+STACKSIZE*(2/5)+" cars long.")
        playsound("ding")
        hideChat(HIDECHAT) 
        
    }elseif(LSC:explode(" ")[1,string] == ".taglist" | LSC:explode(" ")[1,string] == "!taglist"){
        
        Taglist = 1
        printS("Here goes!")
        playsound("ding")
        hideChat(HIDECHAT) 
        
    }elseif(LSC:explode(" ")[1,string] == ".default" | LSC:explode(" ")[1,string] == "!default"){
        
        printS("Here's the default tags.")
        
        for(X = 1, DEFAULTAGS:count()){
            
            Print = Print:add(DEFAULTAGS[X,array])
            
        }
        hideChat(HIDECHAT) 
        
    }elseif((LSC:explode(" ")[1,string] == ".bogie" | LSC:explode(" ")[1,string] == "!bogie")){
    
        local Search = LSC:explode(" ")[2,string]+" "+LSC:explode(" ")[3,string]+" "+LSC:explode(" ")[4,string]:trim()
        
        local Bd = calibogie(Search+" "+Mode:lower())
        
        if(Bd[1,string] != "" & Search:trim() != ""){
        
            printS("Forced the bogie type to "+Bd[1,string])
            Forced = Bd[1,string]
            playsound("ding")
            
        }else{
            
            printS("Reset bogie type to \"automatic\"")
            Forced = ""
            playsound("ding")
            
        }
        
        hideChat(HIDECHAT) 
          
    }elseif(LSC:explode(" ")[1,string] == ".restart" | LSC:explode(" ")[1,string] == "!restart"){
    
        Instr:pushTable(table("restart"))
        CommandStack:pushString(Time+" restart")

        playsound("ding")
        hideChat(HIDECHAT) 
        
    }elseif(LSC:explode(" ")[1,string] == ".flip" | LSC:explode(" ")[1,string] == "!flip"){
    
        Instr:pushTable(table("flip"))
        CommandStack:pushString(Time+" flip")

        playsound("ding")
        hideChat(HIDECHAT) 
        
    }elseif(LSC:explode(" ")[1,string] == ".dismiss" | LSC:explode(" ")[1,string] == "!dismiss"){
    
        Instr:pushTable(table("goto",vec(0)))
        CommandStack:pushString(Time+" goto 0")

        playsound("ding")
        hideChat(HIDECHAT) 
        
    }elseif(LSC:explode(" ")[1,string] == ".summon" | LSC:explode(" ")[1,string] == "!summon"){
    
        Instr:pushTable(table("goto",owner():aimPos()+vec(0,0,50),owner():eyeAngles():yaw()+90))
        CommandStack:pushString(Time+" goto "+owner():aimPos()+vec(0,0,50)+" "+(owner():eyeAngles():yaw()+90))

        playsound("ding")
        hideChat(HIDECHAT) 
        
    }elseif(LSC:explode(" ")[1,string] == ".delete" | LSC:explode(" ")[1,string] == "!delete"){
        
        printColor(toRGB(vec(Hue,TXCLR:x(),TXCLR:y())),"[CCC] Deleting the carspawner E2... Good luck on your travels!")
        hideChat(HIDECHAT) 
        SCP:propDelete()
        Head:propDelete()
        selfDestruct()
        
    }elseif(LSC:explode(" ")[1,string] == ".nuke" | LSC:explode(" ")[1,string] == "!nuke"){
        
        printColor(toRGB(vec(Hue,TXCLR:x(),TXCLR:y())),"[CCC] Nuking the consist and carspawner E2 from orbit. Just to be sure!")
        hideChat(HIDECHAT) 
        propDeleteAll()
        selfDestructAll()
        
    }elseif((LSC:explode(" ")[1,string] == ".clear" | LSC:explode(" ")[1,string] == "!clear") & (OpsMode == 0 | owner():aimEntity() == Head)){
        
        Instr = table()
        Instr:pushTable(table("respawn",Head:pos(),Head:angles(),Head:model()))
        CommandStack:pushString(Time+" cleared "+Instr:count())
        CommandStack:pushString(Time+" respawn "+Head:pos()+" "+Head:angles()+" "+Head:model())
        propDeleteAll()
            
        hideChat(HIDECHAT) 
        
    }elseif(LSC:explode(" ")[1,string] == ".stats" | LSC:explode(" ")[1,string] == "!stats"){
        
        printS("Here's the stats for the currently spawned cars:")
        printS((ID-1)/3 + " cars, " + round(TotalTrainLength/12) + " feet + " + Spacer + " feet of spacer, " + round(TotalTrainWeight/907) + " tons")
        playsound("ding")
        hideChat(HIDECHAT) 
        
    }elseif(LSC:explode(" ")[1,string] == ".commandlist" | LSC:explode(" ")[1,string] == "!commandlist"){
        
        printS("A full list of commands:\n"+
        ".sp [number of cars/tons/feet] [tag] [tag] etc (Spawns cars. Add a t at the end of the first number for tons, and ft for feet. Add a , divider between tags to specify groups of distinct tags.)\n"+
        ".rem [number of cars/tons/feet] (Removes cars. Add a t at the end of the number for tons, and ft for feet.)\n"+
        ".kill (Stops the spawning/deleting procedure)\n"+
        ".help (Basic tutorial on spawning cars)\n"+
        ".help adv (Shows adv usage and tips)\n"+
        ".help tags (Explains how tags work specifically)\n \n"+
                
        ".faq (Frequently Asked Questions about the E2 and it's capabilities)\n"+
        ".settings (Explains the current settings of the E2)\n"+
        ".updates (Links to the Github for updates and other versions)\n"+
        ".addons (Links to FC&N Workshop collection.)\n"+
        ".contact (Shows Steam and Discord contact info)\n"+
        ".changelog (Shows all the changes since the last version)\n"+
        ".commandlist (You know what it does)\n \n"+
                
        ".stats (Gives the current number of cars, train length, and weight)\n"+
        ".tags (Prints the types of tags)\n"+
        ".taglist (Prints literally all of the tags. (except model tags))\n"+
        ".default (Prints the default tags)\n \n"+
                
        ".restart (Resets the E2 for a new train and forgets existing cars)\n"+
        ".flip (Similar to .restart, but also flips the spawner 180 degrees)\n"+
        ".dismiss (Sends the carspawner away into dormancy, for use later)\n"+
        ".summon (Brings the carspawner to the cursor)\n"+
        ".mode [gauge] (Sets the gauge of the spawner)\n"+
        ".bogie [arg1] [arg2] etc (Forced the bogie type based on the input. Blank input resets to normal)\n"+
        ".space [number of feet] (Adds phantom space on the end of the train for use as a gap for inserting mid-train helpers, 0 resets the spacer)\n"+
        ".delete (Deletes the E2, but not the train)\n"+
        ".clear (Removes all spawned cars, but not the e2 itself. Use .rem 10000 to remove all cars in the current train instead)\n"+
        ".nuke (Deletes the E2 AND the train)")
        
        playsound("ding")
        hideChat(HIDECHAT) 
        
    }elseif(LSC:explode(" ")[1,string] == ".updates" | LSC:explode(" ")[1,string] == "!updates"){
        
        printS("Here's how to get the latest version:\n"
        +"Go to the github, go to latest_version folder, then click on the file convenient_classic_carspawner X.XXX. Select the RAW option.\n"
        +"Rightclick, select Save As, then download the file as the normal name.\n"
        +"Move the file to your Steam directory, in this spot: steamapps/common/garrysmod/garrysmod/data/expression2\n"
        +"Hit Refresh on the E2 sidebar ingame.\n"
        +"https://github.com/SirMetaladon/convenient-classic-carspawner/tree/master/latest-version")
        playsound("ding")
        hideChat(HIDECHAT) 
        
    }elseif(LSC:explode(" ")[1,string] == ".changelog" | LSC:explode(" ")[1,string] == "!changelog"){
        
        printS("Here's the changelog since the last version (0.955):\n"
        +"Adjusted values with Centerbeams and Coal Gondolas.\n"
        +"Added the Silverside Gondola.\n"
        +"Added a system for remembering previous spawn commands, as to not re-do work.\n"
        )
        
        playsound("ding")
        hideChat(HIDECHAT) 
        
    }elseif(LSC:explode(" ")[1,string] == ".space" | LSC:explode(" ")[1,string] == "!space"){
        
        if(LSC:explode(" ")[2,string]:toNumber() > 0){
            
            printS("Queued " + LSC:explode(" ")[2,string]:toNumber() + " feet of mid-helper spacer.")
            Instr:pushTable(table("spc",LSC:explode(" ")[2,string]:toNumber()))
            CommandStack:pushString(Time+" spc "+LSC:explode(" ")[2,string]:toNumber())
            
        }else{
            
            Instr:pushTable(table("spc",-Spacer))
            CommandStack:pushString(Time+" spc -Spacer "+Spacer)
            printS("Queued reset of the spacer from " + Spacer + " feet to 0.")
            
        } 

        playsound("space")
        hideChat(HIDECHAT) 
        
    }elseif(LSC:explode(" ")[1,string] == ".kill" | LSC:explode(" ")[1,string] == "!kill"){
        
        printS("Killed the process!")
        LyrX = LyrY = LyrZ = 1
        endSC()
        Forced = ""
        LyrC = Phase = RandT = ForeOffset = 0
        Buffer = array()
        Instr = table("donezo",DonezoString)
        CommandStack:pushString(Time+" cleared via kill")
        hideChat(HIDECHAT) 
        playsound("kill")
        soundStop(2)
        
    }
    
}else{ #Timer Events

    if(clk("sc")){ #When the scan clk goes off
        
        local Dist = (SCP:pos() - SCLast):length() #Calculate the added distance
        
        if(((rails(SCP)) & !(Dist < 0.9*(SCINT*(SCSpeed/1000))))|FUNMODE){ #If the system hasn't hit a wall or is off the rails
            
            SCTrav += (SCP:pos() - SCLast):length()
            SCLast = SCP:pos()
            SCGraph:pushArray(array(round(SCP:pos(),2),round(SCP:angles()),round(SCTrav,2)))
            SCP:propSetVelocity(SCP:right()*-SCSpeed)
            timer("sc",SCINT)
            
        }else{ #if derailed or stopped, terminate with a different code
          
            endSC()
            SCProc = 3
            
        }
        
    }elseif(clk("reset")){
        
        reset()
        
    }elseif(clk("thwart")){
        
        SCP:propFreeze(0)
        
    }elseif(clk("delay")){
        
        Delay = 0
        
    }elseif(clk("startsc")){ #After the scanner settles
        
        SCLast = SCP:pos()
        SCGraph = table()
        SCGraph:pushArray(array(round(SCP:pos(),2),round(SCP:angles()),SCTrav))
        SCP:propSetVelocity(SCP:right()*-SCSpeed)
        timer("sc",SCINT) #Start the recurring timer
        SCP:setAlpha(255*VISIBLESCAN)
        
    }elseif(clk("freeze")){
        
        Head:propFreeze(1)
        
        if(LastBogie:isValid()){
            
            Head:constraintBreak(LastBogie)
            
        }
        
    }elseif(clk("disconnect")){
        
        if(Spawned[(ID-2):toString(),entity]:isValid()){
        
            #SCP:constraintBreak(Spawned[(ID-2):toString(),entity])
            noCollideAll(Spawned[(ID-2):toString(),entity],0)
            
        }
        
        if(LastBogie:isValid()){
            
            #SCP:constraintBreak(LastBogie)
            noCollideAll(LastBogie,0)
            
        }
        
    }elseif(httpClk()){
        
        local Data = httpData():explode("|")[1,string]:trim()
        
        if(Data == VERSION){
            
            printS("You're up to date!")
            
        }elseif(VERSION:toNumber() < Data:toNumber()){
            
            printS("Outdated version detected! Do .updates to get the link.")
            holoEntity(1):soundPlay(0,0,"buttons/combine_button_locked.wav")
            holoEntity(0):soundPlay(1,0,"vo/engineer_moveup01.mp3")
            
        }elseif(VERSION:toNumber() > Data:toNumber()){
            
            printS("This is a developer version. Do not distribute.")
            
        }
        
        stoptimer("timeout")
        
    }elseif(clk("timeout")){
        
        printS("Could not retrieve version number. Refresh the E2 to check again!")
        holoEntity(1):soundPlay(0,0,"vo/engineer_negativevocalization01.mp3",0)
        
    }elseif(clk("tpcenter")){
        
        entity():setPos(vec(0,0,10))
        
    }elseif(dsClk("populate")){
        
        OpsMode = 1
    
        local Tbl = dsGetTable()
    
        if(Tbl:count()){
            
            for(X = 1,Tbl:count()-1){
                
                local Data = Tbl[X:toString(),array]
                
                if(Data[1,string] == "summon"){
                    
                    CommandStack:pushString(Time+" summon via populate")
                    Instr:pushTable(table("goto",Data[2,vector],Data[3,number],1))
                    
                }else{
                
                    Instr:pushTable(table("clean"))
                    Instr:pushTable(table("sp",Data[1,string],Data[2,vector],Data[3,string]))
                    
                    CommandStack:pushString(Time+" clean via pop")
                    CommandStack:pushString(Time+" pop sp "+Data[1,string])
                    
                }
                
            }
            
            DonezoString = Tbl[Tbl:count():toString(),string]
            
            if(Tbl:count() > 2 | Tbl["1",array][1,string] != "summon"){Instr:pushTable(table("donezo",DonezoString))}
            
            playsound("spawn")
            printS("Queued population.")
            
        }
        
    }elseif(clk("plot")){
        
        holoCreate(HID,SCP:pos(),vec(1),ang(0),vec(255*TicksLeft/10,0,0),"cube")
        HID++
        TicksLeft--
        if(TicksLeft > 0){
            
            timer("plot",30)
            
        }
        
    }
    
}

#Instructions Blocks

if(Instr:count() & Chew > 1+(AddModels:count()/INFOPERMODEL & clk()) & !Delay){

    if(Instr[1,table][1,string] == "sp" & safe()){ #If the current command input is .sp
        
        if(!LyrC){ #If it's the first iteration
            
            holoEntity(1):soundPlay(2,100,"ambient/computer_working2.wav",0)
            soundPitch(2,250)
            
            if(holoEntity(0):parent():isValid()){
                    
                if(Mode == "5ft"){Acc = -90}else{Acc = 0}
                
                SetPos = Head:pos()
                SetAng = ((round(((Head:angles():yaw()+ Acc+ 90)/180)*16)/16)*180)
            
                holoUnparent(0)
                
            }
            
            #Insert now has a blank instruction in it relative to the spawning mode type
    
            PoolTrack = ""
            Tags = table()
            LyrC = LyrX = LyrY = LyrZ = 1
            LST = ""
            Phase = 0
            
            for(X = 1, Instr[1,table][2,string]:explode(" "):count()-2){ #Ammend the input to be more streamlined
                
               LST = LST +  " " + Instr[1,table][2,string]:explode(" ")[X+2,string]
            
            }
            
            Instr[1,table][2,string] = LST:trim()
            CommandStack:pushString(Time+" modified LST")
            
            if(SearchArchive[LST:trim(),array]:count() != 0){
                
                Instr[1,table] = table("spwn",Instr[1,table][3,vector]:x(),Instr[1,table][3,vector]:y(),Instr[1,table][3,vector]:z(),SearchArchive[LST:trim(),array],Instr[1,table][4,string])
                    
                printS("Found " + (Insert[5,array]:count()-2)/2 + " car variants matching searched tags.")
                CommandStack:pushString(Time+" added SPWN via SearchArchive")
                LyrC = 0
                
            }else{
            
                Insert = table("spwn",Instr[1,table][3,vector]:x(),Instr[1,table][3,vector]:y(),Instr[1,table][3,vector]:z(),array(0),Instr[1,table][4,string])
                
            }
            
        }
        
        if(LyrC){
            
            while(LyrC <= Instr[1,table][2,string]:explode(","):count() & safe()){ #While Counter 0 <= the number of comma-separated segments of the command
                
                if(!Phase){ #If it's the first part of the process
                    
                    Phase = LyrX = LyrY = LyrZ = 1
                    NoDef = 0
                    MdlTag = 1
                    
                    if(Instr[1,table][2,string]:explode(",")[LyrC,string]:find("mdltag")){#Account for Nodef and MDL
                        
                        MdlTag = 0
                        NoDef = 1
                        
                    }elseif(Instr[1,table][2,string]:explode(",")[LyrC,string]:find("nodef")){ 
                        
                        NoDef = 1
                        
                    }
                    
                }
                
                if(Phase == 1){ #Phase 1: What are the Valid Tags?
                    
                    while(LyrX <= Instr[1,table][2,string]:explode(",")[LyrC,string]:explode(" "):count() & safe()){ #While Counter 1 <= the number of space-separated segments in the current comma segment
                        
                        if(Instr[1,table][2,string]:explode(",")[LyrC,string]:explode(" ")[LyrX,string] == ""){ #Skip if the tag is (somehow) empty
                            
                            LyrX++
                            LyrY = 1
                            TagsBefore = TagCount
                            continue
                            
                        }
                        
                        while(LyrY <= TAGDATA:count()-MdlTag & safe()){ #While Counter 2 <= the number of potential tag blocks
                            
                            while(LyrZ <= TAGDATA[LyrY,array]:count() & safe()){ #While Counter 3 <= the tags in the current tag block
                                
                                if(TAGDATA[LyrY,array][LyrZ,string]:find(Instr[1,table][2,string]:explode(",")[LyrC,string]:explode(" ")[LyrX,string])){ #If this input is found within the currently selected tag in the tag block
                                    
                                    if(TAGDATA[LyrY,array][LyrZ,string] == "loaded" | TAGDATA[LyrY,array][LyrZ,string] == "empty"){ #Workaround for Invisiload
                                        
                                        Tags[toString(LyrY),array] = Tags[toString(LyrY),array]:add(array("invisiload"))
                                        
                                    }
                                    
                                    Tags[toString(LyrY),array] = Tags[toString(LyrY),array]:add(array(TAGDATA[LyrY,array][LyrZ,string])) #Add the tag to the Tags output
                                    TagCount++
                                    
                                }
                                
                                LyrZ++
                                 
                            }
                            
                            if(LyrZ > TAGDATA[LyrY,array]:count()){ #Counter 3 terminator
                                
                                LyrY++
                                LyrZ = 1
                                
                                
                            }
                            
                        }
                        
                        if(LyrY > TAGDATA:count()-MdlTag){ #Counter 2 terminator
                            
                            if(TagCount == TagsBefore){ #If no tags were added to the list, print a minor error
                                
                                printS("Couldn't find a tag matching \"" + Instr[1,table][2,string]:explode(",")[LyrC,string]:explode(" ")[LyrX,string] + "\"")
                                playsound("hmm")
                                
                            }
                            
                            LyrX++
                            LyrY = 1
                            TagsBefore = TagCount
                            
                        }
                        
                    }
                    
                    if(Tags:count() == 0 & LyrX > Instr[1,table][2,string]:explode(",")[LyrC,string]:explode(" "):count()){ #If no tags were selected overall when Counter 1 terminates
        
                        printS("No tags selected!") #Print a minor error, stop scanning, and reset things.
                        endSC() 
                        playsound("err")
                        soundStop(2)
                        Phase = 0
                        Instr:remove(1)
                        CommandStack:pushString(Time+" finished SP via no tags selected")
                        LyrX = LyrY = LyrZ = 1
                        TagsBefore = TagCount = LyrC = 0
                        break
                        
                    }elseif(LyrX > Instr[1,table][2,string]:explode(",")[LyrC,string]:explode(" "):count()){ #If we have found tags and terminated Counter 1, continue to Phase 2
                    
                        Phase = 2
                        LyrX = LyrY = LyrZ = 1
                        TagsBefore = TagCount = 0
                        
                        if(!NoDef){ #If !Nodef, apply default tags
                            
                            for(LyrY = 1, TAGDATA:count()-MdlTag){ #For every tag block
                                
                                if(!Tags[toString(LyrY),array]:count()){ #If tag block is uninhabited, populate with default tags
                                    
                                    if(LyrY == 2 & Mode != "2ft"){
                                        
                                        printS("No era specified! Forced era to \""+DEFAULTAGS[LyrY,array][1,string]+"\".")
                                        Tags[toString(LyrY),array] = DEFAULTAGS[LyrY,array]
                                        
                                    }elseif(LyrY != 2 | Mode != "2ft"){
                                        
                                        Tags[toString(LyrY),array] = DEFAULTAGS[LyrY,array]
                                        
                                    }
                                                
                                }
                                
                            }
                            
                        }
                        
                        Tags[toString(Tags:count()+1),array] = array(Mode:lower())
                        
                        if(FUNC & MdlTag){ #Workaround for functional tag
                        
                            Tags[toString(6),array] = Tags[toString(6),array]:add(array("functional"))
                            
                        }
                        
                        TgKys = prunekeys(Tags)
                        
                        if(!DISPLAYTAGS){printS("Applied " + metacount(Tags) + " tags.")}else{printS("Applied " + metacount(Tags) + " tags. " + list(Tags))}
                        
                    }
                    
                }
                
                if(Phase == 2){ #Phase 2: What are the Valid Cars?
                    
                    while(LyrX <= MODELS:count()/INFOPERMODEL & safe()){ #While Counter 1 <= the number of car options
            
                        while(LyrY <= TgKys:count() & safe()){ #While Counter 2 <= the number of tag blocks
            
                            while(LyrZ <= Tags[TgKys[LyrY,string],array]:count() & safe()){ #While Counter 3 <= the number of tags in the tag block
                                                        
                                if(MODELS[LyrX*INFOPERMODEL-6,string]:find(Tags[TgKys[LyrY,string],array][LyrZ,string]) ||
                                (TgKys[LyrY,string] == "11" && MODELS[LyrX*INFOPERMODEL-8,string]:explode("/")[MODELS[LyrX*INFOPERMODEL-8,string]:explode("/"):count(),string]:find(Tags[TgKys[LyrY,string],array][LyrZ,string])) ||
                                (Tags[TgKys[LyrY,string],array][LyrZ,string] == TAGOVERRIDES[TgKys[LyrY,string]:toNumber(),string] && TAGOVERRIDES[TgKys[LyrY,string]:toNumber(),string] != "")){
                                    
                                    Flag = 1
                                    break
                                    
                                }else{
                                
                                    LyrZ++
                                    
                                }
                                
                            }
                            
                            
                            
                            if(LyrZ > Tags[TgKys[LyrY,string],array]:count()){ #If no matching tags in that block were found and it ran for more than 0 iterations, skip this car
                                
                                Flag = -1
                                break
                                
                            }elseif(Flag){ #If the system has found at least 1 tag, advance to the next tag block
                                
                                Flag = 0
                                LyrZ = 1
                                LyrY++
                                
                            }
            
                        }
            
                        if(LyrY > TgKys:count()){ #If Counter 2 is concluded without breaking:
                            
                            local CarLoaded = 0
                            local CarEmpty = 0
                            
                            for(LyrZ = 1,Tags[toString(10),array]:count()){ #Search for load tags
                                
                                if(Tags[toString(10),array][LyrZ,string] == "loaded"){
                                    
                                    CarLoaded = 1
                                    
                                }
                                
                                if(Tags[toString(10),array][LyrZ,string] == "empty"){
                                    
                                    CarEmpty = 1
                                    
                                }
                                
                            }
                            
                            if((CarLoaded | (!CarEmpty & !CarLoaded)) & !MODELS[LyrX*INFOPERMODEL-(INFOPERMODEL-1)+2,string]:find("empty")){
                            
                                if(!PoolTrack:find(" " + LyrX+"-1 ")){ #If this car/load hasn't been found before, add it to the list!
                              
                                    Insert[5,array] = Insert[5,array]:add(array(Insert[5,array][1,number],vec2(LyrX,1)))
                                    Insert[5,array][1,number] = Insert[5,array][1,number] + (MODELS[LyrX*INFOPERMODEL-(INFOPERMODEL-2),number]^(DELT))*LOADCHANCE
                                    PoolTrack = PoolTrack + " " + LyrX+"-1 "
                                    
                                }
                                
                            }
                            
                            if((CarEmpty | (!CarEmpty & !CarLoaded)) & !MODELS[LyrX*INFOPERMODEL-(INFOPERMODEL-1)+2,string]:find("loaded")){
                                
                                if(!PoolTrack:find(" " + LyrX+"-0 ")){ #If this car/load hasn't been found before, add it to the list!
                              
                                    Insert[5,array] = Insert[5,array]:add(array(Insert[5,array][1,number],vec2(LyrX,0)))
                                    Insert[5,array][1,number] = Insert[5,array][1,number] + (MODELS[LyrX*INFOPERMODEL-(INFOPERMODEL-2),number]^(DELT))*(1-LOADCHANCE)
                                    PoolTrack = PoolTrack + " " + LyrX+"-0 "
                                    
                                }
                                
                            }
                                
                            LyrX++
                            LyrY = 1
                            
                        }elseif(Flag == -1){ #If no tags have been found for this iteration and it wasn't finished early, skip the car
                        
                            LyrX++
                            LyrY = 1
                            LyrZ = 1
                            Flag = 0
                            
                        }
                        
                    }
                
                    if(LyrX > MODELS:count()/INFOPERMODEL){ #If Counter 1 is concluded, reset everything
                        
                    
                        LyrX = LyrY = LyrZ = 1
                        LyrC++
                        Phase = 0
                        
                    }
                    
                }
                
            }
            
            if(LyrC > Instr[1,table][2,string]:explode(","):count()){ #If Counter 0 is terminated, finalize the instructions
                
                Insert[5,array] = Insert[5,array]:add(array(Insert[5,array][1,number])) #Finish the randomizer block
                
                playsound("done")
                soundStop(2)
                
                if(Insert[5,array]:count() > 2){ #If the tag bank has tags, success!
                    
                    SearchArchive[Instr[1,table][2,string],array] = Insert[5,array]:clone()
                    
                    printS("Found " + (Insert[5,array]:count()-2)/2 + " car variants matching searched tags.")
                    Instr[1,table] = Insert
                    CommandStack:pushString(Time+" added SPWN")
                    
                }else{ #Else, print an error
                    
                    printS("No cars exist with those tags! Do \".help tags\" to see what might have gone wrong.") 
                    
                    Instr:remove(1)
                    
                    endSC()
                    CommandStack:pushString(Time+" exited SP via no tags 2")
                    
                }
                
                LyrC = 0
                
            }
            
        }
        
    }elseif(Instr[1,table][1,string] == "clean" & safe()){
    
        if((!rails(Head) & SPWNBHVIOR) & !FUNMODE){ #If it's derailed 
                
            playsound("err")
            soundStop(2)
            printS("Carspawner is not on the rails! Process aborted.")
            Instr:remove(1)
            Instr:remove(1)
            
            CommandStack:pushString(Time+" removed 2 via norails")
            
        }else{
            
            local Br = 0
        
            for(X = 1,Spawned:count()){
                
                if(!Spawned[X:toString(),entity]:isValidPhysics()){
                    
                    printS("Removed entities detected! Please use .rem [number] instead of Z.")
                    Instr:insertTable(2,table("rem",ceil((Spawned:count()-(X-1))/3),0,0))
                    CommandStack:pushString(Time+" rem via clean")
                    Br = 1
                    break
                    
                }
                
            }
            
            if(SPWNBHVIOR){
                
                Instr:insertTable(2+Br,table("scan")),CommandStack:pushString(Time+" scan")
                
                local I = Spawned[toString(ID-2),entity]
                
                
                    
            }
            
            CommandStack:pushString(Time+" stock removal of clean")
            Instr:remove(1)
            
        }
        
    }elseif(Instr[1,table][1,string] == "scan" & safe()){
            
        local I = Spawned[toString(ID-2),entity]
        if(ID == 1){I = Head}
        
        Head:propFreeze(1)
        #SCP:propFreeze(0)
         
        SCProc = 1
        SCTrav = 0
        
        enableConstraintUndo(0)
        
        if(SCP:isValid()){
            
            noCollideAll(SCP,0)
            noCollideAll(I,1)
            noCollideAll(LastBogie,1)
            
            #if(I:isValid()){noCollide(SCP,I)}
            #if(LastBogie:isValid()){noCollide(SCP,LastBogie)}
            
            timer("disconnect",500)
            
        }
        
        enableConstraintUndo(1)
        
        SCP:setPos(I:pos()+vec(0,0,5))
        SCP:setAng(I:angles()-ang(0,calibogie(I:model())[4,number],0))
        
        ForeOffset = TotalTrainLength - ((modelLength(CarTs[(ID-1)/3,number])-MODELS[CarTs[(ID-1)/3,number]+3,vector4]:x())/2)*(I != Head)
        
        TicksLeft = 10
        #timer("plot",30) #someday I might need this... some day
        
        SCP:propFreeze(1)
        
        timer("thwart",15)
        
        timer("startsc",200) #Starting the process
        
        CommandStack:pushString(Time+" scan end")
        Instr:remove(1)
    
    }elseif(Instr[1,table][1,string] == "spwn" & safe() & maxquota() > 5000){
        
        if(!RandT){
            
            while(Buffer:count() < STACKSIZE & safe()){
            
                RandT = random(0.00001,Instr[1,table][5,array][1,number])
                   
                for(X = 1,(Instr[1,table][5,array]:count()-2)/2){
                    
                    if(Instr[1,table][5,array][(X*2)+2,number] > RandT){
                        
                        Buffer:pushVector2(vec2((Instr[1,table][5,array][X*2+1,vector2]:x()*INFOPERMODEL)-(INFOPERMODEL-1),Instr[1,table][5,array][X*2+1,vector2]:y()))
                        break
                        
                    }
                    
                }
                
            }
            
            NextCar = findnext(TrainType)
            
            local Rn = random() > ENDC
            
            if(NextCar &  !(Same > TOOLONG & Rn)){
                
                RandT = Buffer[NextCar,vector2]:x()
                TrainType[3,number] = Loaded = Buffer[NextCar,vector2]:y()
                TrainType[1,string] = miniresolve(RandT)
                Buffer:remove(NextCar)
                
            }else{
                
                Same = 0
                local R = randint(1,Buffer:count())
                RandT = Buffer[R,vector2]:x()
                Loaded = Buffer[R,vector2]:y()
                Buffer:remove(R)
                TrainType = resolve(RandT):add(array(Buffer[R,vector2]:y()))
                
            }
            
        }
        
        StartID = ID
        local ID2 = 0
    
        if(SCTrav < (-ForeOffset + TotalTrainLength + Spacer*12 + modelLength(RandT))+100 & SPWNBHVIOR){
            
            if(SCProc == 3){
            
                printS("Reached the end of the valid track (scanner derailed or stopped)\nThe scanner randomly derails on some corners, just go again.")
                
                Instr:remove(1)
                CommandStack:pushString(Time+" spwn endoftrack")
                Buffer = array()
                RandT = 0
                
            }
            
        }elseif(minquota() > 3000){
        
            if(!SpawnPhase){

                if(Forced != ""){BogieData = calibogie(Forced)}else{BogieData = calibogie(getBogie(MODELS[RandT+2,string]))} #Set the bogie data
                
                local B1 = locate(-ForeOffset + TotalTrainLength + Spacer*12 + (modelLength(RandT)-MODELS[RandT+3,vector4]:x())/2) #Get the bogie positions
                local B2 = locate(-ForeOffset + TotalTrainLength + Spacer*12 + (modelLength(RandT)-MODELS[RandT+3,vector4]:x())/2 + MODELS[RandT+3,vector4]:x())
                 
                local Dff = B2[1,vector] - B1[1,vector]
                
                SlopeAng = atan(Dff:z()/flat(Dff):length())
                SlopeAxis = flat(Dff):rotateAroundAxis(vec(0,0,1),-90) #Calculate some other values
                
                local FramePos = B1[1,vector] + Dff/2 + vec(0,0,MODELS[RandT+3,vector4]:y()-Railhead+BogieData[3,number]):rotateAroundAxis(SlopeAxis,SlopeAng)
                local FrameAng = flat(Dff):rotateAroundAxis(vec(0,0,1),MODELS[RandT+3,vector4]:z()+90+(randint(0,1)*180)):toAngle():rotateAroundAxis(SlopeAxis,SlopeAng)
                local B1Pos = B2[1,vector]+vec(0,0,BogieData[2,number]-Railhead):rotateAroundAxis(SlopeAxis,SlopeAng)
                local B1Ang = ang(0,B2[2,number]+BogieData[4,number],0):rotateAroundAxis(SlopeAxis,SlopeAng)
                local B2Pos = B1[1,vector]+vec(0,0,BogieData[2,number]-Railhead):rotateAroundAxis(SlopeAxis,SlopeAng)
                local B2Ang = ang(0,B1[2,number]+BogieData[4,number],0):rotateAroundAxis(SlopeAxis,SlopeAng)
                
                validate(FramePos,FrameAng,B1Pos,B1Ang,B2Pos,B2Ang) #Validate all the vars (to catch THAT bug)
                 
                ID = ID + propCanCreate()
                Frame = Spawned[toString(StartID),entity] = propSpawn(MODELS[RandT,string],FramePos,FrameAng,1)
                noCollideAll(Frame,1)
                Frame:setMass(50000)
                ID2 = ID2 + !Frame:isValid()
                
                ID = ID + propCanCreate()
                Bogie1 = Spawned[toString(StartID+1),entity] = propSpawn(BogieData[1,string],B1Pos,B1Ang,1)
                Bogie1:setMass(50000)
                ID2 = ID2 + !Bogie1:isValid()
                
                ID = ID + propCanCreate()
                Bogie2 = Spawned[toString(StartID+2),entity] = propSpawn(BogieData[1,string],B2Pos,B2Ang,1)  
                Bogie2:setMass(50000)
                ID2 = ID2 + !Bogie2:isValid()
                
                if(ID2 & ID == StartID + 3){
                    
                    printS("Broken car \""+MODELS[RandT,string]+"\" detected! Spawning halted. This is probably because A: The server doesn't have the car model installed (do .addons for requirements) or B: The server has been running for longer than 12hrs, and addons have broken.")
                    Frame:propDelete()
                    Bogie1:propDelete()
                    Bogie2:propDelete()
                    
                    Spawned:remove(toString(StartID+2))
                    Spawned:remove(toString(StartID+1))
                    Spawned:remove(toString(StartID))
                    
                    ID = StartID
                    
                    LyrX = LyrY = LyrZ = 1
                    Phase = 0
                    Instr:remove(1)
                    CommandStack:pushString(Time+" spwn brokencar")
                    Buffer = array()
                    
                }elseif(ID != StartID + 3){
            
                    Frame:propDelete()
                    Bogie1:propDelete()
                    Bogie2:propDelete()
                    
                    Spawned:remove(toString(StartID+2))
                    Spawned:remove(toString(StartID+1))
                    Spawned:remove(toString(StartID))
                    
                    ID = StartID
                    
                }else{
                
                    SpawnPhase = 1
                    
                }
                
            }
            
        }
            
        if(SpawnPhase == 1 & minquota() > 3000){
            
            SpawnPhase = 0
            
            local As = table(array(Frame:id(),Bogie1:id(),Bogie2:id()),Instr[1,table][6,string])
        
            if(Instr[1,table][6,string] != ""){
                if(minquota() < 1){print("PREPARE FOR IMPACT; REPORT THIS BUG TO METALADON")}
                dsSend("markthis","operations",As:clone())
                
            }
            
            if(maxquota() < 1000){
                
                print("durrr ima die now -data signal stupidity")
                
            }
                     
            Frame:soundPlay((ID%4)+5,100,"doors/heavy_metal_stop1.wav")
            
            CarTs[(ID-1)/3,number] = RandT
            
            axis(Bogie1,Bogie1:massCenterL(),Frame,Frame:toLocal(Bogie1:massCenter()+vec(0,0,10)))
            
            axis(Bogie2,Bogie2:massCenterL(),Frame,Frame:toLocal(Bogie2:massCenter()+vec(0,0,10)))
            
            local PrevBogie = Spawned[toString(StartID-2),entity]
            local Invalid = 0
            
            if(!PrevBogie:isValidPhysics()){
                Invalid = 1
            }
            
            if(!Invalid & Bogie2:massCenter():distance(PrevBogie:massCenter()) < 400){
                
                RopeID++
                
                Offset = (PrevBogie:toWorld(PrevBogie:massCenterL())-Bogie2:toWorld(Bogie2:massCenterL()))/
                (PrevBogie:toWorld(PrevBogie:massCenterL())-Bogie2:toWorld(Bogie2:massCenterL())):length()
                if(Bogie2:isValid() & PrevBogie:isValid()){
                    
                    rope(RopeID,Bogie2,Bogie2:toLocal((Offset*50)+Bogie2:massCenter()),
                    PrevBogie,PrevBogie:toLocal((-Offset*50)+PrevBogie:massCenter()),0,0,"xx",1)
                    
                }
                CommandStack:pushString(Time+" rope attempt "+Bogie2:massCenter():distance(PrevBogie:massCenter())+" "+Bogie2:id()+",and "+PrevBogie:id())
                
            }
            
            if(OpsMode){
                
                Frame:setMass(10000)
                Bogie1:setMass(3500)
                Bogie2:setMass(3500)
                
            }else{
            
                Frame:setMass(progress(Loaded,MODELS[RandT+8,number])*((3/5)*(WEIGHTMUL*907)))
                Bogie1:setMass(progress(Loaded,MODELS[RandT+8,number])*((1/5)*(WEIGHTMUL*907)))
                Bogie2:setMass(progress(Loaded,MODELS[RandT+8,number])*((1/5)*(WEIGHTMUL*907)))
                
            }
            
            TotalTrainWeight = TotalTrainWeight + (Bogie1:mass() + Bogie2:mass() + Frame:mass())/WEIGHTMUL
            
            for(X = 1,MODELS[RandT+7,array]:count()){
                
                W = randint(MODELS[RandT+7,array][X,vector]:y(),MODELS[RandT+7,array][X,vector]:z())
                 
                Frame:setBodygroup(MODELS[RandT+7,array][X,vector]:x(),W)
                if(Frame:getBodygroups(MODELS[RandT+7,array][X,vector]:x()) == 1){
                    
                    printS("Hidden bodygroup detected! Report this to Metaladon, if you will. " + MODELS[RandT+7,array][X,vector]:x() + W)
                    
                }
                
            }

            W = randint(1,WEATHERING:count()/INFOPERWEATHER)*INFOPERWEATHER
            
            for(X = 1,MODELS[RandT+4,array]:count()/2){
                 
                Frame:setSubMaterial(MODELS[RandT+4,array][X*2,number],WEATHERING[W-(INFOPERWEATHER-MODELS[RandT+4,array][X*2-1,number]),string])
                
            }
            
            Bogie1:propPhysicalMaterial("friction_00")
            Bogie2:propPhysicalMaterial("friction_00")
                
            Bogie1:setColor(BogieData[5,vector])
            Bogie2:setColor(BogieData[5,vector])

            BogBody = bB(MODELS[RandT+2,string],MODELS[RandT+8,number],BogieData[7,array])
            
            for(X = 1,BogBody:count()/2){
                
                Bogie1:setBodygroup(BogBody[X*2-1,number],BogBody[X*2,number])
                Bogie2:setBodygroup(BogBody[X*2-1,number],BogBody[X*2,number])
                
            }
            
            for(X = 1,BogieData[8,array]:count()/2){
                
                Bogie1:setSubMaterial(BogieData[8,array][X*2-1,number],BogieData[8,array][X*2,string])
                Bogie2:setSubMaterial(BogieData[8,array][X*2-1,number],BogieData[8,array][X*2,string])
                
            }
            
            if(!MODELS[RandT+5,array]:count()){
                
                Frame:setColor(vec(255))
                
            }else{
            
                W = randint(1,MODELS[RandT+5,array]:count())
                
                local Base = COLORS[MODELS[RandT+5,array][W,number]*2-1,vector]
                local Shade = COLORS[MODELS[RandT+5,array][W,number]*2,vector]
                
                Frame:setColor(toRGB(vec(mod(random(Base:x(),Shade:x()),360),clamp(Base:y()+random(Shade:y(),-Shade:y()),0,1),clamp(Base:z()+random(Shade:z(),-Shade:z()),0,1))))
                
            }
            
            Frame:setSkin(randint(MODELS[RandT+6,vector2]:x(),MODELS[RandT+6,vector2]:y()))
            
            TotalTrainLength += modelLength(RandT)
            
            Instr[1,table][2,number] = clamp(Instr[1,table][2,number]-1,0,MAX)
            Instr[1,table][3,number] = clamp(Instr[1,table][3,number]-modelLength(RandT)/12,0,MAX)
            Instr[1,table][4,number] = clamp(Instr[1,table][4,number]-((Bogie1:mass() + Bogie2:mass() + Frame:mass())/907)/WEIGHTMUL,0,MAX)
            
            if(!Instr[1,table][2,number] & !Instr[1,table][3,number] & !Instr[1,table][4,number]){
                
                Instr:remove(1)
                CommandStack:pushString(Time+" spwn completed")
                Buffer = array()
                endSC()
                
            }
            
            RandT = 0
            
        }
    
    }elseif(safe() & (Instr[1,table][1,string] == "rem")){
    
        if(!Instr[1,table][2,number] & !Instr[1,table][3,number] & !Instr[1,table][4,number]){
            
            endSC()
            Instr:remove(1)
            CommandStack:pushString(Time+" rem end odd")
            
        }else{
                
            TotalTrainLength -= modelLength(CarTs[(ID-1)/3,number])
            TotalTrainWeight -= (Spawned[toString(ID-1),entity]:mass() + Spawned[toString(ID-2),entity]:mass() + Spawned[toString(ID-3),entity]:mass())/WEIGHTMUL
            
            if(TotalTrainLength < 1){
                
                Spacer = 0
                TotalTrainLength = 0
                
            }
            
            Instr[1,table][2,number] = clamp(Instr[1,table][2,number]-1,0,MAX)
            Instr[1,table][3,number] = clamp(Instr[1,table][3,number]-modelLength(CarTs[(ID-1)/3,number])/12,0,MAX)
            Instr[1,table][4,number] = clamp(Instr[1,table][4,number]-((Spawned[toString(ID-3),entity]:mass() + Spawned[toString(ID-2),entity]:mass() + Spawned[toString(ID-1),entity]:mass())/WEIGHTMUL)/907,0,MAX)
            
            Spawned[toString(ID-1),entity]:propDelete()
            Spawned[toString(ID-2),entity]:propDelete()
            Spawned[toString(ID-3),entity]:propDelete()
            Spawned:remove(toString(ID-1))
            Spawned:remove(toString(ID-2))
            Spawned:remove(toString(ID-3))
            
            if((!Instr[1,table][2,number] & !Instr[1,table][3,number] & !Instr[1,table][4,number]) | ID == 1){
                
                Instr:remove(1)
                CommandStack:pushString(Time+" rem end even")
                
                ID = clamp(ID - 3,1,ID) 
                endSC()
                
            }else{
                
                ID = clamp(ID - 3,1,ID) 
                
            }
            
        } 
        
    }elseif(safe() & Instr[1,table][1,string] == "spc"){
        
        Spacer = Spacer + Instr[1,table][2,number]
        Spacer = (Spacer <= 0 ? 0 : Spacer) 
        Instr:remove(1)
        CommandStack:pushString(Time+" spc end")
        
    }elseif(safe() & Instr[1,table][1,string] == "mode"){
    
        local SetTo = determinebogie(Instr[1,table][2,string])
            
        if(SetTo == Head:model()){
            
            printS("Gauge is already set to "+Mode+".")
            owner():soundPlay(3,100,"buttons/button16.wav",0)
            Instr:remove(1)
            CommandStack:pushString(Time+" mode already")
            
        }elseif(SetTo != ""){
            
            local Nmd = gaugeswitch(SetTo)
                
            if(Nmd != ""){
                
                LastBogie = Spawned["3",entity]
                enableConstraintUndo(0)
                if(Head:isValid() & LastBogie:isValid()){noCollide(Head,LastBogie)}
                enableConstraintUndo(1)
                Forced = ""
                resetspawn()
                Mode = Nmd
                printS("Changed the gauge mode to "+Mode+", and reset spawn parameters.")
                owner():soundPlay(3,100,"buttons/bell1.wav",0)
                soundVolume(3,0.2)  
                Instr:remove(1)
                CommandStack:pushString(Time+" mode done")
              
            }
            
        }else{
            
            printS("Could not recognise gauge mode.")
            Instr:remove(1)
            CommandStack:pushString(Time+" mode bad")
            owner():soundPlay(3,100,"buttons/combine_button_locked.wav",0)
            soundVolume(3,0.2)
            
        }
        
    }elseif(safe() & Instr[1,table][1,string] == "respawn"){
        
        local SetTo = gaugeswitch(Instr[1,table][4,string])
          
        if(SetTo != ""){
            
            Forced = ""
            resetspawn()
            Mode = SetTo
            
            printS("Deleting all cars spawned by the carspawner.")
            owner():soundPlay(3,100,"buttons/bell1.wav",0)
            soundVolume(3,0.2)
            Instr:remove(1)
            CommandStack:pushString(Time+" respawn completed")
          
        }
        
    }elseif(safe() & Instr[1,table][1,string] == "restart"){
            
        if(Mode == "PHX"){St = 1}elseif(Mode == "RSG"){St = 2}elseif(Mode == "2ft"){St = 3}else{St = 4}
        
        holoPos(0,Head:toWorld(select(St,vec(0,70,-7),vec(0,70,-7),vec(0,38,12),vec(68,0,-16))))
        holoAng(0,Head:toWorld(select(St,ang(0,0,-90),ang(0,0,-90),ang(0,0,-90),ang(0,-90,-90))))
        holoParent(0,Head)
        printS("Reset everything. Feel free to move the spawner!")
        resetspawn()
        Instr:remove(1)
        CommandStack:pushString(Time+" restart completed")
            
    }elseif(safe() & Instr[1,table][1,string] == "flip"){
            
        if(Mode == "PHX"){St = 1}elseif(Mode == "RSG"){St = 2}elseif(Mode == "2ft"){St = 3}else{St = 4}
        
        holoPos(0,Head:toWorld(select(St,vec(0,70,-7),vec(0,70,-7),vec(0,38,12),vec(68,0,-16))))
        holoAng(0,Head:toWorld(select(St,ang(0,0,-90),ang(0,0,-90),ang(0,0,-90),ang(0,-90,-90))))
        holoParent(0,Head)
        
        local LastBogie = Spawned["3",entity]
        
        if(LastBogie:isValid() & Head:isValid()){
            
            noCollide(LastBogie,Head)
            
        }
        
        resetspawn()
        printS("Flipped the spawner to the opposite direction.")
        
        Head:setAng(ang(0,Head:angles():yaw()+180,0))
        Head:setPos(Head:pos()+vec(0,0,5))
        Head:propFreeze(0)
        
        timer("freeze",500)
        CommandStack:pushString(Time+" flip completed")
        Instr:remove(1)
        
    }elseif(safe() & Instr[1,table][1,string] == "goto"){
        
        soundStop(2)
        
        if(!Instr[1,table][4,number]){
            
            if(Instr[1,table][2,vector] == vec(0)){
                printS("Dismissed the E2. Bring it to your cursor with \".summon\""),noCollideAll(Head,1),Head:setAlpha(0),holoEntity(0):setAlpha(0)
            }else{
                printS("Teleported the E2 to the designated location."),noCollideAll(Head,0),Head:setAlpha(255),Head:propFreeze(0),timer("freeze",500),holoEntity(0):setAlpha(255)
            }
            
        }else{
            
            noCollideAll(Head,0),Head:setAlpha(0),Head:propFreeze(0),timer("freeze",500),holoEntity(0):setAlpha(255)
            Delay = 1
            timer("delay",800)
            
        }
        
        if(Mode == "PHX"){St = 1}elseif(Mode == "RSG"){St = 2}elseif(Mode == "2ft"){St = 3}else{St = 4}
        
        holoPos(0,Head:toWorld(select(St,vec(0,70,-7),vec(0,70,-7),vec(0,38,12),vec(68,0,-16))))
        holoAng(0,Head:toWorld(select(St,ang(0,0,-90),ang(0,0,-90),ang(0,0,-90),ang(0,-90,-90))))
        holoParent(0,Head)
        
        Head:setPos(Instr[1,table][2,vector])
        Head:setAng(ang(0,Instr[1,table][3,number],0))
        Head:propSetVelocityInstant(vec(0))
        resetspawn()
        CommandStack:pushString(Time+" goto completed")
        Instr:remove(1)
        
    }elseif(safe() & Instr[1,table][1,string] == "donezo"){
        
        if(minquota() > 3000 & maxquota() > 40000){
            
            #signalSend("donezo",1)
            dsSend("donewith","operations",Instr[1,table][2,string])
        
            CommandStack:pushString(Time+" donezo")
            Instr:remove(1)
            
        }
        
    }

}


Top = Instr[1,table][1,string]
if(!Head:isValidPhysics()){SCP:propDelete(),Head:propDelete(),selfDestruct()}
